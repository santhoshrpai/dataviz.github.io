{

"totalTopics":"10",


"totalLines":"300",

"topics":[{"topicID":1,"strength":88,"labels":[{"phrase":"Android","prob":0.2},{"phrase":"mobile","prob":0.2},{"phrase":" Java","prob":0.2},{"phrase":"google","prob":0.2},{"phrase":"https","prob":0.2}]},
{"topicID":2,"strength":7,"labels":[{"phrase":"Loops","prob":0.367826820806},{"phrase":"function","prob":0.261955329161},{"phrase":"While","prob":0.260373021189},{"phrase":"init","prob":0.0552599084916},{"phrase":"remove","prob":0.0545849203523}]},
{"topicID":3,"strength":8,"labels":[{"phrase":"Servlets","prob":0.170144009755},{"phrase":"Tomcat","prob":0.170144009755},{"phrase":"Deploy","prob":0.164927995123},{"phrase":"invoke","prob":0.164927995123},{"phrase":"Util","prob":0.164927995123},{"phrase":"Apache","prob":0.164927995123}]},
{"topicID":4,"strength":80,"labels":[{"phrase":"Multithreading","prob":0.166666666667},{"phrase":"write","prob":0.166666666667},{"phrase":"produce","prob":0.166666666667},{"phrase":"complete","prob":0.166666666667},{"phrase":"execute","prob":0.166666666667},{"phrase":"single","prob":0.166666666667}]},
{"topicID":5,"strength":20,"labels":[{"phrase":"Variables","prob":0.2},{"phrase":"size","prob":0.2},{"phrase":"number","prob":0.2},{"phrase":"character","prob":0.2},{"phrase":"byte","prob":0.2}]},
{"topicID":6,"strength":7,"labels":[{"phrase":"JSON","prob":0.256645974355},{"phrase":"document","prob":0.186113412342},{"phrase":"parse","prob":0.186113412342},{"phrase":"null","prob":0.186034061379},{"phrase":"Annotation","prob":0.185093139582}]},
{"topicID":7,"strength":7,"labels":[{"phrase":"Inheritance","prob":0.409374558127},{"phrase":"implement","prob":0.409374558127},{"phrase":"interface","prob":0.0604169612483},{"phrase":"subclass","prob":0.0604169612483},{"phrase":"instantiate","prob":0.0604169612483}]},
{"topicID":8,"strength":17,"labels":[{"phrase":"Database","prob":0.227184151917},{"phrase":"table","prob":0.227184151917},{"phrase":"store","prob":0.227184151917},{"phrase":"save","prob":0.225811891145},{"phrase":"save","prob":0.0926356531028}]},
{"topicID":9,"strength":10,"labels":[{"phrase":"Eclipse","prob":0.298665400282},{"phrase":"library","prob":0.17533364993},{"phrase":"include","prob":0.17533364993},{"phrase":"maven","prob":0.17533364993},{"phrase":"source","prob":0.17533364993}]},
{"topicID":10,"strength":8,"labels":[{"phrase":"Network","prob":0.267809809442},{"phrase":"page","prob":0.218946001648},{"phrase":"response","prob":0.218946001648},{"phrase":"browse","prob":0.177124396867},{"phrase":"move","prob":0.117173790394}]}],

"author":"timothy",
"date":"1243498080000",
"title":"Hackers Breached US Army Servers---------------",
"sent": [
         {
          "linePolarity":-50,
            "systemtopicid":1, 
            "systemlabel":"army security lapse",
            "topicid":1,
            "sent":"An anonymous reader writes A Turkish hacking ring has broken into 2 sensitive US Army servers according to a new investigation uncovered by InformationWeek.",
            "sentimentwords":[]
         },
         {"linePolarity":0,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":1, "goldlabel":"hackers breaching US army servers","sent":"The hackers who go by the name m0sted and are threadingd in Turkey penetrated servers at the Armys McAlester Ammunition Plant in Oklahoma in January.","sentimentwords":[]},{"linePolarity":-1.5,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":1, "goldlabel":"hackers breaching US army servers", "sent":"Users attempting to access the site were redirected to a page featuring a climatechange protest.","sentimentwords":[]},{"linePolarity":-1.5,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":1, "goldlabel":"hackers breaching US army servers", "sentid":"4", "sent":"In Sept 2007 the hackers breached Army Corps of Engineers servers.","sentimentwords":[]},{"linePolarity":-1.5,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":1, "goldlabel":"hackers breaching US army servers", "sent":"That hack sent users to a page containing antiAmerican and antiIsraeli rhetoric.","sentimentwords":[]},{"linePolarity":1.5,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":2, "goldlabel":"sql injection attacks", "sentid":"6", "sent":"The hackers used simple SQL Server injection techniques to gain access.","sentimentwords":[]},{"linePolarity":0.579166666667,"systemtopicid":1, "systemlabel":"army security lapse", "topicid":1, "goldlabel":"hackers breaching US army servers", "sentid":"7", "sent":"Thats troubling because it shows a major Army security lapse and also the ability to bypass supposedly sophisticated Defense Department tools and procedures designed to prevent such breaches.","sentimentwords":[]}]
,"children":[
  {
    "author": "blank",
    "parent": "",
    "title": "\"Update Eclipse with Android development tools v. 23\"",
    "commentid": "q_103684",
    "date": "Jun 26, 2014 11:21:46 AM",
    "children": [
      {
        "date": "Jun 26, 2014 11:33:15 AM",
        "commentid": "a_127368",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  update : google has released adt v23.0.2. this solved many problems of previous adt version 23.    step-by-step:      help -> install new software...   for \\\"work with\\\"  select the android source       tick adt v23.0 for installation  then click \\\"next\\\"   eclipse will show \\\"install remediation page\\\" since there is conflict with previous version. (if it does not  see below.) select \\\"update my installation to be compatible with items being installed\\\" to uninstall the old version and install the new one. after that  proceed with the usual steps        note: when i installed the new version of adt  i didn't include the new version of \\\"android native development tools\\\" package. instead  i installed the rest of packages first  and then installed \\\"android native development tools\\\". for a reason  if i try to install all the new packages including \\\"android native development tools\\\"  the installation fails.    update: if there is no \\\"remediation page\\\"   the only way to remove the adt plugin from eclipse is to go to   and uninstall from there  but there is a risk of uninstalling eclipse itself.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 8:35:10 AM",
        "commentid": "a_127369",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  google response :     this is a packaging bug. the entire proguard file is missing. we'll have an update asap  but until then just copy it over from a previous version of the tools:        http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz     http://dl.google.com/android/android-sdk_r22.6.2-windows.zip     http://dl.google.com/android/android-sdk_r22.6.2-macosx.zip       and copy over the following files:      tools/hprof-conv    tools/support/annotations.jar    tools/proguard      so at the end if you started from a new adt copy by hand the files :)     edit:  with the latest adt release  the bundle should now work with auto-update  so  install these new versions :      linux 64 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip    linux 32 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip    mac:  http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip    win32:  http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip    win64:  http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip        don't try to upgrade from previous version  because it doesn?t work at all. if you have got problems with zipalign  it's now under build-tools and no more under tools/ so you can do a symbolic link or just copy it into the expected folder.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 1:56:10 PM",
        "commentid": "a_127370",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " none of the other answers worked for me using the adt bundle published on developer.android.com.     i ended up downloading the latest version of eclipse ( not the adt bundle ) and then installing the adt plugin via help > install new software > entering   (mentioned by @red_).     i also had to update my workspace to point to my previous workspace  and most things seemed to be restored.    on a side note: this seems like a good time to migrate to android studio...  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 2:41:52 AM",
        "commentid": "a_127371",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  note: use this approach with caution because this might break your eclipse installation.   (see comments)     this might help you if you installed the adt plugin  manually  but if you are using the eclipse from the  eclipse adt bundle  the below steps could break your eclipse and you may not be able to use the eclipse again!    go to         help --> about eclipse sdk --> installation details..      now you will see all   version and then click   button at bottom    after uninstallation goto         help --> install new software -->    http://dl-ssl.google.com/android/eclipse/       then install all the things now it is ready  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 9:45:54 AM",
        "commentid": "a_127372",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i was updating my build server today and came across the same issue. it has been reported here:  https://code.google.com/p/android/issues/detail?id=72419     the fix is in progress and the work around according to the project manager is:        please wait for an updated version within a day or two. until then  your workaround is to do download one of         http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz          http://dl.google.com/android/android-sdk_r22.6.2-windows.zip          http://dl.google.com/android/android-sdk_r22.6.2-macosx.zip         and copy over the following files:           [edit] zipalign was missing for me too  check to see if you need to copy this as well  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 29, 2014 1:56:30 PM",
        "commentid": "a_127373",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " it works for me :)    if for some reason you installed an adt preview and need to  revert back  to the current stable  you can't use the dialog to install \\\"new\\\" software since what you want is actually an older one. instead do this:      open help > about eclipse... on windows or linux. on mac  use the app's menu > about...   click the \\\"installation details\\\" button.   select the \\\"installation history\\\" tab.   select one of the previous configurations.   click the \\\"revert\\\" button at the bottom.         "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 11:59:17 AM",
        "commentid": "a_127374",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i have done following to resolve an issue.       go to  http://developer.android.com/sdk/installing/installing-adt.html  and download the latest adt zip file (at the bottom of page).     go to  eclipse -> help -> about eclipse -> installation details      delete  android ddm  android development tools  hierarchy viewer  native development tools  traceview  etc  22.x version .     help -> install new software -> add -> archive - > select the downloaded zip file in step 1.     select all the latest version of all 23 which i have deleted in step 3 and accept the license agreement.       restart eclipse  and it fixes my issue.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 16, 2014 3:00:10 AM",
        "commentid": "a_127375",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " this is what they are saying about this:     ok  guys  sorry about all this trouble  and we apologize for the messed up releases. here's the summary:       there is no way to update an existing adt bundle that you might have downloaded.    you can do one of two options:       install eclipse from eclipse.org and install adt by pointing to the update site:  https://dl-ssl.google.com/android/eclipse      download bundles from here:          linux 64 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip  linux 32 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip  mac:  http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip  win32:  http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip  win64:  http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip     starting with adt bundle 23.0.2  you should be able to update to future versions of adt.     source:    https://code.google.com/p/android/issues/detail?id=72912   "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 8:01:36 AM",
        "commentid": "a_127376",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " only helped:      fresh eclipse installation ( http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/lunar )   help --> install new software -->  https://dl-ssl.google.com/android/eclipse/     "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 3, 2014 7:24:23 AM",
        "commentid": "a_127377",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " there is a lot of confusion going around in this thread. there are two solutions depending on how you installed adt.       if you installed the adt plugin manually then i believe you can use the \\\"delete adt\\\" -> \\\"install new software\\\" approach.     if you are using the adt bundle then do not follow that solution! you will break eclipse. here is an update from a google member - read #18:      https://code.google.com/p/android/issues/detail?id=72912        you must download a new version of the adt-bundle (yep  it's frustrating!).  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 2:32:39 AM",
        "commentid": "a_127378",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " if you install a new  eclipse  version it will work. here's what i did:      installed the new eclipse version  luna   made a backup of the current workspace.   ran the new eclipse  luna  and updated the workspace   installed the  adt plugin  (help -> install new software)   restarted eclipse   done    "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 12:50:13 PM",
        "commentid": "a_127379",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  do not do this      warning: please see the comments below this answer. these steps have had a negative impact for many people.       click help / install new software...   click on what is \\\"already installed\\\" (as in picture below)   in the new window you can uninstall the old adt (uninstall android development tools  android ddms  android hierarchy viewer  android traceview  android native development tools and tracer for opengl es)   restart eclipse   then again click on help / install new software   choose adt... install       i hope it helps!       "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 2:44:25 AM",
        "commentid": "a_127380",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " after trying the approaches in other answers without success  i just installed a new bundle from  http://developer.android.com/sdk/installing/index.html?pkg=adt  and that worked fine.    do the following:      as you don't want to re-download all the platforms again  copy the existing one from  /old_android_sdk_path/sdk/platforms  to  /new_android_sdk_path/sdk/platforms .   when opening the new eclipse from the recent downloaded bundle  make sure you reuse the previous 'workspace' folder. that will ensure that all your previous settings will be remembered.   after opening the new eclipse on the previous workspace  please check if the used android sdk is pointing to the new one (eclipse preferences -> android). it might be pointing to the old one  as you've reused the previews workspace settings.      with these steps  you should't have to reconfigure everything  and you won't need to spend time troubleshooting this  bug  on this upgrade from google developers.    good luck! ;-)  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 3, 2014 1:54:35 AM",
        "commentid": "a_127381",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " there is no way to update an existing adt bundle that you might have downloaded.    you can do one of two options:       install eclipse from eclipse.org and install adt by pointing to the update site:  https://dl-ssl.google.com/android/eclipse      download bundles from:       linux 64 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip      linux 32 bit vm:  http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip      mac:  http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip      windows 32 bit:  http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip      windows 64 bit:  http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip           starting with adt bundle 23.0.2  you should be able to update to future versions of adt.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Aug 8, 2014 11:58:45 PM",
        "commentid": "a_127382",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " you need to uninstall the old version and install 23    uninstall: help > about eclipse sdk > installation details  select android related packages to uninstall    and then install v23.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 1:57:01 AM",
        "commentid": "a_127383",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "   just uninstall previous adt.   go to about eclipse -> installation details   uninstall all plugins which id start with com.andoird.ide   install adt again from the update site.    "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 30, 2014 7:27:06 PM",
        "commentid": "a_127384",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  how to update from 22.xx.x to 23.0.2 (my solution).  this will beat the  dependency issues      i was suffering from this issue for days  and i have tried every single solution on this link  but no luck.     i finally figured out a solution that actually works!    please note that this solution works in windows 7 (64bit).    it should probably work for other windows operation system.    i am just trying to help  so please don't down-vote me if it doesn't work for your situation.    here we go:     1  - download the latest adt bundle from     http://developer.android.com/sdk/index.html#download      2  - unzip it and open \\\"eclipse\\\" folder --> \\\"plugins\\\" folder     3  - now go to your old eclipse and open \\\"eclipse\\\" folder --> \\\"plugins\\\" folder  and copy everything inside.     4  - now paste them into the \\\"plugins\\\" folder of the (new eclipse)  but do not overwrite anything.     5  - while inside of the \\\"plugins\\\" folder of your new eclipse  do the search. type in 22. (notice 22 with a dot) and hit enter.     6  - the search result will show up all the files or folders with .....22.6...... for example     com.android.ide.eclipse.adt_ 22.6.2 .v201403212031-1085508     7  - highlight all of these files/folders and hit delete key.     8  - make sure to update your old api/sdk to the latest version and load this sdk directory to work with your new eclipse.     or     you can watch this video  which shows you how to move all your sdk/api to your new sdk folder. please give him credit for making this video.    link:  https://www.youtube.com/watch?v=jpzpjdnbbn0     i have not tried to update from any other adt versions  but i think it should work for any old adt versions too....      don't forget to backup stuff before attempting.    "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 12:47:34 PM",
        "commentid": "a_127385",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " on adt bundled eclipse i had to first uninstall the adt and then do a fresh install. to remove the adt plugin from eclipse go to help > about eclipse > installation details. select adt plug-in  then click uninstall. after uninstallation install adt from help > install new software.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 4:30:46 AM",
        "commentid": "a_127386",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " what i have just found is that you need to update your adt plugin in your eclipse (whether stand alone or adt bundle) before updating your build tool.    if your eclipse installation points to the most recent build tool and your eclipse is having adt 22.x  it will show those errors.     what worked for me: (on ubuntu 14.04 64-bit)         installed an older version of eclipse and adt (from the bundle)   this copy of eclipse was pointing to an older sdk verion with old build tools (before 20)   updated the adt to v23 (via archive  in my case)   pointed eclipse to the latest version of build tools.      you may not have an older copy of eclipse and build tools  in that case you can uninstall latest build tool from sdk manager and install the older copy.  once everything starts working fine  do the above steps.    i am trying to upload older copies of such bundles somewhere on the internet  will update the links here  once i am done uploading.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 28, 2014 1:44:46 AM",
        "commentid": "a_127387",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i was getting the same \\\"conflicting dependency\\\" error on mac os x 10.9.3 and simply upgrading was not an option.  what finally worked was downloading the latest   eclipse adt bundle   zip file from developer.android.com  extracting it and moving only \\\"eclipse\\\" folder to the place where my old eclipse folder was. (extracting the eclipse adt bundle zip file will give you \\\"eclipse\\\" and \\\"sdk\\\" folders).    if you decide to go the same route  first make sure you know what your workspace path is. this can be found in preferences.  then rename your old \\\"eclipse\\\" directory (not eclipse.app) to something like eclipse-22.6.3  then move extracted \\\"eclipse\\\" folder into its place. run new eclipse.app inside  and when it asks you about workspace  just enter the same path as you noted above.  or it can also be set later in preferences.    maybe worth adding is that to re-enable  android sdk manager  and  android virtual device manager  choose  window -> customize perspective -> command groups availability  and select  android sdk and avd manager . this will add these 2 items to the \\\"window\\\" menu item for the current perspective (java).    i didn't move the extracted \\\"sdk\\\" folder  because i already had sdk folder in the same directory as eclipse  which i have already updated to the latest android tools. but if it makes you feel safer  you can also rename your old sdk folder (for backup purposes) and move the freshly extracted one into its place.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 11:37:34 AM",
        "commentid": "a_127388",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " for me it helped to delete android 4.4w which is also api 20 and might be a cause for the conflict. so only install android 4.4w or android l until they fix it.    and (again this might only be for me) it only works in android studio not in eclipse ...  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 1:00:28 PM",
        "commentid": "a_127389",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i had to delete adt and install it again.     however be warned   this caused me and one other person to have an annotations.jar missing errors in the java build path for certain projects  probably because it was trying to look for an old sdk  so upgrading projects is the next step i have to take.    the errors relate to libraries mostly  google play services  facebook sdk  actionbarcompat.    for this step  you uninstall adt  then put the url back in to download them. the url is:    "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 26, 2014 6:40:03 PM",
        "commentid": "a_127390",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i found a solution for the problem with \\\"conflicting dependency\\\". i don't have the same page of daniel d?az's response  but a page show \\\"conflicting dependency\\\"  and i can't make anything.    the problem is that i'm not the owner of the file. eclipse was installed in other session (on os&nbsp;x). i have the right to read and write the eclipse file  but i'm not the owner. make a \\\"chown\\\" command on all eclipse files to solve the problem. after  i have the same result as daniel diaz.     i hope this helps someone.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 6:33:52 AM",
        "commentid": "a_127391",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " if eclipse gives an error after uninstalling the adt plugin from your eclipse installation  try to edit file   in the eclipse folder -> configuration. find:         and change it to:         i hope it works for you too.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 30, 2014 5:41:01 PM",
        "commentid": "a_127392",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " warning    there is now an update for adt 23.0.1  but the windows and linux scripts are messed up  so wait with the upgrade!    you could check for example tools/proguard/bin/*.sh in  http://dl.google.com/android/android-sdk_r23.0.1-windows.zip .  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 3, 2014 2:18:06 AM",
        "commentid": "a_127393",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i faced the same problem and solved it. you need to uninstall the android plugin entirely from within eclipse (from the \\\"about\\\" section..)  including trace view..    then added the adt plugin again ( https://dl-ssl.google.com/android/eclipse/ ) and install it.    the problem is solved!    i guess it's a bug with the sdk manager or adt plugin update mechanism...  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 14, 2014 9:35:03 PM",
        "commentid": "a_127394",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i am using eclipse kepler and this is how i solved my problem.    goto help -> install new software -> click add.    in the popup  give any name (i named it as eclipse adt plugin)  and in the link's place  use  https://dl-ssl.google.com/android/eclipse/     once you click ok  you will be displayed with new packages that will be installed and old packages that will be deleted. don't worry about these packages. click ok.    new packages will be installed and this should solve your problem.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 15, 2014 8:37:09 AM",
        "commentid": "a_127395",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "  solution     this is solution is the correct way of how you should change the files and keep your eclipse adt and not downloading a new one. hope it helps everyone.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Aug 8, 2014 2:53:35 PM",
        "commentid": "a_127396",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i did this to solve the same issue (in os x):      help > install new software > add or select this repository \\\" http://download.eclipse.org/eclipse/updates/4.3 \\\"    under \\\"eclipse platform\\\" select the newest version of eclipse.   the installer will ask if you want to uninstall the adt  click finish.   restart eclipse and install only the adt 23 using this repository:  https://dl-ssl.google.com/android/eclipse .   restart eclipse and install ddms  hierarchy viewer  trace view etc.   restart eclipse again.      hope it helps.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 27, 2014 4:01:47 AM",
        "commentid": "a_127397",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " after hours of struggling with this issue i finally decided to get rid of the update. i'm posting this just in case you want to go back to version 22.6.2:      open the sdk manager   leave everything unchecked but the first option (the one with adt version 23)   delete that package   restart eclipse      hope this helps  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 1, 2014 10:24:15 PM",
        "commentid": "a_127398",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " download the adt v23 plugin from google and install it as local archive from the downloaded zip file in eclipse.     http://developer.android.com/sdk/installing/installing-adt.html#download   "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 2, 2014 1:44:46 AM",
        "commentid": "a_127399",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i simply went to my android resources folder on my c:/ drive (c:/android) deleted the 'eclipse' folder and all its contents. downloaded android developer tools once more and just moved over the 'eclipse' folder.    started up and everything was fine  i had updated to version 23.    hopefully this helps  possibly not suitable for everyone as some of you have eclipse modifications but for someone who  like me  wanted a quick fix and get back to developing this seemed to be the easiest path.    regards.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 6, 2014 3:21:16 PM",
        "commentid": "a_127400",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i have followed instructions found here and tried to fix my old eclipse + sdk + adt  but with no luck. the basic problem keeps beeing the same; i still get the error message:        this android sdk requires android developer toolkit version 23.0.0 or above. current version is 22.6.3.v201404151837-1123206. please update adt to the latest version.      but my eclipse can't find updates and can't install adt 23 as new software. so i can't compile my old project in my workspace.    i tested a fresh eclipode bundle for windows&nbsp;8  followed instructions found from android's developers page  step by step  and it worked fine. so it seems that the windows eclipse build is not broken. but i wan't use my linux installation  my old ubuntu 10. it seems obvious  that to getting the linux eclipse environment working again  i must install a new eclipse bundle  my old eclipse won't ever see updates for adt 23 to get things working. again  these intructions are for linux developers that wan't to get their old workspace projects working again without changes in the developing environment  except you must install a new eclipse bundle  but after that your projects will work as well as before the version 23 sdk/adt-mess.      if you are an android developer you want to be sure  that you developing environment won't be messed up. backup:    ~./android (here are your developer keys)   your old sdk dirrectory   your workspace      download the eclipse bundle   get the android sdk .   follow instructions  create directory   and unzip bundle there. you get eclipse and sdk directories.   start eclipse from that directory   eclipse asks for a workspace. you can give it the old one.   in eclipse settings set sdk as downloaded sdk.   start android sdk manager and download tools  android versions you use and extras said in the android developer tool page instructions   you should now be ready to compile your old projects again  but for me it was not that simple. my old projects had errors. so open problems windows and you get to know that annotation.jar is missing. so you must copy   from your old sdk  from  the backup you made  or from the older   explained in this thread to &lt;new sdk>/tools/support/annotations.jar      after that i could use my old workspace in ubuntu and compile and launch applications to android devices. it was that simple. thanks google ;-(  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 13, 2014 11:57:04 AM",
        "commentid": "a_127401",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " there are many possible answers to this question  i think it all depends on what your environment and installation procedure is. i'm running into the same issue as stated multiple times above. cannot install adt 23 because of conflict dependency.    this is my environment:    i'm running windows 7 64-bit with eclipse 4.2.2. i installed adt through help -> install new software.     my solution:    help -> about eclipse -> uninstall -> all_android. then i simply installed each of the adt 23 tools through the \\\"install new software\\\".     note: this is with the latest adt release.    hope this helps!  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 15, 2014 12:47:27 AM",
        "commentid": "a_127402",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " it's working to uninstall the old files  but you don't have to restart eclipse. after the uninstall process  install the new software and then restart eclipse.     it was quite simple and works for me.   "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 15, 2014 2:33:16 AM",
        "commentid": "a_127403",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": "    i solved these problem by deleting the adt bundle which was shown error.     then  extract  the new adt bundle to solve these problem.after that just updated the android 4.4.2(api 19) in android sdk manager.     you are getting these   because of updating the  .below i shown the  screenshot of it.          install everything as shown in the screenshot itself.then these problem will not occur again.     "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 18, 2014 8:37:59 AM",
        "commentid": "a_127404",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " the answers already provided display how much the solution depends on your particular environment. i initially tried upgrading a windows 8.1 machine; when that failed i tried upgrading a vista pc. when that failed  i tried android studio on the win 8.1. the problems that we all are encountering are resulting in different solutions because of version conflicts between o/s  eclipse  java and  of course  the google debacle.    here's what i did: i gave up on the bundle. for vista i installed eclipse 4.3.2 (kepler) and downloaded the sdk installer which loaded 23.0.2. already had jdk1.6 installed. only gotcha left was to use the sdk manager to download my minimum platform (api 8) - v20 isn't that far backward compatible. but at least now i am not totally dead in the water.    for windows 8.1 android studio seemed to install. but when i tried to install my project  it stopped when it complained that google-play-services_lib was not included. i had not been using it  so it appears this is a requirement of android studio. really?    so i went back to eclipse. i had installed luna and jdk8u5 but then tried to revert to what worked for vista. jdk1.6 is not available from oracle so i had to download 1.7 and hope. downloaded the sdk which again got 23.0.2. so far so good.     problem then was installer-r23.0.2-windows apparently is hardwired to find jdk at 'c:\\\\windows\\\\system32\\\\java.exe':[2]. i set the path to jdk1.7.0_65\\\\bin and set java_home environment variable to it also. neither worked. installer still choked on java8 in windows\\\\system32.    so i renamed c:\\\\windows\\\\system32\\\\java.exe to disable it and the installer-r23 found c:\\\\program files\\\\java\\\\jre8\\\\bin\\\\java.exe. the installer completed successfully. why it didn't like the same file (v8.0.5.13) in windows\\\\system 32 is a mystery to me but maybe a clue to someone.    still had to download api 8  but i thought i was operational on the 8.1 machine too.    except for getting eclipse to recognize my motorola razrm as a usb-attached device. that required going to the win8.1 devicemanager and updating the mot composite adb interface in adb interface. that required a download of the motorola device manager. still the phone did not appear in the eclipse devices view. it was waiting for a new confirmation on the phone that apparently has been added to the latest adt. while i needed to upgrade the driver on my samsung 10.1 tablet  it had not added the connection request confirmation.    finally  the nightmares were over. my biggest problem appears to have been leaping to the latest versions - and then trying to regress when 23.0 broke. i think i learned a hard lesson. but  really  does it have to be this hard???    hope this helps.   "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 12:52:35 AM",
        "commentid": "a_127405",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " complete procedure to  download adt   configure it in eclipse and fixing dependency issues :     download adt:-        open this link :  https://dl-ssl.google.com/android/eclipse/      download adt-23.0.2.zip which is the latest version in zip folder and don't unzip it.        configure adt in eclipse:-       open eclipse -> go to help -> install new software...    click on add button on the right.   add repository dialog will open.   in name : write adt plugin   in location : give path of adt zipped folder which you have downloaded by clicking on  archive..  button.      **an error may come as duplicate location   to solve it follow the below steps:    1.1 close the current diolog box.    1.2 click on  available software sites  link. and select the entry which has same location as you have added zipped file or adt plugin entry. after selecting   remove it.    1.3 then again   come to the previous add dialog.    1.4 again  add name and location in add repository dialog box.     select all the options in development tools and click on next to install the adt completely.      fixing dependency issues in adt :  after all the above steps   dependency issues may come to solve it follow the following steps:       click on  already installed  in install dialog box.     click on installed software tab   now select all the development tools of previous version looking at versions and uninstall them.       now all the issues of dependency issues would evaporate and follow the next   next wizard to install:)     all the best. it will definitely help.   "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Aug 17, 2014 10:54:18 PM",
        "commentid": "a_127406",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " this worked for me. i kept upgrading to version 23.02 (or 23.03 if presented) using a new install of adt bundle  and migrating the your original workspace across and add the patches.  this is the procedure for adt bundle only.     (backup your workspace first)    1/ install latest adt bundle from google. (for some reason using googles download page just goes around in a loop on chrome!?!)      linux 64 bit vm: http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip    linux 32 bit vm: http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip        mac: http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip    win32: http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip    win64: http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip       2/ download the patch from here:      linux  http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz    windoze  http://dl.google.com/android/android-sdk_r22.6.2-windows.zip    mac  http://dl.google.com/android/android-sdk_r22.6.2-macosx.zip       3/ apply the patch as per  googles (poorly described) instructions       ...and copy over the following files:    tools/hprof-conv  tools/support/annotations.jar  tools/proguard      which means => copy the file only of tools/hprof-conv  which means => copy the file only of tools/support/annotations.jar  which means => copy the directory and all contents for tools/proguard     3/ point your old workspace to the new install on startup. (projects will still come up with errors  don't worry)    4/ select help-> install new software  select update site  and select version 23.03 when prompted.      check the update sites  and edit the one for google from https => http like this:  . this seems to make eclipse updater build a new update profile that avoided download errors. you might also get \\\"unsigned\\\" prompt warning prompts from windoze but just \\\"allow access\\\" to prevent blocking.      5/ if you still get errors on references to \\\"android.r\\\"  this is because you may not have the appropriate \\\"platform build tools\\\". check the \\\"android sdk manager\\\" for which build tools you have like this:   also check your \\\"android\\\" build for the project to make sure you have the compatible android api.    version 23.02 should be downloaded  and your projects should now compile.     google have abandoned all the ui trimmings for eclipse adt (ie you'll see the juno splash). i thought this would be a problem but it seems ok. i think it shows how desperate google were to get the fix out. given that android studio is not far away google don't want invest any more time into adt. i suppose this is what you get with \\\"free\\\" software. hopefully the adults are back in charge now  and google studio won't be such a disaster.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Aug 21, 2014 3:20:20 AM",
        "commentid": "a_127407",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " based on win7. eclipse  version: 4.2.2 build id: m20130204-1200    for those who broke eclipse after trying to uninstall adt plugin.    you need to remove all  android  folder/jars from plugin folder and features folder.    then check your config.ini in /configuration. probably you have these lines:         ...         change them like this:         maybe needed to run your eclipse from command line:         then i could install the newest adt plugin  without needing to download whole eclipse packages and loosing all configuration/plugins.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Oct 7, 2014 6:21:28 AM",
        "commentid": "a_127408",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " i found these instructions in a comment.    download the newest version of adt and use your existing workspace.  this is actually the least pain-full upgrade you'll ever do.  it didn't mess with the .android folder so i still had my original debug key.  only things missing were a couple of add ons i hardly ever use and they are easily installed into the new version.      note don't install into your existing adt folder create a new folder so you can still fall back if the new install doesn't work.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Dec 15, 2014 6:29:00 PM",
        "commentid": "a_127409",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " the prefect answers is. enter the follow path copy all of them   then parse into     last edit the line   of file    such as  .   restart eclipse.everything is all-right.  "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      },
      {
        "date": "Jun 30, 2014 10:31:55 PM",
        "commentid": "a_127410",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " there is a new update available.      update your android sdk tool to 23.0.1   update your eclipse. go to  help  ->  check for update    then restart your eclipse      this will fix the empty src &amp; layout issue.       "
          }
        ],
        "parent": "q_103684",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": 0.18000000000000016,
        "sent": " i updated eclipse with the new sdk tools (rev 23) but now when eclipse starts i receive the error:        this android sdk requires android developer toolkit version 23.0.0 or above. current version is 22.6.3.v201404151837-1123206. please update adt to the latest version.      no updates were found with  \\\"check for updates\\\" . if i try  \\\"install new software\\\"   i can see the version 23  but i can't upgrade due to the following error:         after download of the last adt from the web site  it seems there's another problem. with sdk tools rev. 23 proguard is not installed  the folder sdk   is missing and other tools are missing. this version contains several bugs.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Do I really have a car in my garage?\"",
    "commentid": "q_90059",
    "date": "Jul 22, 2014 2:01:09 AM",
    "children": [
      {
        "date": "Jul 22, 2014 2:47:03 AM",
        "commentid": "a_110425",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " if you need to make the difference between   and   in your garage  then you should store them in distinct structures.    for instance:         then you can define methods that are specific on boats or specific on cars.    why have polymorphism then?    let's say   is like:         every   has a price so it can be put inside the   abstract class.    yet  the formula determining the price after n years depends on the vehicle  so it left to the implementing class to define it. for instance:         the   class may have an other definition for   and specific attributes and methods.    so now back in the   class  you can define:         the interest of polymorphism is to be able to call   on a    without  caring about the implementation.    usually  downcasting is a sign of a flawed design: do not store your vehicles all together if you need to differenciate their actual type.    note: of course the design here can be easily improved. it is just an example to demonstrate the points.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 22, 2014 2:11:00 AM",
        "commentid": "a_110426",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " to answer your question you can find out what exactly is in your garage you do the following:         update: as you can read from the comments below  this method is okay for simple solutions but it is not good practice  particularly if you have a huge number of vehicles in your garage. so use it only if you know the garage will stay small. if that's not the case  search for \\\"avoiding instanceof\\\" on stack overflow  there are multiple ways to do it.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 22, 2014 2:07:53 AM",
        "commentid": "a_110427",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " if you operate on the base type  you can only access public methods and fields of it.    if you want to access the extended type  but have a field of the base type where it's stored (as in your case)  you first have to cast it and then you can access it:         or shorter without temp field:         since you are using   objects  you can only call methods from the base class on them without casting. so for your garage it may be advisable to distinguish the objects in different arrays - or better lists - an array is often not a good idea  since it's far less flexible in handling than a  -based class.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 22, 2014 2:08:45 AM",
        "commentid": "a_110428",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " you defined that your garage will store vehicles  so you do not care what type of vehicles you have. the vehicles have common features like engine  wheel  behavior like moving.  the actual representation of these features might be different  but at abstract layer are the same.  you used abstract class which means that some attributes  behaviors are exactly the same by both vehicle. if you want to express that your vehicles have common abstract features then use interface like moving might mean different by car and boat. both can get from point a to point b  but in a different way (on wheel or on water - so the implementation will be different) so you have vehicles in the garage which behave the same way and you do not car about the specific features of them.    to answer the comment:    interface means a contract which describes how to communicate with the outer world. in the contract you define that your vehicle can move  can be steered  but you do not describe how it will actually work  it is described in the implementation.by abstract class you might have functions where you share some implementation  but you also have function which you do not know how it will be implemented.    one example of using abstract class:         you will use the same steps by each vehicle  but the implementation of the steps will differ by vehicle type. car might use gps  boat might use sonar to identify where it is.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 5:51:37 AM",
        "commentid": "a_110429",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": "     i'm a newbie to java programming  trying to get the hang of oop.      just my 2 cents -- i will try to make it short as many interesting things have already been said. but  in fact  there is two questions here. one about \\\"oop\\\" and one about how it is implemented in java.    first of all  yes  you  have  a car in your garage. so your assumptions are right. but  java is a  statically typed  language. and the type system in the compiler can only \\\"know\\\" the type of your various object by their corresponding  declaration . not by their usage. if you have an array of    the compiler only knows that. so it will check that you only perform operation allowed on  any   . (in other words   methods  and  attributes  visible in the   declaration).    you can explain to the compiler that  \\\"you in fact know this   is a  \\\"   by using an explicit cast  . the compiler will believe you -- even if  in java  there is a check at run-time  that might lead to a   that prevent further damages if you  lied   (other language like c++ won't check at run-time - you have to know what you do)     finally  if you really need  you might rely of run-time type identification (i.e.:  ) to check the \\\"real\\\" type of an object before attempting to cast it. but this is mostly considered as a bad practice in java.    as i said  this is the java way of implementing oop. there is whole different  class   family  of languages broadly known as  \\\"dynamic languages\\\"   that  only check at run-time  if an operation is allowed on an object or not. with those languages  you don't need to \\\"move up\\\" all the common methods to some (possibly abstract) base class to satisfy the type system. this is called  duck typing .  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 22, 2014 9:09:31 AM",
        "commentid": "a_110430",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " your problem here is at a more fundamental level: you built   in such a way that   needs to know more about its objects than the   interface gives away. you should try and build the   class from the   perspective (and in general from the perspective of everything that's going to use  ): what kind of things do they need to do with their vehicles? how can i make those things possible with my methods?    for example  from your example:         your garage want to know about a vehicle's engine for... reasons? anyway  there is no need for this to be just exposed by  . you can still expose an unimplemented   method in    then implement it as   in   and   in  .    it would be even better to have a three-valued   enum (       )  which would let your code reason on the actual characteristics of a generic   cleanly and accurately. (you'd need this distinction to handle motorbikes  anyway.)  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 9:26:48 AM",
        "commentid": "a_110431",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " you asked your butler:        jeeves  remember my garage on the isle of java? go check whether the first vehicle parked there is automatic.      and lazy jeeves said:        but sir  what if it's a vehicle that can't be automatic or non-automatic?      that's all.     ok  that's not really all since reality is more duck-typed than statically typed. that's why i said jeeves is lazy.   "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 22, 2014 2:07:35 AM",
        "commentid": "a_110432",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " you garage contains vehicles  so the compiler static control view that you have a vehicle and as .auto is a car field you can't access it  dynamically it is a car so the cast don't create some problem  if it will be a boat and you try to make cast to car will rise an exception on runtime.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 25, 2014 11:56:18 PM",
        "commentid": "a_110433",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " this is a good place for application of the   design pattern.    the beauty of this pattern is you can call unrelated code on different subclasses of a superclass without having to do weird casts everywhere or putting tons of unrelated methods into the superclass.    this works by creating a   object and allowing our   class to   the visitor.    you can also create many types of   and call unrelated code using the same methods  just a different   implementation  which makes this design pattern very powerful when creating clean classes.    a demo for example:         as you can see    allows you to call different code on   or   depending on which implementation of   is called. you can also create other implementations of the visitor to call different code with the same   pattern.    also notice that using this method  there is no use of   or any hacky class checking. the only duplicated code between classes is the method  .    if you want to support 3 types of concrete subclasses for example  you can just add that implementation into the   interface too.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 2:39:52 PM",
        "commentid": "a_110434",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " i'm really just pooling the ideas of the others here (and i'm not a java guy  so this is pseudo rather than actual) but  in this contrived example  i would abstract my car checking approach into a dedicated class  that only knows about cars and only cares about cars when looking at garages:         point is  you've already decided you only care about cars when you ask about the car's transmission.  so just ask the carinspector.  thanks to the tri-state enum  you can now know whether it is automatic or even if it is not a car.    of course  you'll need different vehicleinspectors for each vehicle you care about.  and you have just pushed the problem of which vehicleinspector to instantiate up the chain.    so instead  you might want to look at interfaces.    abstract   out to an interface (e.g.  ).  that way  you can check if a vehicle has a transmission  or write an transmissioninspector:         now you are saying  you only about transmission  regardless of vehicle  so can ask the transmissioninspector.  both the bus and the car can be inspected by the transmissioninspector  but it can only ask about the transmission.    now  you might decide that boolean values are not all you care about.  at that point  you might prefer to use a generic supported type  that exposes both the supported state and the value:         now your inspector might be defined as:         as i've said  i'm not a java guy  so some of the syntax above may be wrong  but the concepts should hold.  nevertheless  don't run the above anywhere important without testing it first.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 25, 2014 12:16:29 PM",
        "commentid": "a_110435",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": "  create  vehicle level fields that will help make each individual vehicle more distinct.          set  the vehicle level fields in the inheriting class to the appropriate value.          implement  using the vehicle level fields to properly decipher the vehicle type.         since your telling your compiler that everything in your garage is a vehicle  your stuck with the vehicle class level methods and fields. if you want to properly decipher the vehicle type  then you should set some class level fields e.g.   and   that will give you the programmer a better understanding of what type of vehicle you are using.     java is a type safe language so its best to always type check before handling data that has been casted like your  s and  s.  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 25, 2014 1:54:46 PM",
        "commentid": "a_110436",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " if you are on java  could use reflections to check if a function is available and execute it  too  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 2:33:03 AM",
        "commentid": "a_110437",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.4159999999999999,
            "sent": " modeling objects you want to present in a program (in order to solve some problem) is one thing  coding is another story. in your code  i think essentially it's inappropriate to model a garage using array. arrays shouldn't be often considered as objects  although they do  appear  to be  usually for the sake of self-contained-ness sort of  integrity  of a language and providing some familiarity  but array as a type is really just a computer-specific thing  imho  especially in java  where you can't extend arrays.    i understand that correctly modeling a class to represent a garage won't help answer your \\\"cars in a garage\\\" question; just a piece of advice.    head back to the code. other than getting some hang to oop  a few questions would be helpful creating a scene hence to better understand the problem you want to resolve (assuming there is one  not just \\\"getting some hang\\\"):      who or what wants to understand  ?   given    who or what would perform  ?      it might be some inspector  or someone who knows only how to drive auto-transmission cars  etc.  but from the garage's perspective  all it knows is it holds some vehicle  therefore (in this model) it is the responsibility of this inspector or driver to tell if it's a car or a boat; at this moment  you may want to start creating another bunch of classes to represent similar types of *actor*s in the scene. depends on the problem to be resolved  if you really have to  you can model the garage to be a super intelligent system so it behaves like a vending machine  instead of a regular garage  that has a button says \\\"car\\\" and another says \\\"boat\\\"  so that people can push the button to get a car or a boat as they want  which in turn makes this super intelligent garage responsible for telling what (a car or a boat) should be presented to its users; to follow this improvisation  the garage may require some bookkeeping when it accepts a vehicle  someone may have to provide the information  etc.  all these responsibilities go beyond a simple  main  class.    having said this much  certainly i understand all the troubles  along with the boilerplates  to code an oo program  especially when the problem it tries to resolve is very simple  but oo is indeed a feasible way to resolve many other problems. from my experience  with some input providing use cases  people start to design scenes how objects would interact with each other  categorize them into classes (as well as interfaces in java)  then use something like your  main  class to bootstrap the  world .  "
          }
        ],
        "parent": "q_90059",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.4159999999999999,
        "sent": " i'm a newbie to java programming  trying to get the hang of oop.    so i built this abstract class:         and 2 subclasses:           and   also hold some unique fields and methods that aren't common (don't have the same name  so i can't define an abstract method for them in vehicle).    now in mainclass i have setup my new garage:         i was very happy with polymorphism until i tried to access one of the fields that are unique to car  such as:         the compiler doesn't accept that. i worked around this issue using casting:         that works... but it doesn't help with methods  just fields. meaning i can't do         so my question is - what do i really have in my garage? i'm trying to get the intuition as well as understand what's going on \\\"behind the scenes\\\".       for the sake of future readers  a short summary of the answers below:      yes  there's a   in     being a static typed language  the java compiler will not lend access to methods/fields that are non-\\\"vehicle\\\"  if accessing those through a data structure based on the vehicle super class( such as  )   as for how to solve  there are 2 main approaches below:    use type casting  which will ease the compiler's concerns and leave any errors in the design to run time   the fact that i need casting says the design is flawed. if i need access to non-vehicle capabilities then i shouldn't be storing the cars and boats in a vehicle based data structure. either make all those capabilities belong to vehicle  or use more specific (derived) type based structures      in many cases  composition and/or interfaces would be a better alternative to inheritance. probably the subject of my next question...   plus many other good insights down there  if one does have the time to browse through the answers.     "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"How can I replace two strings in a way that one does not end up replacing the other?\"",
    "commentid": "q_30381",
    "date": "Nov 6, 2014 4:33:46 PM",
    "children": [
      {
        "date": "Nov 6, 2014 4:35:41 PM",
        "commentid": "a_36559",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " you use an intermediate value (which is not yet present in the sentence).         as a response to criticism: if you use a large enough uncommon string like  zq515sqdqs5d5sq1dqs4d1q5dqq?\\\"&amp;?5d4sqjshsjddjhodfqsqc  nv?q^??;d&amp;?sdq: d: ;)????lala  and use that  it is unlikely to the point where i won't even debate it that a user will ever enter this. the only way to know whether a user will is by knowing the source code and at that point you're with a whole other level of worries.    yes  maybe there are fancy regex ways. i prefer something readable that i know will not break out on me either.    also reiterating the excellent advise given by  @david conrad in the comments :        don't use some string cleverly (stupidly) chosen to be unlikely. use characters from the unicode private use area  u+e000..u+f8ff. remove any such characters first  since they shouldn't legitimately be in the input (they only have application-specific meaning within some application)  then use them as placeholders when replacing.     "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 4:58:41 PM",
        "commentid": "a_36560",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " use the     method from  apache commons stringutils :       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 4:45:09 PM",
        "commentid": "a_36561",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " you can try something like this  using     and    :          once upon a time  there was a bar and a foo.   "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 8, 2014 9:11:03 AM",
        "commentid": "a_36562",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " this is not an easy problem. and the more search-replacement parameters you have  the trickier it gets. you have several options  scattered on the palette of ugly-elegant  efficient-wasteful:       use   from apache commons as  @alanhay  recommended. this is a good option if you're free to add new dependencies in your project. you might get lucky: the dependency might be included already in your project     use a temporary placeholder as  @jeroen  suggested  and perform the replacement in 2 steps:      replace all search patterns with a unique tag that doesn't exist in the original text   replace the placeholders with the real target replacement      this is not a great approach  for several reasons: it needs to ensure that the tags used in the first step are really unique; it performs more string replacement operations than really necessary     build a regex from all the patterns and use the method with    and    as suggested by  @arshajii . this is not terrible  but not that great either  as building the regex is kind of hackish  and it involves   which went out of fashion a while ago in favor of  .     use a recursive solution proposed by  @mjolka   by splitting the string at the matched patterns  and recursing on the remaining segments. this is a fine solution  compact and quite elegant. its weakness is the potentially many substring and concatenation operations  and the stack size limits that apply to all recursive solutions     split the text to words and use java 8 streams to perform the replacements elegantly as  @msandiford  suggested  but of course that only works if you are ok with splitting at word boundaries  which makes it not suitable as a general solution       here's my version  based on ideas borrowed from  apache's implementation . it's neither simple nor elegant  but it works  and should be relatively efficient  without unnecessary steps. in a nutshell  it works like this: repeatedly find the next matching search pattern in the text  and use a   to accumulate the unmatched segments and the replacements.         unit tests:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 5:09:02 PM",
        "commentid": "a_36563",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " search for the first word to be replaced. if it's in the string  recurse on the the part of the string before the occurrence  and on the part of the string after the occurrence.    otherwise  continue with the next word to be replaced.    a naive implementation might look like this         sample usage:         output:            a less-naive version:         unfortunately  java's   has no   method. i've omitted the implementation of   here as i'm not certain it's correct  but it can be found on  ideone   along with some rough timings of various solutions posted here.  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 8, 2014 1:32:06 PM",
        "commentid": "a_36564",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " one-liner in java 8:           lookaround regular expressions (    ):  http://www.regular-expressions.info/lookaround.html     if the words can contain special regex characters  use  pattern.quote  to escape them.   i use guava immutablemap for conciseness  but obviously any other map will do the job as well.    "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 4:53:25 PM",
        "commentid": "a_36565",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " here is a java 8 streams possibility that might be interesting for some:            here is an approximation of the same algorithm in java 7:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 8, 2014 10:50:16 PM",
        "commentid": "a_36566",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " ?if you want to replace words in a sentence which are separated by white space as shown in your example you can use this simple algorithm.      split story on white space   replace each elements  if foo replace it to bar and vice varsa   join the array back into one string      ?if splitting on space is not acceptable one can follow this alternate algorithm. ?you need to use the longer string first. if the stringes are foo and fool  you need to use fool first and then foo.      split on the word foo   replace bar with foo each element of the array   join that array back adding bar after each element except the last    "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 9, 2014 7:45:15 PM",
        "commentid": "a_36567",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " here's a less complicated answer using map.         and method is called         output is: awesome is raffy  raffy raffy is awesome awesome  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 5:39:23 PM",
        "commentid": "a_36568",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " if you want to be able to handle multiple occurrences of the search strings to be replaced  you can do that easily by splitting the string on each search term  then replacing it. here is an example:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 7, 2014 1:04:19 AM",
        "commentid": "a_36569",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " swapping only one occurrence    if there is only one occurrence of each of the swappable strings in the input  you can do the following:    before proceeding to any replace  get the indeces of the occurrences of the words. after that we only replace the word found at these indexes  and not all occurrences. this solution uses   and does not produces internediate  s like  .    one thing to note: if the swappable words have different lengths  after the first replace the second index might change (if the 1st word occurs before the 2nd) exactly with the difference of the 2 lengths. so aligning the second index will ensure this works even if we're swapping words with different lengths.         swapping arbitrary number of occurrences    analogous to the previous case we will first collect the indexes (occurrences) of the words  but in this case it will a list of integers for each word  not just one  . for this we will use the following utility method:         and using this we will replace the words with the other one by decreasing index (which might require to alternate between the 2 swappable words) so that we won't even have to corrigate the indices after a replace:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 11, 2014 10:04:22 PM",
        "commentid": "a_36570",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " you can accomplish your goal with the following code block:         it replaces the words regardless of the order. you can extend this principle into an utility method  like:         which would be consumed as:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 9, 2014 1:05:48 AM",
        "commentid": "a_36571",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " it's easy to write a method to do this using    :         testing:         output:        there are three dogs and two budgies.      it is not immediately obvious  but a function like this can still be dependent on the order in which the replacements are specified. consider:         output:        java is to javascript as ham is to hamster      but reverse the replacements:         output:        java is to javascript as ham is to hamscript      oops! :)    therefore it is sometimes useful to make sure to look for the  longest  match (as php's     function does  for example). this version of the method will do that:         note that the above methods are case-sensitive. if you need a case-insensitive version it is easy to modify the above because   can take an   parameter.  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 10, 2014 3:29:30 AM",
        "commentid": "a_36572",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " using the answer found  here  you can find all occurrences of the strings you wish to replace with.    so for example you run the code in the above so answer. create two tables of indexes (let's say bar and foo do not appear only once in your string) and you can work with those tables on replacing them in your string.    now for replacing on specific index locations you can use:         whereas   is the index where your strings start (from the index tables i quoted above). so let's say you created two tables of indexes for each one. let's call them   and  .    now in replacing them you could simply run two loops  one for each replacements you wish to make.         similarly another loop for  .     this may not be as efficient as other answers here but it's simpler to understand than maps or other stuff.    this would always give you the result you wish and for multiple possible occurrences of each string. as long as you store the index of each occurrence.  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 10, 2014 11:12:19 AM",
        "commentid": "a_36573",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " if you don't want any dependencies  you could simply use an array which allows a one-time change only. this is not the most efficient solution  but it should work.         then  it whould work.       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 12, 2014 4:45:40 AM",
        "commentid": "a_36574",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " you are performing multiple search-replace operations on the input. this will produce undesired results when the replacement strings contain search strings. consider the foo->bar  bar-foo example  here are the results for each iteration:      once upon a time  there was a foo and a bar. (input)   once upon a time  there was a bar and a bar. (foo->bar)   once upon a time  there was a foo and a foo. (bar->foo  output)      you need to perform the replacement in one iteration without going back. a brute-force solution is as follows:      search the input from current position to end for multiple search strings until a match is found   replace the matched search string with corresponding replace string   set current position to the next character after the replaced string   repeat      a function such as   would be useful. here is an example (not the most efficient one):         some tests:           demo on ideone      demo on ideone  alternate code    "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 13, 2014 7:00:35 PM",
        "commentid": "a_36575",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " this works and is simple:         you use it like this:         note: this counts on strings not containing character    which is a character  permanently  reserved for internal use by unicode (see  http://www.unicode.org/faq/private_use.html ):    i don't think it's necessary  but if you want to be absolutely safe you can use:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 4:38:34 PM",
        "commentid": "a_36576",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " you can always replace it with a word you are sure will appear nowhere else in the string  and then do the second replace later:          note that this will not work right if   does occur.  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 11, 2014 4:06:58 PM",
        "commentid": "a_36577",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " consider using  stringbuilder     then store the index where each string should start. if you use a place holder character at each position  then remove it  and insert the users string. you can then map the end position by adding the string length to the start position.        "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 11, 2014 6:51:04 PM",
        "commentid": "a_36578",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " what i can only share is my own method.    you can use a temporary   or      this is my example code created in console application via  c#   -\\\"idea only  not exact answer\\\" .         or you can also use the            output:     "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 12, 2014 7:04:49 AM",
        "commentid": "a_36579",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " here's my version  which is word-based:       "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 13, 2014 5:48:48 AM",
        "commentid": "a_36580",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": "      little tricky way but you need to do some more checks.    1.convert string to character array         2.loop on temp and replace   with   and   with   as there are no chances of getting replaceable string again.  "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 20, 2014 9:05:30 AM",
        "commentid": "a_36581",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " well  the shorter answer is...         "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 6, 2014 5:02:14 PM",
        "commentid": "a_36582",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": " i developed this code will solve problem:         in the main use    "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      },
      {
        "date": "Nov 12, 2014 1:47:15 AM",
        "commentid": "a_36583",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.22399999999999998,
            "sent": "    "
          }
        ],
        "parent": "q_30381",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -0.22399999999999998,
        "sent": " let's say that i have the following code:         after this code runs  the value of   will be      a similar issue occurs if i replaced them in the opposite order:         the value of   will be      my goal is to turn   into   how could i accomplish that?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does int i = 1024 * 1024 * 1024 * 1024 compile without error?\"",
    "commentid": "q_96439",
    "date": "Jul 10, 2014 5:17:41 AM",
    "children": [
      {
        "date": "Jul 10, 2014 5:25:18 AM",
        "commentid": "a_118325",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8559999999999999,
            "sent": " there's nothing wrong with that statement; you're just multiplying 4 numbers and assigning it to an int  there just happens to be an overflow. this is different than assigning a single  literal   which would be bounds-checked at compile-time.    it is the out-of-bounds  literal  that causes the error  not the  assignment :         by contrast a   literal would compile fine:         note that  in fact  the result  is  still computed at compile-time because   is a   constant expression  :         becomes:         notice that the result ( ) is simply loaded and stored  and no multiplication takes place.       from  jls ?3.10.1  (thanks to @chrisk for bringing it up in the comments):         it is a compile-time error if a decimal literal of type   is larger than   (2 31 )  or if the decimal literal   appears anywhere other than as the operand of the unary minus operator ( ?15.15.4 ).     "
          }
        ],
        "parent": "q_96439",
        "author": "blank"
      },
      {
        "date": "Jul 11, 2014 6:43:13 AM",
        "commentid": "a_118326",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8559999999999999,
            "sent": "   and   do not have the same value in java.     actually     isn't even a value (although   is) in java. the compiler literally does not know what it is  or how to use it. so it whines.      is a valid int in java  and a valid   multiplied by another valid    is always a valid  . even if it's not the same value that you would intuitively expect because the calculation will overflow.    example    consider the following code sample:         would you expect this to generate a compile error? it becomes a little more slippery now.  what if we put a loop with 3 iterations and multiplied in the loop?     the compiler is allowed to optimize  but it can't change the behaviour of the program while it's doing so.         some info on how this case is actually handled:     in java and many other languages  integers will consist of a fixed number of bits.   calculations that don't fit in the given number of bits will  overflow ; the calculation is basically performed  modulus  2^32 in java  after which the value is converted back into a  signed  integer.     other languages or api's use a dynamic number of bits (  in java)  raise an exception or set the value to a magic value such as not-a-number.  "
          }
        ],
        "parent": "q_96439",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 9:24:15 AM",
        "commentid": "a_118327",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8559999999999999,
            "sent": "     i have no idea why the second variant produces no error.      the behaviour that you suggest -- that is   the production of diagnostic message when a computation produces a value that is larger than the largest value that can be stored in an integer  -- is a  feature . for you to use any feature  the feature must be thought of  considered to be a good idea  designed  specified  implemented  tested  documented and shipped to users.    for java  one or more of the things on that list did not happen  and therefore you don't have the feature. i don't know which one; you'd have to ask a java designer.    for c#  all of those things did happen -- about fourteen years ago now -- and so the corresponding program in c# has produced an error since c# 1.0.  "
          }
        ],
        "parent": "q_96439",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 11:35:26 PM",
        "commentid": "a_118328",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8559999999999999,
            "sent": " in addition to arshajii's answer i want to show one more thing:    it is not the  assignment  that causes the error but simply the use of the  literal . when you try         you'll notice it also causes a compile-error since the right hand side still is an  -literal and out of range.    so operations with  -values (and that's including assignments) may overflow without a compile-error (and without a runtime-error as well)  but the compiler just can't handle those too-large literals.  "
          }
        ],
        "parent": "q_96439",
        "author": "blank"
      },
      {
        "date": "Jul 11, 2014 9:34:17 AM",
        "commentid": "a_118329",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8559999999999999,
            "sent": "  a:  because it is not an error.      background:  the multiplication   will lead to an overflow. an overflow is very often a bug. different programming languages produce different behavior when overflows happen. for example  c and c++ call it \\\"undefined behavior\\\" for signed integers  and the behavior is defined unsigned integers (take the mathematical result  add   as long as the result is negative  subtract   as long as the result is greater than  ).     in the case of java  if the result of an operation with   values is not in the allowed range  conceptually java adds or subtracts 2^32 until the result is in the allowed range. so the statement is completely legal and not in error. it just doesn't produce the result that you may have hoped for.    you can surely argue whether this behavior is helpful  and whether the compiler should give you a warning. i'd say personally that a warning would be very useful  but an error would be incorrect since it is legal java.  "
          }
        ],
        "parent": "q_96439",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.8559999999999999,
        "sent": " the limit of   is from -2147483648 to 2147483647.    if i input          then eclipse will prompt a red underline under \\\"2147483648\\\".    but if i do this:         it will compile fine.         maybe it's a basic question in java  but i have no idea why the second variant produces no error.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does adding 0.1 multiple times remain lossless?\"",
    "commentid": "q_52177",
    "date": "Sep 30, 2014 4:59:48 AM",
    "children": [
      {
        "date": "Sep 30, 2014 5:06:37 AM",
        "commentid": "a_63361",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 1.0,
            "sent": " the rounding error is not random and the way it is implemented it attempts to minimise the error.  this means that sometimes the error is not visible  or there is not error.     for example   is not exactly   i.e.   but   is exactly      this program shows you the true values involved.         prints         note: that   is slightly off  but when you get to   the bits have to shift down one to fit into the 53-bit limit and the error is discarded. again  an error creeps back in for   and   but for   to   the error is discarded.        adding it 5 times should cumulate the error  not cancel it.      the reason there is an error is due to limited precision. i.e 53-bits.  this means that as the number uses more bits as it get larger  bits have to be dropped off the end. this causes rounding which in this case is in your favour.  you can get the opposite effect when getting a smaller number e.g.   =>    and you see more error than before.    an example of this is why in java 6  why does math.round(0.49999999999999994) return 1  in this case the loss of a bit in calculation results in a big difference to the answer.  "
          }
        ],
        "parent": "q_52177",
        "author": "blank"
      },
      {
        "date": "Sep 30, 2014 5:07:00 AM",
        "commentid": "a_63362",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 1.0,
            "sent": " barring overflow  in floating-point    is exactly the correctly rounded (i.e. nearest) floating-point number to the real 3*     is exactly 4*   and   is again the correctly rounded floating-point approximation for 5* .    the first result  for    derives from the fact that   is exact.   is thus the result of only one rounding.    the second result is more difficult  one demonstration of it is discussed  here  (and stephen canon alludes to another proof by case analysis on the last 3 digits of  ). to summarize  either 3*  is in the same  binade  as 2*  or it is in the same binade as 4*   and in each case it is possible to deduce that the error on the third addition cancels the error on the second addition (the first addition being exact  as we already said).    the third result  ?  is correctly rounded?  derives from the second in the same way that the first derives from the exactness of  .       the second result explains why   is exactly the floating-point number  : the rational numbers 1/10 and 4/10 get approximated the same way  with the same relative error  when converted to floating-point. these floating-point numbers have a ratio of exactly 4 between them. the first and third result show that   and   can be expected to have less error than might be inferred by naive error analysis  but  in themselves  they only relate the results to respectively   and    which can be expected to be close but not necessarily identical to   and  .    if you keep adding   after the fourth addition  you will finally observe rounding errors that make ?  added to itself n times? diverge from    and diverge even more from n/10. if you were to plot the values of ?0.1 added to itself n times? as a function of n  you would observe lines of constant slope by binades (as soon as the result of the nth addition is destined to fall into a particular binade  the properties of the addition can be expected to be similar to previous additions that produced a result in the same binade). within a same binade  the error will either grow or shrink. if you were to look at the sequence of the slopes from binade to binade  you would recognize the repeating digits of   in binary for a while. after that  absorption would start to take place and the curve would go flat.  "
          }
        ],
        "parent": "q_52177",
        "author": "blank"
      },
      {
        "date": "Oct 1, 2014 1:06:29 PM",
        "commentid": "a_63363",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 1.0,
            "sent": " floating point systems do various magic including having a few extra bits of precision for rounding.  thus the very small error due to the inexact representation of 0.1 ends up getting rounded off to 0.5.    think of floating point as being a great but inexact way to represent numbers.  not all possible numbers are easily represented in a computer.  irrational numbers like pi.  or like sqrt(2).  (symbolic math systems can represent them  but i did say \\\"easily\\\".)    the floating point value may be extremely close  but not exact.  it may be so close that you could navigate to pluto and be off by millimeters.  but still not exact in a mathematical sense.    don't use floating point when you need to be exact rather than approximate.  for example  accounting applications want to keep exact track of a certain number of pennies in an account.  integers are good for that because they are exact.  the primary issue you need to watch for with integers is overflow.    using bigdecimal for currency works well because the underlying representation is an integer  albeit a big one.    recognizing that floating point numbers are inexact  they still have a great many uses.  coordinate systems for navigation or coordinates in graphics systems.  astronomical values.  scientific values.  (you probably cannot know the exact mass of a baseball to within a mass of an electron anyway  so inexactness doesn't really matter.)    for counting applications (including accounting) use integer.  for counting the number of people that pass through a gate  use int or long.  "
          }
        ],
        "parent": "q_52177",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": 1.0,
        "sent": " i know the   decimal number cannot be represented exactly with a finite binary number ( explanation )  so   will lose some precision and will not be exactly  . on the other hand   can be represented exactly because it is  .    having said that it is understandable that adding    three times  will not give exactly   so the following code prints  :         but then how is it that adding    five times  will give exactly  ? the following code prints  :         if   cannot be represented exactly  how is it that adding it 5 times gives exactly   which can be represented precisely?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does this random value have a 25/75 distribution instead of 50/50?\"",
    "commentid": "q_2695",
    "date": "Dec 23, 2014 10:57:41 AM",
    "children": [
      {
        "date": "Dec 23, 2014 11:05:37 AM",
        "commentid": "a_3249",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.9079999999999999,
            "sent": " because nextdouble works like this: ( source )           makes   random bits.    now why does this matter? because about half the numbers generated by the first part (before the division) are less than    and therefore their significand doesn't entirely fill the 53 bits that it could fill  meaning the least significant bit of the significand is always zero for those.       because of the amount of attention this is receiving  here's some extra explanation of what a   in java (and many other languages) really looks like and why it mattered in this question.    basically  a   looks like this: ( source )         a very important detail not visible in this picture is that numbers are \\\"normalized\\\" 1  such that the 53 bit fraction starts with a 1 (by choosing the exponent such that it is so)  that 1 is then omitted. that is why the picture shows 52 bits for the fraction (significand) but there are effectively 53 bits in it.    the normalization means that if in the code for   the 53rd bit is set  that bit is the implicit leading 1 and it goes away  and the other 52 bits are copied literally to the significand of the resulting  . if that bit is not set however  the remaining bits must be shifted left until it becomes set.    on average  half the generated numbers fall into the case where the significand was  not  shifted left at all (and about half those have a 0 as their least significant bit)  and the other half is shifted by at least 1 (or is just completely zero) so their least significant bit is always 0.    1: not always  clearly it cannot be done for zero  which has no highest 1. these numbers are called denormal or subnormal numbers  see  wikipedia:denormal number .  "
          }
        ],
        "parent": "q_2695",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 11:10:37 AM",
        "commentid": "a_3250",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.9079999999999999,
            "sent": " from the  docs :        the method nextdouble is implemented by class random as if by:           but it also states the following (emphasis mine):        [in early versions of java  the result was incorrectly calculated as:             this might seem to be equivalent  if not better  but in fact it introduced a large nonuniformity because of the bias in the rounding of floating-point numbers:  it was three times as likely that the low-order bit of the significand would be 0 than that it would be 1 ! this nonuniformity probably doesn't matter much in practice  but we strive for perfection.]      this note has been there since java 5 at least (docs for java &lt;= 1.4 are behind a loginwall  too lazy to check). this is interesting  because the problem apparently still exists even in java 8. perhaps the \\\"fixed\\\" version was never tested?  "
          }
        ],
        "parent": "q_2695",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 11:28:25 AM",
        "commentid": "a_3251",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.9079999999999999,
            "sent": " this result doesn't surprise me given how floating-point numbers are represented.  let's suppose we had a very short floating-point type with only 4 bits of precision.  if we were to generate a random number between 0 and 1  distributed uniformly  there would be 16 possible values:         if that's how they looked in the machine  you could test the low-order bit to get a 50/50 distribution.  however  ieee floats are represented as a power of 2 times a mantissa; one field in the float is the power of 2 (plus a fixed offset).  the power of 2 is selected so that the \\\"mantissa\\\" part is always a number >= 1.0 and &lt; 2.0.  this means that  in effect  the numbers other than   would be represented like this:         (the   before the binary point is an implied value; for 32- and 64-bit floats  no bit is actually allocated to hold this  .)    but looking at the above should demonstrate why  if you convert the representation to bits and look at the low bit  you will get zero 75% of the time.  this is due to all values less than 0.5 (binary  )  which is half the possible values  having their mantissas shifted over  causing 0 to appear in the low bit.  the situation is essentially the same when the mantissa has 52 bits (not including the implied 1) as a   does.     (actually  as @sneftel suggested in a comment  we  could  include more than 16 possible values in the distribution  by generating:         but i'm not sure it's the kind of distribution most programmers would expect  so it probably isn't worthwhile.  plus it doesn't gain you much when the values are used to generate integers  as random floating-point values often are.)  "
          }
        ],
        "parent": "q_2695",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -0.9079999999999999,
        "sent": "  edit:  so basically what i'm trying to write is a 1 bit hash for  .    i want to map a   to   or   with a 50/50 chance. for that i wrote code that picks some random numbers  (just as an example  i want to use this on data with regularities and still get a 50/50 result)   checks their last bit and increments   if it is 1  or   if it is 0.     however  this code constantly results in 25%   and 75%  . why is it not 50/50? and why such a weird  but straight-forward (1/3) distribution?         example output:       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does Java think that the product of all numbers from 10 to 99 is 0?\"",
    "commentid": "q_44097",
    "date": "Oct 14, 2014 11:34:01 PM",
    "children": [
      {
        "date": "Oct 15, 2014 2:10:03 AM",
        "commentid": "a_53342",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " here is what the program does at each step:         note that numbers change their sign in an unexpected manner indicating that there is an integer overflow. also note that java does not clamp the result of an overflow to some min/max value.    keeping in mind that   data type  is a 32-bit signed    two's complement  integer  here is an explanation of each operation:           is the actual decimal result   is the internal representation of the decimal result had we used a bigger integer;   will store the lower 32 bits   is the result represented by the two's complement representation      if you are wondering where the 0 comes from  look closely at the binary representation of numbers above. you will notice that:      multiplying any number by an even number results in an even number   multiplying an even number by an even number shifts the bits towards left and adds zero bits towards right   multiplying an even number by an odd number does not change the number of rightmost zero bits      repeat the multiplication enough times and the number will zero out starting from the right.  "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 15, 2014 2:32:02 PM",
        "commentid": "a_53343",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " computer multiplication is really happening modulo 2^32. once you have accumulated enough powers of two in the multiplicand  then all values will be 0.    here we have all the even numbers in the series  along with the maximum power of two that divides the number  and the cumulative power of two         the product up to 42 is equal to x * 2^32 = 0 (mod 2^32).  the sequence of the powers of two is related to gray codes (among other things)  and appears as  https://oeis.org/a001511 .    edit: to see why other responses to this question are incomplete  consider the fact that the same program  restricted to odd integers only  would  not  converge to 0  despite all the overflowing.  "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 14, 2014 11:36:11 PM",
        "commentid": "a_53344",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " it looks like an  integer overflow .    take a look at this         output:         output no longer be a   value. then you will get wrong value because of the overflow.         if it overflows  it goes back to the minimum value and continues from   there. if it underflows  it goes back to the maximum value and   continues from there.      more  info      edit .     let's change your code as follows         out put:       "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 15, 2014 12:49:34 PM",
        "commentid": "a_53345",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " it's because of integer overflow. when you multiply many even numbers together  the binary number gets a lot of trailing zeroes. when you have over 32 trailing zeroes for an    it rolls over to  .    to help you visualize this  here are the multiplications in hex calculated on a number type that won't overflow. see how the trailing zeroes slowly grow  and note that an   is made up of the last 8 hex-digits. after multiplying by 42 (0x2a)  all 32 bits of an   are zeroes!       "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 14, 2014 11:38:31 PM",
        "commentid": "a_53346",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " somewhere in the middle you get   as the product. so  your entire product will be 0.    in your case :         every time you multiply the current value of   with the number you get   as output.  "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 15, 2014 5:13:18 AM",
        "commentid": "a_53347",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " since many of the existing answer point to implementation details of java and debug output  lets have a look at the math behind binary multiplication to really answer the why.    the comment of @kasperd goes in the right direction. suppose you do not multiply directly with the number but with the prime factors of that number instead. than a lot of numbers will have 2 as a prime factor. in binary this is equal to a left shift. by commutativity we can multiply with prime factors of 2 first. that means we just do a left shift.    when having a look at binary multiplication rules  the only case where a 1 will result in a specific digit position is when both operand values are one.    so the effect of a left shift is that the lowest bit position of a 1 when further multiplying the result is increased.    since integer contains only the lowest order bits  they all will be set to 0 when the prime factor 2 is cotnained often enough in the result.    note that two's complement representation is not of interest for this analysis  since the sign of the multiplication result can be computed independently from the resulting number. that means if the value overflows and becomes negative  the lowest order bits are represented as 1  but during multiplication they are treated again as being 0.  "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 14, 2014 11:38:41 PM",
        "commentid": "a_53348",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " if i run this code what i get all -            integer overflow cause -         produce 0 cause -       "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 15, 2014 9:44:26 AM",
        "commentid": "a_53349",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " eventually  the calculation overflows  and eventually that overflow leads to a product of zero; that happens when   and  .  try this code out to verify it for yourself (or run the code  here ):         once it's zero  it of course stays zero.  here's some code that will produce a more accurate result (you can run the code  here ):       "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      },
      {
        "date": "Oct 16, 2014 8:01:06 AM",
        "commentid": "a_53350",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.6680000000000001,
            "sent": " it is an integer overflow.    the int data type is 4 bytes  or 32 bits.  therefore  numbers larger than 2^(32 - 1) - 1 (2 147 483 647) cannot be stored in this data type.  your numerical values will be incorrect.    for very large numbers  you will want to import and use the class           note: for numerical values that are still too large for the int data type  but small enough to fit within 8 bytes (absolute value less than or equal to 2^(64 - 1) - 1)  you should probably use the   primitive.      hackerrank's practice problems (www.hackerrank.com)  such as the algorithms practice section  ( https://www.hackerrank.com/domains/algorithms/warmup ) include some very good large-number questions that give good practice about how to think about the appropriate data type to use.  "
          }
        ],
        "parent": "q_44097",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -0.6680000000000001,
        "sent": " the following block of codes gives the output as 0.         please can somebody explain why this happens?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why is Cloneable not deprecated?\"",
    "commentid": "q_43390",
    "date": "Oct 16, 2014 12:48:42 AM",
    "children": [
      {
        "date": "Oct 16, 2014 4:31:07 AM",
        "commentid": "a_52450",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.5880000000000001,
            "sent": " there is a  bug  submitted in 1997 to  java bug database  about adding   method to    so it would no longer be useless. it was closed with resolution \\\"won't fix\\\" and justification was as follows:        sun's technical review committee (trc) considered this issue at length   and recommended against taking  any action other than improving the   documentation of the current cloneable interface .  here is the full   text of the recommendation:        the existing java object cloning apis are problematic.  there is a   protected \\\"clone\\\" method on java.lang.object and there is an interface   java.lang.cloneable.  the intention is that if a class wants to allow   other people to clone it  then it should support the cloneable   interface and override the default protected clone method with a   public clone method.  unfortunately  for reasons conveniently lost in   the mists of time  the cloneable interface does not define a clone   method.        this combination results in a fair amount of confusion.  some classes   claim to support cloneable  but accidentally forget to support the   clone method.  developers are confused about how cloneable is supposed   to work and what clone is supposed to do.        unfortunately  adding a \\\"clone\\\" method to cloneable would be an   incompatible change.  it won't break binary compatibility  but it will   break source compatibility.  anecdotal evidence suggests that in   practice there are a number of cases where classes support the   cloneable interface but fail to provide a public clone method.  after   discussion  trc unanimously recommended that we should not modify the   existing cloneable interface  because of the compatibility impact.        an alternative proposal was to add a new interface   java.lang.publiclycloneable to reflect the original intended purpose   of cloneable.  by a 5 to 2 majority  trc recommended against this.    the main concern was that this would add yet more confusion (including   spelling confusion!) to an already confused picture.         trc unanimously recommended that we should add additional   documentation to the existing cloneable interface  to better describe   how it is intended to be used and to describe \\\"best practices\\\" for   implementors.      so  although this is not directly about  deprecated   the reason for not making cloneable \\\"deprecated\\\" is that technical review comitee decided that  modifying existing documentation will be sufficient enough  to make this interface useful. and so they did. until java 1.4    was documented as follows:        a class implements the cloneable interface to indicate to the   object.clone() method that it is legal for that method to make a   field-for-field copy of instances of that class.         attempts to clone instances that do not implement the cloneable   interface result in the exception clonenotsupportedexception being   thrown.         the interface cloneable declares no methods.      since java 1.4 (which was released in february 2002) up to current edition (java 8) it looks like this:        a class implements the cloneable interface to indicate to the   object.clone() method that it is legal for that method to make a   field-for-field copy of instances of that class.  invoking object's   clone method on an instance that does not implement the cloneable   interface results in the exception clonenotsupportedexception being   thrown.         by convention  classes that implement this interface should override   object.clone (which is protected) with a public method. see   object.clone() for details on overriding this method.         note that this interface does not contain the clone method. therefore    it is not possible to clone an object merely by virtue of the fact   that it implements this interface. even if the clone method is invoked   reflectively  there is no guarantee that it will succeed.    "
          }
        ],
        "parent": "q_43390",
        "author": "blank"
      },
      {
        "date": "Oct 16, 2014 4:30:52 PM",
        "commentid": "a_52451",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.5880000000000001,
            "sent": " the short answer to \\\"why isn't   deprecated?\\\" (or indeed  why isn't   deprecated  for any  ) is that there hasn't been much attention paid to deprecating them.    most things that have been deprecated recently were deprecated because there is a specific plan to remove them. for example  the   and   methods of  logmanager  were  deprecated in java se 8  with the intention of removing them in java se 9. (the reason is that they unnecessarily complicated module interdependencies.) indeed  these apis have already been  removed from early jdk 9  development builds. (note that similar property change listener calls were also removed from  ; see  jdk-8029806 .)    no such similar plan exists to for   and  .    a longer answer would involve discussing further questions  such as what one might expect to happen to these apis  what costs or benefits would accrue the platform if they were deprecated  and what is being communicated to developers when an api is deprecated. i explored this topic in my recent javaone talk   debt and deprecation . (slides available at that link; video forthcoming.) it turns out that the jdk itself hasn't been very consistent in its usage of deprecation. it's been used to mean several different things  including for example        this is dangerous and you should be aware of the risks of using it (example:      and  ).     this is going to be removed in a future release    this is obsolete and it's a good idea for you to use something different (example: many of the methods in  )      all of these are distinct meanings  and different subsets of them apply to different things that are deprecated. and some subset of them apply to things that aren't deprecated (but that maybe should be deprecated).      and   are \\\"broken\\\" in the sense that they have design flaws and are difficult to use correctly. however    is still the best way to copy arrays  and cloning has some limited usefulness to make copies of instances of classes that are carefully implemented. removing cloning would be an incompatible change that would break a lot of things. a cloning operation could be reimplemented a different way  but it would probably be slower than  .    however  for most things a copy constructor is preferable to cloning. so perhaps marking   as \\\"obsolete\\\" or \\\"superseded\\\" or something similar would be appropriate. this would tell developers that they probably want to look elsewhere  but it would not signal that the cloning mechanism might be removed in a future release. unfortunately  no such marker exists.    as things stand  \\\"deprecation\\\" seems to imply eventual removal -- despite the fact that a vanishingly small number of deprecated features have ever been removed -- and so deprecation doesn't seem warranted for the cloning mechanism. perhaps in the future an alternative marking can be applied that directs developers to use alternative mechanisms instead.     update     i've added some additional history to the  bug report . frank yellin  an early jvm implementor and co-author of the jvm specification  made some comments in response to the \\\"lost in the mists of time\\\" comment in the trc recommendation quoted in the  other answer . i've quoted the relevant portions here; the full message is in the bug report.        cloneable has no methods for the same reason that serializable doesn't. cloneable indicates a property of the class  rather than specifically saying anything about the methods that the class supported.        prior to reflection  we needed a native method to make a shallow copy of an object.  hence object.clone() was born.  it was also clear that many classes would want to override this method  and that not every class would want to be cloned.  hence cloneable was born to indicate the programmer's intention.        so  in short.  the purpose of cloneable was not to indicate that you had a public clone() method.  it was to indicate that you were willing to be cloned using object.clone()  and it was up to the implementation to decide whether or not to make clone() public.    "
          }
        ],
        "parent": "q_43390",
        "author": "blank"
      },
      {
        "date": "Oct 16, 2014 1:49:53 AM",
        "commentid": "a_52452",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.5880000000000001,
            "sent": "     why it is not deprecated yet?      because the jcp hasn't seen fit to do so  and may never do so. ask them. you're asking in the wrong place.        what are the reasons behind keeping this thing in java api      no-one will ever remove anything from the java api  because of the backwards compatibility requirement. the last time that happened was the change in the awt event model between 1.0 and 1.1 in 1996/7.  "
          }
        ],
        "parent": "q_43390",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.5880000000000001,
        "sent": " it is commonly understood that   interface in java is broken. there are many reasons for this  which i will not mention;  others  already did it. it is also the position of  java architects  themselves.    my question is therefore: why has is not been deprecated yet? if the core java team have decided that it is broken  then they must also have considered deprecation. what are their reasons against doing so (in java 8 it is  still not deprecated )?   "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does the Java API use int instead of short or byte?\"",
    "commentid": "q_19173",
    "date": "Nov 25, 2014 2:11:41 AM",
    "children": [
      {
        "date": "Nov 25, 2014 2:44:29 AM",
        "commentid": "a_23269",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " some of the reasons have already been pointed out. for example  the fact that   \\\"...(almost) all operations on byte  short will promote these primitives to int\\\"  . however  the obvious next question would be:  why  are these types promoted to  ?    so to go one level deeper: the answer may simply be related to the java virtual machine instruction set. as summarized in the  table in the java virtual machine specification    all  integral arithmetic operations  like adding  dividing and others  are only available for the type   and the type    and  not  for the smaller types.      (an aside: the smaller types (  and  ) are basically only intended for  arrays . an  array  like   will take 1000 bytes  and an array like   will take 4000 bytes)      now  of course  one could say that  \\\"...the obvious next question would be:  why  are these instructions only offered for   (and  )?\\\" .     one reason is mentioned in the jvm spec mentioned above:        if each typed instruction supported all of the java virtual machine's run-time data types  there would be more instructions than could be represented in a byte      additionally  the java virtual machine can be considered as an abstraction of a real processor. and introducing dedicated  arithmetic logic unit  for smaller types would not be worth the effort: it would need additional transistors  but it still could only execute one addition in one clock cycle. the dominant architecture when the jvm was designed was 32bits  just right for a 32bit  . (the operations that involve a 64bit   value are implemented as a special case).       (note: the last paragraph is a bit oversimplified  considering possible vectorization etc.  but should give the basic idea without diving too deep into processor design topics)        edit: a short addendum  focussing on the example from the question  but in an more general sense: one could also ask whether it would not be beneficial to store  fields  using the smaller types. for example  one might think that memory could be saved by storing   as a  . but here  the java class file format comes into play: all the  fields in a class file  occupy at least one \\\"slot\\\"  which has the size of one   (32 bits). (the \\\"wide\\\" fields    and    occupy two slots). so explicitly declaring a field as   or   would not save any memory either.   "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      },
      {
        "date": "Nov 25, 2014 2:23:16 AM",
        "commentid": "a_23270",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " (almost) all operations on      will promote these primitives to    for example  you cannot write:         arithmetics are easier and straightforward when using    no need to cast.     in terms of space  it makes a  very  little difference.   and   would complicate things  i don't think this micro optimization worth it since we are talking about a fixed amount of variables.    i think that   is relevant and useful when you program for embedded devices or dealing with files/networks. also these primitives are limited  what if the calculations might exceed their limits in the future? try to think about an extension for   class that might evolve bigger numbers.     also note that in a 64-bit processors  locals will be saved in registers and won't use any resources  so using      and other primitives won't make any difference at all. moreover  many java implementations align variables *  (and objects).         *    and   occupy the same space as   if they are  local  variables   class  variables or even  instance  variables. why? because in (most) computer systems  variables  addresses are  aligned   so for example if you use a single byte  you'll actually end up with two bytes - one for the variable itself and another for the padding.    on the other hand  in arrays    take 1 byte    take 2 bytes and   take four bytes  because in arrays only the start and maybe the end of it has to be aligned. this will make a difference in case you want to use  for example     then you'll really note a performance difference.  "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      },
      {
        "date": "Nov 25, 2014 2:25:29 AM",
        "commentid": "a_23271",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " because arithmetic operations are easier when using integers compared to shorts. assume that the constants were indeed modeled by   values. then you would have to use the api in this manner:         notice the explicit casting. short values are implicitly promoted to   values when they are used in arithmetic operations. (on the operand stack  shorts are even expressed as ints.) this would be quite cumbersome to use which is why   values are often preferred for constants.    compared to that  the gain in storage efficiency is minimal because there only exists a fixed number of such constants. we are talking about 40 constants. changing their storage from   to   would safe you  . see  this answer  for further reference.  "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      },
      {
        "date": "Nov 25, 2014 9:27:58 AM",
        "commentid": "a_23272",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " if you used the philosophy where integral constants are stored in the smallest type that they fit in  then java would have a serious problem: whenever programmers write code using integral constants  they have to pay careful attention to their code to check if the type of the constants matter  and if so look up the type in the documentation and/or do whatever type conversions are needed.    so now that we've outlined a serious problem  what benefits could you hope to achieve with that philosophy? i would be unsurprised if the  only  runtime-observable effect of that change would be what type you get when you look the constant up via reflection. (and  of course  whatever errors are introduced by lazy/unwitting programmers not correctly accounting for the types of the constants)    weighing the pros and the cons is very easy: it's a bad philosophy.  "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      },
      {
        "date": "Nov 25, 2014 12:25:03 PM",
        "commentid": "a_23273",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " the design complexity of a virtual machine is a function of how many kinds of operations it can perform.  it's easier to having four implementations of an instruction like \\\"multiply\\\"--one each for 32-bit integer  64-bit integer  32-bit floating-point  and 64-bit floating-point--than to have  in addition to the above  versions for the smaller numerical types as well.  a more interesting design question is why there should be four types  rather than fewer (performing all integer computations with 64-bit integers and/or doing all floating-point computations with 64-bit floating-point values).  the reason for using 32-bit integers is that java was expected to run on many platforms where 32-bit types could be acted upon just as quickly as 16-bit or 8-bit types  but operations on 64-bit types would be noticeably slower.  even on platforms where 16-bit types would be faster to work with  the extra cost of working with 32-bit quantities would be offset by the simplicity afforded by  only  having 32-bit types.    as for performing floating-point computations on 32-bit values  the advantages are a bit less clear.  there are some platforms where a computation like   could be performed most quickly by converting all operands to a higher-precision type  adding them  and then converting the result back to a 32-bit floating-point number for storage.  there are other platforms where it would be more efficient to perform all computations using 32-bit floating-point values.  the creators of java decided that all platforms should be required to do things the same way  and that they should favor the hardware platforms for which 32-bit floating-point computations are faster than longer ones  even though this severely degraded pc both the speed and precision of floating-point math on a typical pc  as well as on many machines without floating-point units.  note  btw  that depending upon the values of b  c  and d  using higher-precision intermediate computations when computing expressions like the aforementioned   will sometimes yield results which are significantly more accurate than would be achieved of all intermediate operands were computed at   precision  but will sometimes yield a value which is a tiny bit less accurate.  in any case  sun decided everything should be done the same way  and they opted for using minimal-precision   values.    note that the primary advantages of smaller data types become apparent when large numbers of them are stored together in an array; even if there were no advantage to having individual variables of types smaller than 64-bits  it's worthwhile to have arrays which can store smaller values more compactly; having a local variable be a   rather than an   saves seven bytes; having an array of 1 000 000 numbers hold each number as a   rather than a   waves 7 000 000 bytes.  since each array type only needs to support a few operations (most notably read one item  store one item  copy a range of items within an array  or copy a range of items from one array to another)  the added complexity of having more array types is not as severe as the complexity of having more types of directly-usable discrete numerical values.  "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      },
      {
        "date": "Nov 28, 2014 4:48:16 AM",
        "commentid": "a_23274",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.28400000000000025,
            "sent": " actually  there'd be a small advantage. if you have a         then on a typical jvm it needs as much space as a class containing a single  . the memory consumption gets rounded to a next multiple of 8 or 16 bytes (iirc  that's configurable)  so the cases when there are real saving are rather rare.    this class would be slightly easier to use if the corresponding   methods returned a  . but there are no such   methods  only   which must returns an   because of other fields. each operation on smaller types promotes to    so you need a lot of casting.    most probably  you'll either give up and switch to an   or write setters like         then the type of   doesn't matter  anyway.  "
          }
        ],
        "parent": "q_19173",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": 0.28400000000000025,
        "sent": " why does the  java api  use   if   or even   would be sufficient?    example: the     field in calendar uses  .     edit:     aspects of interest:      storage   calculations      if the difference is too minimal  then why do these datatypes (short  int) exist at all? legacy?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Android app in Eclipse: Edit text not showing on Graphical layout\"",
    "commentid": "q_101792",
    "date": "Jun 30, 2014 5:56:22 PM",
    "children": [
      {
        "date": "Jun 30, 2014 9:17:13 PM",
        "commentid": "a_125005",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " check the \\\"android version to use when rendering layouts\\\" and make sure you're not using a version that ends in \\\"w\\\" for android wear ( e.g.  api 20: android 4.4w). i don't believe wear supports  .    in both android studio and eclipse  it's the dropdown with the green android in the layout preview's toolbar. you may want to set it explicitly and not allow the ide to choose the android version automatically.  "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      },
      {
        "date": "Jul 7, 2014 1:51:55 AM",
        "commentid": "a_125006",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " from the eclipse ide  just change the api version to use for previewing  as shown in below screenshot. instead of \\\"automatically pick best\\\"  manually select the one which works for you (api 17 worked for me).       "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      },
      {
        "date": "Jul 2, 2014 7:57:54 PM",
        "commentid": "a_125007",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " i changed my android version for android 4.2  but it still not work for me. i tried different solutions found that it only work by deleting android 4.4w package.    window > android sdk manager > check android 4.4w(api 20) if it was installed > delete package  "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      },
      {
        "date": "Sep 24, 2014 2:20:14 PM",
        "commentid": "a_125008",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " if you are facing this on android studio  follow along    1) uninstall android 4.4w(api 20) from the sdk manager    2) make sure you have android sdk build tools 19.1 installed from the sdk manager.    3) edit build.gradle within your app folder. set the following two values as below         4) the ide will prompt you to sync the gradle file with your project  click yes.    5) open your activity file and then change the 'android version to use when rendering layouts in ide' to 'api 19'. this is the green colored android bot towards the right on the preview window  "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      },
      {
        "date": "Sep 22, 2014 8:13:40 AM",
        "commentid": "a_125009",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " i deleted 4.4w from my sdk install pile  which must have slipped past me last time i installed an sdk. once i removed it it was no longer and option  and eclipse picked an sdk i did have that wasn't w and it worked.  "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      },
      {
        "date": "Nov 1, 2014 11:10:42 PM",
        "commentid": "a_125010",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -1.112,
            "sent": " the w in android 4.4w suggest wearable devices. android wear is a wrist watch and you cannot type anything in it so you cannot use edittext on 4.4w. change the api to 19 or less or change it to 4.4l    check it out @  https://developer.android.com/design/wear/index.html     you can change your previewing api version as jim suggested if u don't want to develop apps for wearable devices.   "
          }
        ],
        "parent": "q_101792",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -1.112,
        "sent": " i am trying to add a text field onto my android app in eclipse  but then i drag the   option on to the graphical layout  a message at the bottom comes up. it reads   even when i go to   there is no error log option. the whole designer is useless now  because i can not use it anymore until i delete the   directly from the xml. what is causing this error  and how do i fix it? i am running the latest version (as of today  6-30-14)  and windows 8 pro x64.    here is my full layout code:       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Java Name Hiding: The Hard Way\"",
    "commentid": "q_99651",
    "date": "Jul 4, 2014 3:25:10 AM",
    "children": [
      {
        "date": "Jul 4, 2014 6:14:24 AM",
        "commentid": "a_122352",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " you can cast a   to the type and then invoke the method on that (which will work  since the target object isn't involved in invocation of static methods).         this has the benefits of      being side-effect free (a problem with instantiating  )    not requiring renaming of anything (so you can give the method in   the name you want it to have; that's why a   won't work in your exact case)    not requiring the introduction of delegate class (though that might be a good idea?)  and   not requiring the overhead or complexity of working with the reflection api.      the downside is that this code is really horrible! for me  it generates a warning  and that's a good thing in general. but since it's working around a problem that is otherwise thoroughly impractical  adding a          at an appropriate (minimal!) enclosing point will shut the compiler up.  "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 4, 2014 4:09:33 AM",
        "commentid": "a_122353",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " probably the simplest (not necessarily the easiest) way to manage this would be with a delegate class:         and then ...         this is somewhat verbose  but very flexible - you can get it to behave any way you want; plus it works in much the same way both with   methods and instantiated objects    more about delegate objects here:  http://en.wikipedia.org/wiki/delegation_pattern   "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 4, 2014 3:43:07 AM",
        "commentid": "a_122354",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " you can use a static import:         watch out that   and   do not contain methods named    "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 4, 2014 3:58:26 AM",
        "commentid": "a_122355",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " the proper way of doing things would be the static import  but in the absolute worst case scenario  you could construct an instance of the class using reflection if you know its fully qualified name.     java: newinstance of class that has no default constructor     and then invoke the method on the instance.    or  just invoke the method itself with reflection:  invoking a static method using reflection          of course  these are obviously last resorts.  "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 4, 2014 3:43:01 AM",
        "commentid": "a_122356",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " not really the answer but you could create an instance of x and call the static method on it. that would be a way (dirty i admit) to call your method.       "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 5, 2014 10:24:45 AM",
        "commentid": "a_122357",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " there's no need to do any cast or suppress any strange warnings or create any redundant instance. just a trick using the fact that you can call parent class static methods via the sub-class. (similar to my hackish solution  here .)    just create a class like this         (the private constructor in this final class makes sure no one can accidentally create an instance of this class.)    then you're free to call   via it:       "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 8, 2014 1:30:44 AM",
        "commentid": "a_122358",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " what if you try getting the gobalnamespace given all the files are in the same folder. ( http://www.beanshell.org/javadoc/bsh/class-use/namespace.html )       "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 4, 2014 9:36:34 AM",
        "commentid": "a_122359",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " this is one of the reasons that composition is preferable to inheritance.       "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      },
      {
        "date": "Jul 15, 2014 4:02:58 AM",
        "commentid": "a_122360",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.8400000000000001,
            "sent": " i would use the strategy pattern.         now you have also decoupled your dependency  so your unit tests will be easier to write.  "
          }
        ],
        "parent": "q_99651",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.8400000000000001,
        "sent": " i have a problem with name hiding that is extremely hard to solve. here is a simplified version that explains the problem:    there is a class:           then there is a class           and now  here is the problematic class which inherits from   and wants to call           as you see  this is not possible. i cannot use the simple name   because it is hidden by an inherited type. i cannot use the fully qualified name    because   is hidden by an inherited field.    only the class   is in my code base; the classes   and   are library classes  so i cannot alter them!    my only solution looks like this: i could call another class that in turn calls  ; but this class would only exist because of the name clash  which seems very messy! is there no solution in which i can directly call   from  ?    in a language that allows specifying the global namespace  e.g.    in c# or   in c++  i could simply prefix   with this global prefix  but java does not allow that.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Android Studio was unable to find a valid Jvm (Related to MAC OS)\"",
    "commentid": "q_10802",
    "date": "Dec 8, 2014 5:03:39 PM",
    "children": [
      {
        "date": "Dec 8, 2014 5:38:05 PM",
        "commentid": "a_13088",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " open the application package for  android studio  in finder  and edit the  info.plist  file. change the key jvmversion. put 1.6+ instead of 1.6*. that worked for me!.    cheers!    edited:    while this was necessary in older versions of android studio  this is no longer recommended. see the official statement      \\\"please note: do not edit info.plist to pick a different version. that will break not only the application signature  but also future patch updates to your installation.\\\"      antonio jose's  answer  is the correct one.    thanks aried3r!  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 8, 2014 5:26:36 PM",
        "commentid": "a_13089",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " just install this guy here     http://support.apple.com/kb/dl1572?viewlocale=en_us&amp;locale=en_us     and you should be good.   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 8, 2014 7:27:23 PM",
        "commentid": "a_13090",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " [update]  this is fixed in android studio 1.1  https://code.google.com/p/android/issues/detail?id=82378         in the next version of android studio  if no java 6 is found but 7 (or greater) is found then it will use that instead. we still recommend running studio with java 6 due to improved font rendering  but there is no work around needed if  for example  only java 8 is found.        [end update]    from  android studio 1.0 rc3 notes         as of rc 3  we have a better mechanism for customizing properties for the launchers on all three platforms. you should not edit any files in the ide installation directory. instead  you can customize the attributes by creating your own .properties or .vmoptions files in the following directories. (this has been possible on some platforms before  but it required you to copy and change the entire contents of the files. with the latest changes these properties are now additive instead such that you can set just the attributes you care about  and the rest will use the defaults from the ide installation).      however there is no explanation about what options are.    after searching a little i found this   adjusting vm options for android studio on mac    intellij idea 14.0.0 web help/file idea.properties     however no luck with that.    fortunately i was able to resolve it on yosemite using environment variables as said in the 1.0 rc3 release notes.        you can also place use environment variables to point to specific override files elsewhere:    studio_vm_options  which vmoptions file to use    studio_properties  which property file to use    studio_jdk  which jdk to run studio with      this was a little tricky because android studio is not a command line application so i had to use a applescript command to set the environment variable when login. more info  here     this is my launchctl command for the command line.           and this my applescript (remember to save it as an application)           about launchctl  see  here   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 8, 2014 7:12:32 PM",
        "commentid": "a_13091",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": "   change this key in the       i changed from         to         and it worked fine now..    edited:  per the official statement as mentioned above by hasternet and aried3r  the solution by antonio jose is correct.    thanks!  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 15, 2014 3:03:03 AM",
        "commentid": "a_13092",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " note that this last variable allows you to for example run android studio with java 7 on osx (which normally picks java 6 from the version specified in info.plist):    $ export studio_jdk=/library/java/javavirtualmachines/jdk1.7.0_67.jdk    $ open /applications/android\\\\ studio.app    worked for me  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 9, 2014 4:16:05 PM",
        "commentid": "a_13093",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i am using mac os x 10.10 also. and to fix this problem.      open android studio application package content (by right click on android studio icon in application folder)   open file infor.plist    search and replace:            replaced by:         that's it!  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 6, 2015 12:55:45 AM",
        "commentid": "a_13094",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " as a novice user it took me a while to understand how to fix this in a correct way. after searching and understating many answers on so i came out with the following steps that you need to follow to fix the issue.     please note:     although the simplest solution is to update the  info.plist  of android studio . but it is not recommended and not the correct way to fix it .     official statement- \\\"please note: do not edit info.plist to pick a different version. that will break not only the application signature  but also future patch updates to your installation.\\\"      first solution :  if you run your android studio from command line  you can add these two lines into your  .bash_profile           from next time whenever you open your terminal your studio will start automatically.     second solution:  if you want to run android studio from ui(by click on icon) follow below steps:      open  script editor  on mac(one can find it in  spotlight )    copy past the below line    do shell script \\\"launchctl setenv studio_jdk /library/java/javavirtualmachines/jdk1.8.0_25.jdk\\\"        note :-  change the jdk version according to your version. to check which version you are using open terminal and run the following command          3.now save (?+s) as file format:  application . finally open  system settings ? users &amp; groups ? login items  and add your new application that you have just created.      log-off and login again or you can run that application manually as well..      woolaaaa?its done.    references :     antonio jose's answer      ruario's answer   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 24, 2014 4:53:18 PM",
        "commentid": "a_13095",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " on mac os x yosemite just install:    java se development kit 8    and     java version 8 update 25    it's all  work for me!  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 13, 2014 5:54:19 PM",
        "commentid": "a_13096",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " on android tools project site  there is a great explanation  mac osx jdk selection . it fixed my problem. in summary:        android studio requires two different jdks:            the version of java that the ide itself runs with.      the version of the jdk that it uses to get the java compiler from            these two can be (and usually are) the same  but you can configure   them individually. and on osx in particular  they will often be   different.      and for yosemite (mac osx 10.10) issues:        first  please make sure that you have the latest version of java 6   installed; in some cases that has fixed the problems:    http://support.apple.com/kb/dl1572         if not  try running a recent version of java 7 or java 8 instead by   setting studio_jdk as described above. that is reported to have fixed   the other problems (though you will get the font rendering shown for   java 8 above.)    "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 8, 2014 5:58:12 PM",
        "commentid": "a_13097",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " edit the android studio's info.plist file in the package so that it uses 1.7 or whatever jvmversion you have installed. changing the jvmversion to 1.6+ instead of 1.6* as hasternet answered above should work too.    the above works but is not recommended see  rc3 release notes          as of rc 3  we have a better mechanism for customizing properties for   the launchers on all three platforms.   you should not edit any files in   the ide installation directory  . instead  you can customize the   attributes by creating your own .properties or .vmoptions files in the   following directories. (this has been possible on some platforms   before  but it required you to copy and change the entire contents of   the files. with the latest changes these properties are now additive   instead such that you can set just the attributes you care about  and   the rest will use the defaults from the ide installation).      see  android studio failed to load jvm on mac osx (mavericks)   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 13, 2014 10:49:20 AM",
        "commentid": "a_13098",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i have same problem and fixed with this way:    you should install java from official apple page.     http://support.apple.com/kb/dl1572   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 4:24:07 PM",
        "commentid": "a_13099",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " this one work for me  very simple  just export the environmentable var. but make sure u have the valid jvm first though.     https://code.google.com/p/android/issues/detail?id=82378   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 21, 2014 10:15:20 PM",
        "commentid": "a_13100",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " \\\"on mac os  run android studio with java runtime environment (jre) 6 for optimized font rendering. you can then configure your project to use java development kit (jdk) 6 or jdk 7.\\\"    this was listed in  http://developer.android.com/sdk/index.html  under the system requirements for mac os x.    once you install java 6 (not the jdk) from apple as per alonso c. licks  you should be able to open android studio and reconfigure as you wish without having to mess around in the terminal  info.plist file  or other libraries.  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Dec 31, 2014 12:13:39 PM",
        "commentid": "a_13101",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " on mac os x yosemite just install:    java se development kit 8    and    java version 8 update 25    it's all  work for me too! like gehev said   so simple !  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 3, 2015 5:16:55 PM",
        "commentid": "a_13102",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i have downloaded intellij idea. when i try to install intellij  a pop-up appeared that my mac is missing with java re  do you want to download it? after i downloaded missing package using intellij  i could open android studio.   "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 4, 2015 12:03:45 PM",
        "commentid": "a_13103",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i resolved this issue by changing the jvm version in the info.plist file to 1.7*  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 9, 2015 8:38:48 PM",
        "commentid": "a_13104",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i ran this bad boy:       "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 14, 2015 12:09:38 AM",
        "commentid": "a_13105",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i'm dealing with the same problem and i get it worked.    it is probably that your jdk version is not right.    now i installed jdk1.8 and it is ok now.  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 15, 2015 2:06:24 PM",
        "commentid": "a_13106",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " you can implement the   solution using your user's launch agents. this involves creating one plist file in your launchagents directory  located at       create a new file     where unique_key is just an identifier. i use com. username .androidstudio.    copy the following text into your new plist file and modify it according the instructions below.         you will need to make two modifications:      change unique_key to match your filename (without the .plist extension).   verify your jdk path is correct and change if necessary. i'm using 7u71 in this example.      this is the same underlying solution as  antonio jose's answer . it sets the studio_jdk environment variable based on the android studio version  1.0 rc3 release notes . this solution uses the launchagents directory rather than applescript to set the environment variable. as such it is mostly a difference in how your order and organize your system and environment variables.  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 15, 2015 2:23:07 PM",
        "commentid": "a_13107",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " this worked for me:        "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 17, 2015 1:26:27 AM",
        "commentid": "a_13108",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " for those who were having trouble creating a script that launched on startup  as an alternative you can add this .plist to your launchagents folder. this may be a more appropriate way of adding environment variables to the system since yosemite decided to do away with launchd.conf. this should also work across user accounts due to the nature of the launchagents folder  but i haven't tested that.    to do this  create a .plist file with the following name and path:         and the contents:         then change file properties by running the following commands in terminal:         notes:    1) you may need to change 'jdk1.8.0_25.jdk' to match the version that you have on your computer.    2) i tried to use \\\"jdk1.8.*.jdk\\\" to try and account for varying java * versions  but when i opened android studio i got the no jvm error even though if you run \\\"echo $studio_jdk\\\" it returns the correct path. perhaps someone has some insight as to how to fix that issue.  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      },
      {
        "date": "Jan 12, 2015 11:40:25 AM",
        "commentid": "a_13109",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.6680000000000001,
            "sent": " i was able to get it to work by editing the info.plist changing 16* to 16+. tried using the recommended method but that failed.  "
          }
        ],
        "parent": "q_10802",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": 0.6680000000000001,
        "sent": " i am unable to start my android studio for android development on mac os (10.10.1 - yosemite)  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"What makes Java easier to parse than C?\"",
    "commentid": "q_45564",
    "date": "Oct 12, 2014 2:58:53 PM",
    "children": [
      {
        "date": "Oct 12, 2014 3:41:07 PM",
        "commentid": "a_55147",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.031999999999999806,
            "sent": "  parsing c++ is getting hard.  parsing java is getting to be just as hard.     see this  so answer discussing why c (and c++) is \\\"hard\\\" to parse .  the short summary is that c and c++  grammars  are inherently ambiguous; they will give you multiple parses and you  must  use context to resolve the ambiguities. people then make the mistake of assuming you have to resolve ambiguities as you  parse; not so  see below.  if you insist on resolving ambiguities as you parse  your parser gets more complicated and that much harder to build; but that complexity is a self-inflicted wound.    iirc   java 1.4's \\\"obvious\\\" lalr(1) grammar was not ambiguous  so it was \\\"easy\\\" to parse.  i'm not so sure that modern java hasn't got at least long distance local ambiguities; there's always the problem of deciding whether \\\"...>>\\\" closes off two templates or is a \\\"right shift operator\\\".  i suspect  modern java does not parse with lalr(1) anymore .     but one can get past the parsing problem by using strong parsers (or weak parsers and context collection hacks as c and c++ front ends mostly do now)  for both languages. c and c++ have the additional complication of having a preprocessor; these are more complicated in practice than they look.  one claim is that the c and c++ parsers are so hard they have to be be written by hand.    it isn't true; you can build java and c++ parsers just fine with glr parser generators.      but parsing isn't really where the problem is.      once you parse  you will want to do something with the ast/parse tree.  in practice  you need to know  for every identifier  what its definition is and where it is used  (\\\"name and type resolution\\\"  sloppily  building symbol tables).   this turns out to be a lot more work than getting the parser right  compounded  by inheritance  interfaces  overloading and templates  and the confounded by the fact that the semantics for all this is written in informal natural language spread across tens to hundreds of pages of the language standard.  c++ is really bad here.  java 7 and 8 are getting to be pretty awful from this point of view. (and symbol tables aren't all you need; see my bio for a longer essay on \\\"life after parsing\\\").    most folks struggle with the pure parsing part (often never finishing; check so itself for the many  many questions about to how to build working parsers for real langauges)  so they don't ever see life after parsing.  and then we get folk theorems about what is hard to parse and no signal about what happens after that stage.     fixing c++ syntax won't get you anywhere.     regarding changing the c++ syntax: you'll find you need to patch a lot of places to take care of the variety of local and real ambiguities in any c++ grammar.  if you insist  the  following list might be a good starting place .   i contend there is no point in doing this if you are not the c++ standards committee; if you did so  and built a compiler using that  nobody sane would use it.   there's too much invested in existing c++ applications to switch for convenience of the guys building parsers; besides  their pain is over and existing parsers work fine.    you may want to write your own parser.  ok  that's fine; just don't expect the rest of the community to let you change the language they must use to make it easier for you.  they all want it easier for them  and that's to use the language as documented and implemented.  "
          }
        ],
        "parent": "q_45564",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.031999999999999806,
        "sent": " i'm acquainted with the fact that  c and c++ are context-sensitive   and in particular you need a \\\"lexer hack\\\" in c. on the other hand  i'm under the impression that you can parse java with only 2 tokens of look-ahead  despite considerable similarity between the two languages.     what would you have to change about c to make it more tractable to parse?     i ask because all of the examples i've seen of c's context-sensitivity are technically allowable but awfully weird. for example          could be calling the void function   with argument  . or  it could be declaring   to be an object of type    but you could just as easily get rid of the parantheses. in part  this weirdness occurs because the \\\"direct declarator\\\" production rule for the  c grammar  fulfills the dual purpose of declaring both functions and variables.    on the other hand  the  java grammar  has separate production rules for variable declaration and function declaration. if you write         then you know it's a variable declaration and   can unambiguously be parsed as a typename. this might not be valid code if the class   hasn't been defined somewhere in the current scope  but that's a job for semantic analysis that can be performed in a later compiler pass.    i've seen it said that c is hard to parse because of typedef  but you can declare your own types in java too. which c grammar rules  besides    are at fault?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why doesn&#39;t RecyclerView have onItemClickListener()? and How RecyclerView is different from Listview?\"",
    "commentid": "q_89996",
    "date": "Jul 22, 2014 3:43:39 AM",
    "children": [
      {
        "date": "Jul 24, 2014 5:00:40 AM",
        "commentid": "a_110350",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 1.04,
            "sent": " since the introduction of listview  onitemclicklistener has been problematic. the moment you have a click listener for any of the internal elements the callback would not be triggered but it wasn't notified or well documented (if at all) so there was a lot of confusion and so questions about it.    given that recyclerview takes it a step further and doesn't have a concept of a row/column  but rather an arbitrarily laid out amount of children  they have delegated the onclick to each one of them  or to programmer implementation.    think of recyclerview not as a listview 1:1 replacement but rather as a more flexible component for complex use cases. and as you say  your solution is what google expected of you. now you have an adapter who can delegate onclick to an interface passed on the constructor  which is the correct pattern for both listview and recyclerview.         and then on your adapter         now look into that last piece of code:   the signature already suggest different view types. for each one of them you'll require a different viewholder too  and subsequently each one of them can have a different set of clicks. or you can just create a generic viewholder that takes any view and one onclicklistener and applies accordingly. or delegate up one level to the orchestrator so several fragments/activities have the same list with different click behaviour. again  all flexibility is on your side.    it is a really needed component and fairly close to what our internal implementations and improvements to listview were until now. it's good that google finally acknowledges it.  "
          }
        ],
        "parent": "q_89996",
        "author": "blank"
      },
      {
        "date": "Dec 25, 2014 11:27:47 PM",
        "commentid": "a_110351",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 1.04,
            "sent": "    how recyclerview is different from listview?      one difference is that there is   class with recyclerview by which you can manage your  like-          horizontal   or vertical scrolling by          gridlayout by            staggered gridlayout by         like for horizontal scrolling for recyclerview-       "
          }
        ],
        "parent": "q_89996",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": 1.04,
        "sent": " i don't know whether i am asking the right question. i was exploring recyclerview and i was surprised to see that recyclerview does not have onitemclicklistener(). because recyclerview extends  android.view.viewgroup . and listview extends  android.widget.abslistview .  however i solved my problem by writing onclick in my recyclerview.adapter:         but still i want to know why google removed onitemclicklistener()? is there a performance issue or something else?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Populating a Boolean Array in Java\"",
    "commentid": "q_97218",
    "date": "Jul 9, 2014 3:36:00 AM",
    "children": [
      {
        "date": "Jul 9, 2014 3:52:34 AM",
        "commentid": "a_119338",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " the most efficient  and  expressive way is the following:    use  s as exits and use an   to store them.   is an efficient   implementation that uses a bit field to represent the enum constants.    here is how you can do it:         enum set will store all exits in a single   internally  so your code is expressive  fast  and saves a lot of memory.  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:40:20 AM",
        "commentid": "a_119339",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " is there any reason why you are doing this with  s and aren't passing in    i.e.         or having  setters ?         secondly  why are you storing the exits as an array of booleans  it's a small finite set  why not just          as then you don't need to keep track of which number in the array each direction is.     also     this is a correct answer (if not completely optimal like that of @gexicide) but i fully encourage anyone to look at the other answers here for an interesting look at how things can be done in java in different ways.       for future reference     code which works belongs on  code review   not stack overflow.  although as @kajacx pointed out  this code shouldn't -in fact- work.  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:58:55 AM",
        "commentid": "a_119340",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " ok  first of all  your   method will not work as intended  chained if-elseif will maximally execute 1 branch of code  for example:         even if   contains both   and    only   will be set. also this method will only add exits (for example calling   will not delete any existing exits.    i would change that method to:         also  i definetly wouldn't remember that north is on index 0  west in on 1  ... so a common practice is to name your indexes using final static constants:         then you can write in your   method:         (much more readible)    finally  if you want your code even more well-arranged  you can make a   class representing avaliable exits  and backed by boolean array. then on place where you create your string  you could create this class instead and save yourself work with generating and then parsing a string.    edit:    as @gexicide answers  there is a really handy class   which would be probably better for representing the exits than bollean array.  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 3:17:10 AM",
        "commentid": "a_119341",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " the   in the other answer is the best way to do this  i just wanted to add one more thing though for the future when you start looking not just at whether you can move but where you are moving to.    as well as   you also have  .    if you define a room class/interface then inside the room class you can have          you can now add your links into the map as follows:         then your code to move between rooms can be very general purpose:       "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:42:54 AM",
        "commentid": "a_119342",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " i would create an exit enum and on the location class just set a list of exit objects.    so it would be something like:       "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:47:37 AM",
        "commentid": "a_119343",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " given what your code looks like  this is the most readable implementation i could come up with:         that being said  there's a number of cleaner solutions possible. personally i would go with enums and an  .    by the way  your original code is incorrect  as it will set as most one value in the array to true.  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 5:20:19 AM",
        "commentid": "a_119344",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " all the approaches listed in the answeres are good. but i think the approach you need to take depends on the way you are going to use the exit field. for example if you are going to handle exit as strings then ross drews approach would require a lot of if-else conditions and variables.         also if you have an exit and you want to check whether a location has that particular exit then again you will have to do the same         so if you are going to manipulate it as a string  in my opinion the best approach would be to go for list and enum. by this way you could do methods like hasexit  hasanyexit  hasallexits  hasnorthexit  hassouthexit  getavailableexits etc etc.. very easily. and considering the number of exits (6) using a list (or set) wont be an overhead. for example    enum         location.java       "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:47:24 AM",
        "commentid": "a_119345",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " if you're defining exits as a string  you should use it. i would do it like:         using array of booleans might cause a lot of problems if you forget what exactly means bexits[0]. os it for north or south? etc.    or you can just use enums and list of exits available . then in methid test if list contain a certain enum value  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:50:47 AM",
        "commentid": "a_119346",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " personally  i think you can hack it around a bit using an enum and turn the following:         into         and then do:         although after having written it down  i can't really tell you if it's that much better. it's easier to add new directions  that's for sure.  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 3:41:31 AM",
        "commentid": "a_119347",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " if you want a generic solution you can use a  map   which maps from a key (in your case w  s  e.. ) to a corresponding value (in your case a boolean).     when you do a    you update the value the key is associated with. when you do a    you can take an argument key and simply retrieve the value of the key. this functionality does already exist in map  called  put  and  get .  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 11, 2014 3:04:12 AM",
        "commentid": "a_119348",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " why not this if you want a shorter code:       "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 6:53:18 AM",
        "commentid": "a_119349",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": " i really like the idea of assigning the exits from a string  because it makes for brief and readable code. once that's done  i don't see why you would want to create a boolean array. if you have a string  just use it  although you might want to add some validation to prevent accidental assignment of strings containing unwanted characters:         the only other thing i would add is a method   that you can call with a direction parameter; e.g.   :         i like enums  but using them here seems like over-engineering to me  which will rapidly become annoying.       **edit**: actually  don't do this. it answers the wrong question  and it does something which doesn't need to be done. i just noticed  @timb's answer  of using a map (an enummap) to associate directions with rooms. it makes sense.    i still feel that if you only need to track exit  existence   a string is simple and effective  and anything else is over-complicating it. however  only knowing which exits are available isn't useful. you will want to go through those exits  and unless your game has a very plain layout it won't be doable for the code to infer the correct room for each direction  so you'll need to explicitly associate each direction with another room. so there seems to be no actual use for  any  method \\\"setexits\\\" which accepts a list of directions (regardless of how it's implemented internally).  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 11:27:02 AM",
        "commentid": "a_119350",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.8559999999999999,
            "sent": "      the iterative way of doing the same thing..  "
          }
        ],
        "parent": "q_97218",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.8559999999999999,
        "sent": " as a fairly green java coder i've set myself the hefty challenge of trying to write a simple text adventure. unsurprisingly  i've encountered difficulties already!     i'm trying to give my location class a property to store which exits it contains. i've used a boolean array for this  to essentially hold true/false values representing each exit. i'm not entirely convinced that      a)  this is the most efficient way to do this and      b)  that i'm using the right code to populate the array.    i would appreciate any and all feedback  even if it is for a complete code over-haul!    at present  when instantiating a location i generate a string which i send through to the setexits method:         in the location class  setexits looks like this:         i'll be honest  i think this looks particularly clunky  but i couldn't think of another way to do it. i'm also not entirely sure now how to write the getexits method...    any help would be welcome!  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Android Studio needs JDK 7 for Android-L mac\"",
    "commentid": "q_102729",
    "date": "Jun 28, 2014 5:02:25 PM",
    "children": [
      {
        "date": "Jun 29, 2014 5:03:30 AM",
        "commentid": "a_126189",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3999999999999999,
            "sent": " setting the directory to:   in jdk settings solved my issue. i had the same problem getting started up. hope this helps!  "
          }
        ],
        "parent": "q_102729",
        "author": "blank"
      },
      {
        "date": "Jul 10, 2014 8:20:43 AM",
        "commentid": "a_126190",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3999999999999999,
            "sent": " @megapoff answer is correct . but i face little difficulty to fix it . so here is the detail solution step-by-step      for mac        download the dmg file of jdk-7   from here    click on dmg and follow the instructions . it will install and configure jdk-7 on mac .   now in your android studio go to file->project structure -> sdk location .     in  jdk location  click on browse and go to      note :- its not   it's       click apply and ok .... bingo ..... build the project again .....     "
          }
        ],
        "parent": "q_102729",
        "author": "blank"
      },
      {
        "date": "Jun 28, 2014 5:24:47 PM",
        "commentid": "a_126191",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3999999999999999,
            "sent": " i haven't moved over to android studio  yet. i've used it for a few tests and really like it. just haven't been able to switch over yet. i've had this sort of issue in eclipse and that's obviously a different solution  but looking through one of my test projects  this appears to be how you go about it:    open your project and go to file->settings.    under the project settings  expand compiler and go to the java compiler option. you want to use javac and set the project bytecode version to 1.7.    hopefully that'll do it.  "
          }
        ],
        "parent": "q_102729",
        "author": "blank"
      },
      {
        "date": "Dec 16, 2014 2:07:18 PM",
        "commentid": "a_126192",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3999999999999999,
            "sent": " the other answers are very correct but i want to be more concise and clear. to prevent others from visiting this page multiple times unnecessarily.    important* old path is /system/library/java... and new path is /library/java... (not under the system directory)    replace old path: /system/library/java/javavirtualmachines/jdk1.6.0_0.jdk/contents/home    set your new path: /library/java/javavirtualmachines/jdk1.7.0_60.jdk/contents/home  "
          }
        ],
        "parent": "q_102729",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.3999999999999999,
        "sent": " i was trying to look how my app looks in material design and i would like to use the new cards lib. my problem is  that it's giving me this error within my gradle file and i need to fix that.         i downloaded  and installed it.  in terminal is showing me that 1.7 is installed:         well         is giving me:           doesn't have a  . i found the   here:         and set the path to the \\\"sdk location\\\" preferences in android studio under \\\"jdk location\\\". but it's not working -- it seems that it still can't find jdk 7.    i'm using mac osx 10.9.3 and android studio (beta) 0.8.1.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"What is a possible use case of BigInteger&#39;s .isProbablePrime()?\"",
    "commentid": "q_8732",
    "date": "Dec 11, 2014 11:39:57 AM",
    "children": [
      {
        "date": "Dec 11, 2014 11:46:44 AM",
        "commentid": "a_10721",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": " yes  this method can be used in cryptography.   rsa encryption  involves the finding of huge prime numbers  sometimes on the order of 1024 bits (about 300 digits).  the security of rsa depends on the fact that factoring a number that consists of 2 of these prime numbers multiplied together is extremely difficult and time consuming.  but for it to work  they must be prime.    it turns out that proving these numbers prime is difficult too.  but the  miller-rabin primality test   one of the primality tests uses by    either detects that a number is composite or gives no conclusion.  running this test   times allows you to conclude that there is a 1 in 2 n  odds that this number is really composite.  running it   times yields the acceptable risk of 1 in 2 100  that this number is composite.  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      },
      {
        "date": "Dec 11, 2014 2:40:01 PM",
        "commentid": "a_10722",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": " if the test tells you an integer is  not prime   you can certainly believe that 100%.    it is only the other side of the question  if the test tells you an integer is \\\"a probable prime\\\"  that you may entertain doubt.  repeating the test with varying \\\"bases\\\" allows the probability of falsely succeeding at \\\"imitating\\\" a prime (being a strong pseudo-prime with respect to multiple bases) to be made as small as desired.    the usefulness of the test lies in its speed and simplicity.  one would not necessarily be satisfied with the status of \\\"probable prime\\\" as a final answer  but one would definitely avoid wasting time on almost all composite numbers by  using this routine before bringing in the big guns of primality testing .    the comparison to the difficulty of factoring integers is something of a red herring.  it is known that the primality of an integer can be determined in polynomial time  and indeed there is a proof that an extension of miller-rabin test to sufficiently many bases is definitive (in detecting primes  as opposed to probable primes)  but this assumes the generalized riemann hypothesis  so it is not quite so certain as the (more expensive)  aks primality test .  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      },
      {
        "date": "Dec 12, 2014 10:43:13 AM",
        "commentid": "a_10723",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": " the standard use case for     is in cryptography.  specifically  certain cryptographic algorithms  such as  rsa   require randomly chosen large primes.  importantly  however  these algorithms don't really require these numbers to be  guaranteed  to be prime &mdash; they just need to be prime with a  very  high probability.    how high is very high?  well  in a crypto application  one would typically call   with an argument somewhere between 128 and 256.  thus  the probability of a non-prime number passing such a test is less than one in 2 128  or 2 256 .    let's put that in perspective: if you had 10 billion computers  each generating 10 billion probable prime numbers per second (which would mean less than one clock cycle per number on any modern cpu)  and the primality of those numbers was tested with    you would  on average  expect one non-prime number to slip in  once in every 100 billion years .    that is  that would be the case  if those 10 billion computers could somehow all run for hundreds of billions of years without experiencing  any  hardware failures.  in practice  though   it's a lot more likely for a random cosmic ray to strike your computer at just the right time and place to flip the return value  of   from false to true  without causing any other detectable effects  than it is for a non-prime number to actually pass the probabilistic primality test at that certainty level.    of course  the same risk of random cosmic rays and other hardware faults also applies to deterministic primality tests like  aks .  thus  in practice  even these tests have a (very small) baseline false positive rate due to random hardware failures (not to mention all other possible sources of errors  such as implementation bugs).    since it's easy to push the intrinsic false positive rate of the  miller&ndash;rabin primality test  used by   far below this baseline rate  simply by repeating the test sufficiently many times  and since  even repeated so many times  the miller&ndash;rabin test is still much faster in practice than the best known deterministic primality tests like aks  it remains the standard primality test for cryptographic applications.    (besides  even if you happened to accidentally select a strong pseudoprime as one of the factors of your rsa modulus  it would not generally lead to a catastrophic failure.  typically  such pseudoprimes would be products of two (or rarely more) primes of approximately half the length  which means that you'd end up with a  multi-prime rsa key .  as long as none of the factors were  too  small (and if they were  the primality test should've caught them)  the rsa algorithm will still work just fine  and the key  although somewhat weaker against certain types of attacks than normal rsa keys of the same length  should still be reasonably secure if you didn't needlessly skimp on the key length.)  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      },
      {
        "date": "Dec 11, 2014 11:45:42 AM",
        "commentid": "a_10724",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": " a possible use case is in testing primality of a given number (at test which in itself has many uses). the   algorithm will run much faster than an exact algorithm  so if the number fails    then one need not go to the expense of running the more expensive algorithm.  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      },
      {
        "date": "Dec 11, 2014 11:52:40 AM",
        "commentid": "a_10725",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": "  finding  probable primes is an important problem in cryptography. it turns out that a reasonable strategy for finding a probable k-bit prime is to repeatedly select a random k-bit number  and test it for probable primality using a method like  .    for further discussion  see  section 4.4.1 of the handbook of applied cryptography .    also see  on generation of probable primes by incremental search  by brandt and damg?rd.  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      },
      {
        "date": "Dec 12, 2014 7:21:10 AM",
        "commentid": "a_10726",
        "sent": [
          {
            "topicid": 8,
            "systemtopicid": 8,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Database",
            "linePolarity": -1.2,
            "sent": " algorithms such as rsa key generation rely on being able to determine whether a number is prime or not.    however  at the time that the   method was added to the jdk (february 1997)  there was no proven way to deterministically decide whether a number was prime in a reasonable amount of time. the best known approach at that time was the  miller-rabin algorithm  - a probabilistic algorithm that would sometimes give false positives (i.e  would report non-primes as primes)  but could be tuned to reduce the likelihood of false positives  at the expense of modest increases in runtime.    since then  algorithms have been discovered that can deterministically decide whether a number is prime reasonably quickly  such as the  aks algorithm  that was discovered in august 2002. however  it should be noted that these algorithms are still not as fast as miller-rabin.    perhaps a better question is why no   method has been added to the jdk since 2002.  "
          }
        ],
        "parent": "q_8732",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 8.0,
        "systemtopicid": 8.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Database",
        "linePolarity": -1.2,
        "sent": "  the method biginteger.isprobableprime()  is quite strange; from the documentation  this will tell whether a number is prime with a probability of    where   is the integer argument.    it has been present in the jdk for quite a long time  so it means it must have uses. my limited knowledge in computer science and algorithms (and maths) tells me that it does not really make sense to know whether a number is \\\"probably\\\" a prime but not exactly a prime.    so  what is a possible scenario where one would want to use this method? cryptography?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Is id = 1 - id atomic?\"",
    "commentid": "q_20326",
    "date": "Nov 23, 2014 5:56:11 AM",
    "children": [
      {
        "date": "Nov 23, 2014 6:01:29 AM",
        "commentid": "a_24697",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.3719999999999999,
            "sent": "     am i wrong?      nope  you're absolutely right - as is your example timeline.    in addition to it not being atomic  it's not guaranteed that the write to   will be picked up by the other thread anyway  given that there's no synchronization and the field isn't volatile.    it's somewhat disconcerting for reference material like this to be incorrect :(  "
          }
        ],
        "parent": "q_20326",
        "author": "blank"
      },
      {
        "date": "Nov 27, 2014 2:43:47 PM",
        "commentid": "a_24698",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.3719999999999999,
            "sent": " in my opinion  the answer in the practice exams is correct. in this code  you are executing two threads which have access to the same static variable id. static variables are stored on the heap in java  not on the stack. the execution order of runnables is unpredictable.    however  in order to change the value of id each thread :      makes local copy of the value stored in id's memory address to the cpu registry;   performs the operation  . strictly speaking  two operations are performed here  ;           moves the result back to memory space of   on the heap.      this means that although the id value can be changed concurrently by any of the two threads  only the initial and final values are mutable. intermediate values will not be modified by one another.    futhermore  analysis of the code can show that at any point in time  id can only be 0 or 1.     proof:        starting value id =  1; one thread will change it to 0 (   ). and the other thread will bring it back to 1.     starting value id =  0; one thread will change it to 1 (   ). and the other thread will bring it back to 0.       therefore  the value state of id is discrete either 0 or 1.     end of proof.     there can be two possibilities for this code:       possibility 1. thread one accesses the variable id first. then the value of id (  changes to 0. thereafter  only the method   will be executed  printing  . thread two  will evaluate id at that time  ; method   will then be executed printing r s. as a result    will be printed.     possibility 2. thread two accesses the variable id first. then the value of id (  changes to 0. thereafter  only the method   will be executed  printing  . thread one  will evaluate id at that time  ; method   will then be executed printing r s. as a result    will be printed.       there are no other possibilities. however  it should be noted that variants of   such as   or    etc. may be printed due to   being a static method and is therefore shared between the two threads. this leads to the simultaneous execution of this method which could result in printing the letters in a different order depending on your platform.    however in any case  never will either the method   or   be executed twice as they are  mutually exclusive . therefore   will not be an output.  "
          }
        ],
        "parent": "q_20326",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.3719999999999999,
        "sent": " from page 291 of ocp java se 6 programmer practice exams  question 25:         one of the answers is:        the output could be        i marked this answer as correct. my reasoning:      we are starting two threads.    first one enters  .   according to  jls 15.26.1   it firstly evaluates  . result is  . it is stored on the thread's stack. we are just about to save that   to static    but...   boom  scheduler chooses the second thread to run.   so  the second thread enters  . static   is still    so he executes method  .   is printed.   scheduler chooses first thread to run. it takes   from its stack and saves to static  . so  the first thread also executes   and prints  .      however  in the book it's written that this answer is incorrect:        it is incorrect because the line   swaps the value of   between   and  . there is no chance for the same method to be executed twice.      i don't agree. i think there is some chance for the scenario i presented above. such swap is not atomic. am i wrong?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why is &quot;while (i++ &lt; n) {}&quot; significantly slower than &quot;while (++i &lt; n) {}&quot;\"",
    "commentid": "q_76758",
    "date": "Aug 15, 2014 12:24:23 AM",
    "children": [
      {
        "date": "Aug 15, 2014 1:40:34 AM",
        "commentid": "a_93696",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.748,
            "sent": " as others have pointed out  the test is flawed in many ways.     you did not tell us exactly  how  you did this test. however  i tried to implement a \\\"naive\\\" test (no offense) like this:         when running this with default settings  there seems to be a small difference. but the  real  flaw of the benchmark becomes obvious when you run this with the   flag. the results in my case then are along something like         obviously  the pre-increment version has been  completely optimized away . the reason is rather simple: the result is not used. it does not matter at all whether the loop is executed or not  so the jit simply removes it.     this is confirmed by a look at the hotspot disassembly: the pre-increment version results in this code:         the post-increment version results in this code:         it's not entirely clear for me why it seemingly does  not  remove the post-increment version. (in fact  i consider asking this as a separate question). but at least  this explains why you might see differences with an \\\"order of magnitude\\\"...       edit: interestingly  when changing the upper limit of the loop from   to    then  both  versions are optimized away and require \\\"zero\\\" time. somehow this limit (which still appears as   in the assembly) prevents the optimization. presumably  this has something to do with the comparison being mapped to a (singed!)   instruction  but i can not give a profound reason beyond that. the jit works in mysterious ways...  "
          }
        ],
        "parent": "q_76758",
        "author": "blank"
      },
      {
        "date": "Aug 15, 2014 12:27:33 AM",
        "commentid": "a_93697",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.748,
            "sent": " the difference between ++i and i++ is that ++i effectively increments the variable and 'returns' that new value. i++ on the other hand effectively creates a temp variable to hold the current value in i  then increments the variable 'returning' the temp variable's value. this is where the extra overhead is coming from.         in your case it appears that the increment won't be optimized by the jvm because you are using the result in an expression. the jvm can on the other hand optimize a loop like this.         this is because the result of i++ is never used. in a loop like this you should be able to use both ++i and i++ with the same performance as if you used ++i.  "
          }
        ],
        "parent": "q_76758",
        "author": "blank"
      },
      {
        "date": "Aug 15, 2014 12:45:49 AM",
        "commentid": "a_93698",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.748,
            "sent": "  edit 2     you should really look here:      http://hg.openjdk.java.net/code-tools/jmh/file/f90aef7f1d2c/jmh-samples/src/main/java/org/openjdk/jmh/samples/jmhsample_11_loops.java      edit  the more i think about it  i realise that this test is somehow wrong  the loop will get seriously optimized by the jvm.    i think that you should just drop the   and let  .    this way you will test the performance of the     itself. the results i get in this case :          the is almost no difference     the very first question you should ask yourself is  how you test and measure this . this is micro-benchmarking and in java this is an art  and almost always a simple user (like me) will get the results wrong. you should rely on a benchmark test and very good tool for that. i used jmh to test this:         someone way more experienced in jmh might correct this results (i really hope so!  since i am not that versatile in jmh yet)  but the results show that the difference is pretty darn small:         the score field is the one you are interested in.  "
          }
        ],
        "parent": "q_76758",
        "author": "blank"
      },
      {
        "date": "Aug 18, 2014 12:47:15 AM",
        "commentid": "a_93699",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.748,
            "sent": " probably this test is not enough to take conclusions but i would say if this is the case  the jvm can optimize this expression by changing i++ to ++i since the stored value of i++ (pre value) is never used in this loop.  "
          }
        ],
        "parent": "q_76758",
        "author": "blank"
      },
      {
        "date": "Aug 15, 2014 12:35:09 AM",
        "commentid": "a_93700",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.748,
            "sent": " i suggest you should (whenever possible)  always  use   rather than   as the former will  never  be slower since  conceptually  a deep copy of   has to be taken in the latter case in order to return the previous value.    indeed many optimisers will optimise away an unnecessary deep copy but they can't easily do that if you're making use of the expression value. and you're doing just that in your case.    many folk disagree though: they see it as as a micro-optimisation.  "
          }
        ],
        "parent": "q_76758",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.748,
        "sent": " apparently on my windows 8 laptop with hotspot jdk 1.7.0_45 (with all compiler/vm options set to default)  the below loop         is at least 2 orders of magnitude faster (~10 ms vs. ~5000 ms) than:         i happened to noticed this problem while writing a loop to evaluate another irrelevant performance issue. and the difference between   and   was huge enough to significantly influence the result.    if we look at the bytecode  the loop body of the faster version is:         and for the slower version:         so for    it first increments local variable   by 1 and then push it onto the operand stack while   does those 2 steps in reverse order. but that doesn't seem to explain why the former is much faster. is there any temp copy involved in the latter case? or is it something beyond the bytecode (vm implementation  hardware  etc.) that should be responsible for the performance difference?    i've read some other discussion regarding   and   (not exhaustively though)  but didn't find any answer that is java-specific and directly related to the case where   or   is involved in a value comparison.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Is (x - x) always positive zero for doubles  or sometimes negative zero?\"",
    "commentid": "q_87987",
    "date": "Jul 25, 2014 1:06:24 AM",
    "children": [
      {
        "date": "Jul 25, 2014 1:08:31 AM",
        "commentid": "a_107854",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": 0.0,
            "sent": "   can be   or  . there are no other values it can take in ieee 754 arithmetics in round-to-nearest (and in java  the rounding mode is  always round-to-nearest ). the subtraction of two identical finite values is  defined  as producing   in this rounding mode.  mark dickinson   in comments below  cites the ieee 754 standard as saying  section 6.3:        when the sum of two operands with opposite signs (or the difference of two operands with like signs) is exactly zero  the sign of that sum (or difference) shall be +0 in all rounding-direction attributes except roundtowardnegative [...].      this  page  shows that in particular   and   are both  .    infinities and nan both produce nan when subtracted from themselves.  "
          }
        ],
        "parent": "q_87987",
        "author": "blank"
      },
      {
        "date": "Jul 25, 2014 12:09:11 PM",
        "commentid": "a_107855",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": 0.0,
            "sent": " the smt solver z3 supports ieee floating point arithmetic. let's ask z3 to find a case where  . it immediately finds   as well as  . excluding those  there is no   that satisfies that equation.         z3 implements ieee floating point arithmetic by converting all operations to boolean circuits and using the standard sat solver to find a model. barring any bugs in that translation or the sat solver the result is perfectly precise.    proof for...      ... :  http://rise4fun.com/z3/7h4    ... :  http://rise4fun.com/z3/opl4w       note the counterexample for the rounding mode  :  http://rise4fun.com/z3/t845 . for a certain   the result of   is negative zero. such a case can hardly be found by humans. yet  with an smt solver it is easy to find. we can change   to   so that z3 uses ieee equality comparison semantics instead of exact equality. after that change  there is again no counter-example because   according to ieee.    i tried making the rounding mode a variable. that would work in theory but z3 has a bug here. for now we have to manually specify a hard-coded rounding mode. if we could make it a variable we could ask z3 to prove this statement for  all  rounding modes in one query.  "
          }
        ],
        "parent": "q_87987",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": 0.0,
        "sent": " when   is a    is   guaranteed to be    or might it sometimes be   (depending on the sign of  )?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Do &quot;nothing&quot; while &quot;condition&quot;\"",
    "commentid": "q_98540",
    "date": "Jul 7, 2014 4:30:21 AM",
    "children": [
      {
        "date": "Jul 7, 2014 4:49:22 AM",
        "commentid": "a_120983",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.9079999999999999,
            "sent": " if you read the comments at top of the file  just below the class declaration  there is a section which explains the use of this construct:       "
          }
        ],
        "parent": "q_98540",
        "author": "blank"
      },
      {
        "date": "Jul 7, 2014 7:44:25 AM",
        "commentid": "a_120984",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.9079999999999999,
            "sent": "   makes extensive use of   from   and most of the occurrences of   in   can &mdash; as mentioned by other answers &mdash; be explained by this comment under the heading style notes:             the choice to use write a  -loop with an empty body as   seems however to be a mostly stylistic choice. this is perhaps clearer in    which happened to be updated in java 8.    in the java 7   you can find this:         while much of the code around it has also changed  it is clear that the replacement in java 8 is this:         the first version has the weakness that if the lone semicolon happened to be deleted it would change the meaning of the program depending on the following line.    as seen below  bytecode generated by   and   is slightly different  but not in any way that should affect anything when run.    java code:         generated code:       "
          }
        ],
        "parent": "q_98540",
        "author": "blank"
      },
      {
        "date": "Jul 8, 2014 1:19:10 AM",
        "commentid": "a_120985",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.9079999999999999,
            "sent": " leaving aside any potential performance benefits  there is a clear readability benefit.    with   the trailing semicolon is not always obvious at first glance  you may be confused into thinking that the following statement or statements are inside the loop. for example:         it would be very easy to misread the above as having the if statement inside the loop  and even if you did read it correctly it would be easy to think that it was a programming mistake and the if should be inside the loop.    with   though it is immediately at a glance clear that there is no body to the loop.  "
          }
        ],
        "parent": "q_98540",
        "author": "blank"
      },
      {
        "date": "Jul 7, 2014 4:46:01 AM",
        "commentid": "a_120986",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.9079999999999999,
            "sent": " if you will read comment above the code  it is mentioned that...    if the caller is not a    this method is behaviorally equivalent to         so it is just another form to implement above code in else part...!!    in  style notes  it is mentioned that          there are several occurrences of the unusual \\\"do {} while    (!cas...)\\\"  which is the simplest way to force an update of a    cas'ed variable.      and if you will see implementation of  managedlocker#isreleasable   it is updating the lock and returns   if blocking is unnecessary.      interpretation :      blank while loops are used to provide an interrupt until some condition reset to true/false.    here    is a blocker/interrupt until   will be   when   is  . loop will continue execution while   is not releasable ( ) and   is not blocked !! execution will be out of loop as soon as   will set to true.    note that    does not update cas variable  but it guarantee that program will wait until variable gets updated (force to wait until variable gets updated).    "
          }
        ],
        "parent": "q_98540",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.9079999999999999,
        "sent": " while browsing the code for the java 8 version of forkjoinpool(which has a few interesting changes from java 7) i ran across this construct ( here ):         i'm struggling with why you would write it like this instead of just         is it just a semantics/readability choice  since you could read the first construct as  ? or is there some additional benefit i'm missing?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "Explain the syntax of Collections.&lt;String&gt;emptyList()",
    "commentid": "q_908",
    "date": "Dec 28, 2014 10:18:20 PM",
    "children": [
      {
        "date": "Dec 28, 2014 10:53:44 PM",
        "commentid": "a_1037",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " that line creates an empty list of strings by calling a static method with a generic type parameter.    inside the   class  there is a static method   declared like:         this has a generic type parameter  . we call call this method by using:         and   is infered to be a   because of the type of  .    we can also specify the type of   by putting it in angle brackets when calling  . this may be needed if we want a more specific type than is inferred:           is not correct because that placement is only valid when creating instances of generic classes  not calling methods. when using   there are two possible type parameters  the ones before the class name are for the constructor only  and the ones after the class name are for the whole instance  so with the class:         we can call its constructor where   is   and   is   like:         or by using type inference:          see also:        generic methods     type inference     "
          }
        ],
        "parent": "q_908",
        "author": "blank"
      },
      {
        "date": "Dec 28, 2014 10:53:26 PM",
        "commentid": "a_1038",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": "\"     what is  ? why isn't it   or  ?          is a jdk class.        this class consists exclusively of static methods that operate on or   return collections. it contains polymorphic algorithms that operate on   collections  \\\"\"wrappers\\\"\"  which return a new collection backed by a   specified collection  and a few other odds and ends.      it's not generic and cannot be instantiated.        why is   placed before the method name  ?          is a generic method. here  we are explicitly specifying a type argument   .        (isn't   correct for generic?)      no  in java  generic type arguments for methods come before the method name.        what does the statement mean?      we are invoking the static   method and assigning its return value to a variable of type  .  \""
          }
        ],
        "parent": "q_908",
        "author": "blank"
      },
      {
        "date": "Dec 28, 2014 10:53:51 PM",
        "commentid": "a_1039",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": "\"  in a nutshell  this creates an empty  immutable list of strings.     let's look at the expression bit by bit.        is the name of a class. from the  javadoc :        this class consists exclusively of static methods that operate on or return collections. it contains polymorphic algorithms that operate on collections  \\\"\"wrappers\\\"\"  which return a new collection backed by a specified collection  and a few other odds and ends.          is the name of a static method defined in the   class ( javadoc ). it is a generic method  and the   in   specifies the generic type argument.    the method returns a    which in this case is  : a list of strings. more specifically  it returns an  empty    immutable  list of strings.  \""
          }
        ],
        "parent": "q_908",
        "author": "blank"
      },
      {
        "date": "Dec 28, 2014 10:53:25 PM",
        "commentid": "a_1040",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " firstly    is a helper library of static methods that operate on various types of collections. if you've done any sort of c++ programming  it's very synonymous to the   library of functions.    in this case  you're invoking the static method    which returns an empty list of a particular type. since these methods still require a type  but  ' methods can refer to many types  you have to specify the type upon invocation.    in order to call a generic  method   you must call it with the parameter list (i.e.  )  before  the method name  but  after  the dot.       "
          }
        ],
        "parent": "q_908",
        "author": "blank"
      },
      {
        "date": "Dec 28, 2014 10:50:54 PM",
        "commentid": "a_1041",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " 1.collection is an interface and collections is a static class consists exclusively of static methods that operate on or return collections. hence we cannot use   or  .    2.  before emptylist(used to get the empty list that is immutable) denotes that only string values can be added to it. like:          3.the statement means that it will create a immutable empty list of type list.    you can check out this link:  difference between java collection and collections   "
          }
        ],
        "parent": "q_908",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 10.0,
        "systemtopicid": 10.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Network",
        "linePolarity": 0.0,
        "sent": " i just studied about generic programming  the   interface  and    so i can understand the statement below.         but i don't understand the next statement which i saw while surfing the web.           what is  ? why isn't it   or  ?   why is   placed before the method name  ?      (isn't   correct for generic?)      what does the statement mean?    "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does one long string take MORE space than lots of small strings?\"",
    "commentid": "q_16763",
    "date": "Nov 28, 2014 2:54:34 PM",
    "children": [
      {
        "date": "Nov 28, 2014 4:01:53 PM",
        "commentid": "a_20291",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.28400000000000003,
            "sent": " to expand on august's answer  i figured i should explain exactly how this is compiled and what takes up space at the binary level.    to simplify  i'll use the following example with shorter strings. the important part is that there are some duplicate strings.         now there are three important things to understand when compiling this code.       constant string concatenation is done at compile time.  in fact  this is a special case of compile time simplification of constant expressions. you can find the exact rules for what is considered a constant expression in the java language specification.    array brace initializers are syntactic sugar . the code is equivalent to creating an array and assigning the elements one by one. (note that this is specific to java bytecode. dalvik (i.e. android) does have special shorthand instructions for array initialization)    inline initializers are syntactic sugar . the code is equivalent to manually initializing the fields in the static initializer method.       edit : one minor detail is that in the special case of static final fields initialized to a constant expression inline  the field is initialized using the constantvalue attribute instead of in the static initializer and all uses are inlined. so in the case of    #3 will actually result in different bytecode  but since the constant pool entries for the string are the same  the filesize taken up by the strings won't change.    put them together  and the above code is equivalent to the following.         now this desugared code still shows the duplicate strings multiple times in the array example. to understand the classfile size behavior  you have to understand what it is compiled to.    when you access a constant string  the bytecode contains a load constant instruction (  or  )  which is a one byte opcode followed by an index into the class's constant pool. the constant pool is a seperate section of the classfile where a list of constants is stored. obviously  the compiler will only store each constant once.     so the bytecode for stringarray looks something like this (stripping away a few details that aren't relevant here). note that there are only 3 unique strings stored in the constant pool. (actually there are a lot more constant pool entries relating to other parts of the classfile  but they're not important here).         whereas longstring looks something like         so with the first version  duplicate strings can be stored only once  whereas with the second version  the entire string has to be stored. so is the first version always better? not so fast. it has the advantage of not storing duplicated strings  but as you may have noticed  there is a big per element overhead in the array initialization. which one is better depends on how long your strings are and how many duplicates you have.    p.s. at the binary level  constant strings are encoded with a modified utf8 encoding. the upshot is that characters 1-127 are one byte each but null characters are two bytes. so you can save some space by offsetting everything 1.  "
          }
        ],
        "parent": "q_16763",
        "author": "blank"
      },
      {
        "date": "Nov 28, 2014 3:18:05 PM",
        "commentid": "a_20292",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.28400000000000003,
            "sent": " you have  18  duplicate strings in your array (  class). since each array entry is a separate string literal  there will only be constant pool entries for  unique  strings. however  in your second example (  class)  all the duplicates are kept and concatenated at compile-time.    it's a bit hard to look at the class file you posted  because of the size of the strings. i used a shorter version  but it still has the same concept:                 if we open up the class file    you can see the entire string:         but if you look at the class file    duplicates have been removed:          the space between   and   is    which marks a     entry of length  .     in your case  reusing strings would save 2 304 characters.   "
          }
        ],
        "parent": "q_16763",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.28400000000000003,
        "sent": " here is some code for a dfa  implemented as an array of strings:         i thought i could save some space by using one long string instead of a string array:         as it turns out  i was wrong. eclipse kepler generates the following class files:         how come the second class is even bigger than the first class? do very long strings incur some space penalty i am not aware of?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Infinite loop breaks method signature without compilation error\"",
    "commentid": "q_81842",
    "date": "Aug 6, 2014 12:24:30 AM",
    "children": [
      {
        "date": "Aug 6, 2014 12:26:40 AM",
        "commentid": "a_100178",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -1.0,
            "sent": " the final   of the method is unreachable - you only get a compilation error if it's possible to get to the end of the method without returning a value.    this is more useful for cases where the end of the method is unreachable due to an exception  e.g.         the rule for this is in the  jls section 8.4.7 :        if a method is declared to have a return type (?8.4.5)  then a compile-time error occurs if the body of the method can complete normally (?14.1).      your method can't complete normally  hence there's no error. importantly  it's not just that it can't complete normally  but the specification  recognizes  that it can't complete normally. from  jls 14.21 :        a   statement can complete normally iff at least one of the following is true:            the   statement is reachable and the condition expression is not a constant expression (?15.28) with value  .     there is a reachable   statement that exits the   statement.          in your case  the condition expression  is  a constant with value    and there aren't any   statements (reachable or otherwise) so the   statement can't complete normally.  "
          }
        ],
        "parent": "q_81842",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 12:28:27 AM",
        "commentid": "a_100179",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -1.0,
            "sent": "      to more clarification try this         it says   statement  "
          }
        ],
        "parent": "q_81842",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -1.0,
        "sent": " i am wondering why is the following code allowed in java  without getting compilation error? in my opinion  this code breaks method signature by not returning any  . could someone explain what i'm missing here?         "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does &#39;(int)(char)(byte)-2&#39; produce 65534 in Java?\"",
    "commentid": "q_97710",
    "date": "Jul 8, 2014 8:35:32 AM",
    "children": [
      {
        "date": "Jul 8, 2014 10:00:50 AM",
        "commentid": "a_120005",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.7999999999999998,
            "sent": " there are some prerequisites that we need to agree upon before you can understand what is happening here. with understanding the following bullet points  the rest is simple deduction:       all primitive types within the jvm are represented as a sequence of bits. the   type is represented by 32 bits  the   and   types by 16 bits and the   type is represented by 8 bits.     all jvm numbers are signed  where the   type is the only unsigned \\\"number\\\". when a number is signed  the  highest  bit is used to represent the sign of this number. for this highest bit    represents a non-negative number (positive or zero) and   represents a negative number. also  with signed numbers  a negative value is   inverted   to the incrementation order of positive numbers. for example  a positive   value is represented in bits as follows:         while the bit order for negative numbers is inverted:         this inverted notation also explains why the negative range can host an additional number compared to the positive range where the latter includes the representation of the number  . remember  all this is only a matter of  interpreting  a bit pattern. you can note negative numbers differently  but this inverted notation for negative numbers is quite handy because it allows for some rather fast transformations as we will be able to see in a small example later on.    as mentioned  this does not apply for the   type. the   type represents a unicode character with a non-negative \\\"numeric range\\\" of   to  . each of this number refers to a  16-bits unicode  value.     when converting between the            and   types the jvm needs to either add or truncate bits.     if the target type is represented by more bits than the type from which it is converted  then the jvm simply fills the additional slots with the value of the highest bit of the given value (which represents the signature):         thanks to the inverted notation  this strategy also works for negative numbers:         this way  the value's sign is retained. without going into details of implementing this for a jvm  note that this model allows for a casting being performed by a cheap  shift operation  what is obviously advantageous.    an exception from this rule is  widening  a   type which is  as we said before  unsigned. a conversion  from  a   is always applied by filling the additional bits with   because we said there is no sign and thus no need for an inverted notation. a conversion of a   to an   is therefore performed as:         when the original type has more bits than the target type  the additional bits are merely cut off. as long as the original value would have fit into the target value  this works fine  as for example for the following conversion of a   to a  :         however  if the value is  too big  or  too small   this does not longer work:         this is why narrowing castings sometimes lead to strange results. you might wonder why narrowing is implemented this way. you could argue that it would be more intuitive if the jvm checked a number's range and would rather cast an incompatible number to the biggest representable value of the same sign. however  this would require  branching  what is a costly operation. this is specifically important  as  this two's complement notation  allows for cheap arithmetic operations.       with all this information  we can see what happens with the number   in your example:         as you can see  the   cast is redundant as the cast to the   would cut the same bits.    all this is also  specified by the jvms   if you prefer a more formal definition of all these rules.    one final remark: a type's bit size does not necessarily represent the amount of bits that are reserved by the jvm for representing this type in its memory. as a matter of fact  the jvm does not distinguish between            and   types. all of them are represented by the same jvm-type where the virtual machine merely emulates these castings. on a method's operand stack (i.e. any variable within a method)  all values  of the named types consumes 32 bits. this is however not true for arrays and object fields which any jvm implementer can handle at will.  "
          }
        ],
        "parent": "q_97710",
        "author": "blank"
      },
      {
        "date": "Jul 8, 2014 8:44:00 AM",
        "commentid": "a_120006",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.7999999999999998,
            "sent": " there are two important things to note here       a char is unsigned  and cannot be negative   casting a byte to a char first involves a hidden cast to an int as per the  java language spec .      thus casting -2 to an int gives us 11111111111111111111111111111110.  notice how the two's complement value has been sign extended with a one; that only happens for negative values.  when we then narrow it to a char  the int is truncated to         finally  casting 1111111111111110 to an int is bit extended with zero  rather than a one because the value is now considered to be positive (because chars can only be positive).  thus widening the bits leaves the value unchanged  but unlike the negative value case unchanged in value.  and that binary value when printed in decimal is 65534.  "
          }
        ],
        "parent": "q_97710",
        "author": "blank"
      },
      {
        "date": "Jul 8, 2014 8:39:47 AM",
        "commentid": "a_120007",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.7999999999999998,
            "sent": " a   has a value between 0 and 65535  so when you cast a negative to char  the result is the same as subtracting that number from 65536  resulting in 65534.  if you printed it as a    it would try to display whatever unicode character is represented by 65534  but then when you cast to    you actually get 65534.  if you started with a number that was above 65536  you'd see similarly \\\"confusing\\\" results in which a big number (e.g. 65538) would end up small (2).  "
          }
        ],
        "parent": "q_97710",
        "author": "blank"
      },
      {
        "date": "Jul 9, 2014 1:44:36 PM",
        "commentid": "a_120008",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.7999999999999998,
            "sent": " i think the simplest way to explain this would just be to break it down into the order of operations you are performing           you are simply taking a 32bit signed value.    you are then converting it to an 8bit signed value.    when you attempt to convert it to a 16bit unsigned value  the compiler sneaks in a quick conversion to 32bit signed value    then converting it to 16bit without maintaining sign.   when the final conversion to 32bit occurs  there is no sign  so the value adds zero bits to maintain value.      so  yes  when you look at it this way  the byte cast is significant (academically speaking)  though the result is insignificant (joy to programming  a significant action can have an insignificant effect).  the effect of narrowing and widening while maintaining sign.  where  the conversion to char narrows  but does not widen to sign.    (please note  i used a # to denote the signed bit  and as noted  there is no signed bit for char  as it is an unsigned value).    i used parens to represent what is actually happening internally.  the data types are actually trunked in their logical blocks  but if viewed as in int  their results would be what the parens symbolize.    signed values always widen with value of the signed bit.  unsigned always widen with the bit off.    *so  the trick (or gotchas) to this  is that the expansion to int from byte  maintains the signed value when widened.  which is then narrowed the moment it touches the char.  this then turns off the signed bit.    if the conversion to int did not occur  the value would have been 254. but  it does  so it isn't.  "
          }
        ],
        "parent": "q_97710",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": 0.7999999999999998,
        "sent": "      i encountered this question in technical test for a job. it gives the output as 65534. this behavior is with negative values only; 0 and positive numbers yield the same value  meaning the one entered in sop. the byte cast here is insignificant; i have tried without it. so my question is: what exactly is going on here?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why are arrays Objects  but can not be used as a base class?\"",
    "commentid": "q_6394",
    "date": "Dec 16, 2014 5:42:03 AM",
    "children": [
      {
        "date": "Dec 16, 2014 5:53:08 AM",
        "commentid": "a_7769",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.948,
            "sent": " java was a compromise between non-object languages and very slow languages of that time where everything was an object (think about  smalltalk ).    even in more recent languages  having a  fast  structure at the language level for arrays (and usually maps) is considered a strategic goal. most people wouldn't like the weight of an inheritable object for arrays  and certainly nobody wanted this before jvm advances like jit.     that's why arrays  while being objects  weren't designed as class instances ( \\\"an object is a class instance or an array\\\" ). there would be little benefit in having the ability to override a method on an array  and certainly not a great-enough one to counterbalance the need to check for the right method to apply (and in my opinion not a great-one enough to counterbalance the increased difficulty in code reading  similar to what happens when you override operators).  "
          }
        ],
        "parent": "q_6394",
        "author": "blank"
      },
      {
        "date": "Dec 16, 2014 5:52:04 AM",
        "commentid": "a_7770",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.948,
            "sent": " i came across   under the hood - objects and arrays   which explains almost anything you need to know about how jvm handles arrays. in jvm  arrays are handled with special  bytecodes   not like other objects we are familiar with.        in the jvm instruction set  all objects are instantiated and accessed   with the same set of opcodes   except  for arrays. in java   arrays are   full-fledged objects   and  like any other object in a java program    are created dynamically. array references can be used anywhere a   reference to type object is called for  and any method of object can   be invoked on an array. yet  in the java virtual machine   arrays are   handled with special bytecodes .        as with any other object  arrays  cannot be declared as local   variables ; only array references can. array objects themselves always   contain either an array of primitive types or an array of object   references. if you declare an array of objects  you get an array of   object references. the objects themselves must be explicitly created   with new and assigned to the elements of the array.      arrays are  dynamically  created objects  and they serve as a container that hold a (constant) number of objects of the same type. it looks like arrays are not like any other object  and that's why they are treated differently.  "
          }
        ],
        "parent": "q_6394",
        "author": "blank"
      },
      {
        "date": "Dec 16, 2014 5:53:22 AM",
        "commentid": "a_7771",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.948,
            "sent": " i'd like to point out this  article . it seems as though arrays and objects follow different opcodes. i can't honestly summarize it more than that however it seems  arrays are simply not treated as   like we're normally used to so they don't inherit   methods.    full credits to the author of that post as it's a very interesting read  both short &amp; detailed.       upon further digging into the topic via multiple sources i've decided to give a more elaborate version of my previous answer.    the first thing to note that instantiation of  objects  and  arrays  are very different within the jvm  their follow their respective bytecode.     object:       instantiation follows a simple opcode   which is a combination of two operands -   &amp;  . once instantiated the jvm pushes the  reference  to this object onto the  . this occurs for all objects irrespective of their types.        arrays:       opcodes  (regarding instantiation of an array)  however are divided into three different codes.          - pops length  allocates new array of primitive types of type indicated by atype  pushes objectref of new array        opcode is used when creating arrays that involve primitive datatypes (               ) rather than object references.          - pops length  allocates a new array of objects of class indicated by indexbyte1 and indexbyte2  pushes objectref of new array        opcode is used when creating arrays of object references          - pops dimensions number of array lengths  allocates a new multidimensional array of class indicated by indexbyte1 and indexbyte2  pushes objectref of new array        instruction is used when allocating multi-dimensional arrays       object  can  be a class instance or an array.     take from  oracle docs          a class instance is explicitly created by a class instance creation expression        but         an array is explicitly created by an array creation expression       this goes hand in hand with the information regarding the opcodes. arrays are simply not developed to be class interfaces but are instead  explicitly  created by array creation expression thus naturally wouldn't  implicitly  be able to inherit and/or override  .    as we have seen  it has nothing to do with the fact that arrays may hold primitive datatypes. after giving it some thought though  it isn't very common to come across situations where one might want to   or   however was still a very interesting question to try and answer.       resources:     oracle-docs chapter 4.3.1      oracle-docs chapter 15.10.1      artima - underthehood   "
          }
        ],
        "parent": "q_6394",
        "author": "blank"
      },
      {
        "date": "Dec 16, 2014 5:53:54 AM",
        "commentid": "a_7772",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.948,
            "sent": " there are many classes in standard java library that you cannot subclass  arrays aren't the only example. consider    or    or any of the \\\"primitive wrappers\\\"  like    or  . there are optimizations that jvm does based on knowing the exact structure of these objects when it deals with them (like unboxing the primitives  or manipulating array memory at byte level). if you could override anything  it would not be possible  and affect the performance of  the programs very badly.   "
          }
        ],
        "parent": "q_6394",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.948,
        "sent": " the java language specification specifies that         in the java programming language arrays are objects (?4.3.1)  are dynamically created  and may be assigned to variables of type object (?4.3.2). all methods of class   may be invoked on an array.      so  considering arrays are objects ? why did the java designers make the decision not to allow inherit and override from it  for example      or  ?    the current syntax wouldn't allow creating anonymous classes with an array as the base class  but i don't think  that  was the reason for their decision.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Will Java Final variables have default values?\"",
    "commentid": "q_86815",
    "date": "Jul 28, 2014 12:49:33 AM",
    "children": [
      {
        "date": "Jul 28, 2014 1:03:22 AM",
        "commentid": "a_106337",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": "    http://docs.oracle.com/javase/tutorial/java/javaoo/initial.html   chapter \\\"initializing instance members\\\":        the java compiler copies initializer blocks into every constructor.      that is to say:         behaves exactly like:         as you can thus see  once an instance has been created  the final field has not been   definitely assigned    while (from  http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.2 ):        a blank final instance variable must be definitely assigned at   the end of every constructor of the class in which it is   declared; otherwise a compile-time error occurs.      while it does not seem to be stated explitely in the docs (at least i have not been able to find it)  a final field must temporary take its default value before the end of the constructor  so that it has a   predictable value   if you read it before its assignment.    default values:  http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5     on your second snippet  x is initialized on instance creation  so the compiler does not complain:       "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:08:15 AM",
        "commentid": "a_106338",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": "  jls  is  saying  that you  must  assign the default value to blank final instance variable in constructor (or in  initialization block  which is pretty the same). that is why you get the error in the first case. however it doesn't say that you can not access it in constructor before. looks weird a little bit  but you can access it before assignment and see default value for int - 0.        upd.  as mentioned by @i4mpi   jls   defines  the rule that each value should be  definitely assigned  before any access:         however  it also has an  interesting rule  in regards to constructors and fields:         so in second case the value   is  definitely assigned  at the beginning of the constructor  because it contains the assignment at the end of it.   "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:06:08 AM",
        "commentid": "a_106339",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": " if you don't initialize   you'll get a compile error since   is never initialized.     declaring   as final means that it can be initialized only in the constructor or in  initializer-block  (since this block will be copied by the compiler into every constructor).     the reason that you get   printed out before the variable is initialized is due to the behavior  defined in the   manual   (see: \\\"default values\\\" section).  "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:19:28 AM",
        "commentid": "a_106340",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": " the first error is the compiler complaining that you have a final field  but no code to initialize it - simple enough.    in the second example  you have code to assign it a value  but the sequence of execution means you reference the field both before and after assigning it.    the pre-assigned value of any field is the default value.  "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:05:45 AM",
        "commentid": "a_106341",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": " as far as i'm aware  the compiler will always initialize class variables to default values (even final variables). for example  if you were to initialize an int to itself  the int would be set to its default of 0. see below:         the above would print the following:       "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:06:59 AM",
        "commentid": "a_106342",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": " all non-final fields of a class initialize to a default value (  for nummeric data types    for boolean and   for reference types  sometimes called complex objects). these fields initialize before a constructor (or instance initialization block) executes independent of whether or not the fields was declared before or after the constructor.     final  fields of a class has  no default value  and must be explicitly initialized just once before a class constructor has finished his job.    local variables on the inside of an execution block (for example  a method) has no default value. these fields must be explicitly initialized before their first use and it doesn't matter whether or not the local variable is marked as final.  "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 1:13:37 AM",
        "commentid": "a_106343",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": " let me put it in the simplest words i can.      variables need to be initialized  this is mandated by the language specification. having said that  please note that it is not necessary to initialize it at the time of declaration.     it is required to initialize that before the object is initialized.    we can use initializer blocks to initialize the final variables. now  initializer blocks are of two types   and      the block you used is a non-static initializer block. so  when you create an object  runtime will invoke constructor and which in turn will invoke the constructor of the parent class.    after that  it will invoke all the initializers (in your case the non-static initializer).     in your question   case 1 : even after the completion of initializer block the final variable remains un-initialized  which is an error compiler will detect.    in  case 2 : the initializer will initialize the final variable  hence the compiler knows that before the object is initialized  the final is already initialized. hence  it will not complain.    now the question is  why does   takes a zero. the reason here is that compiler already knows that there is no error and so upon invocation of init method all the finals will be initialized to defaults  and a flag set that they can change upon actual assignment statement similar to  . see the init invocation below:       "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      },
      {
        "date": "Jul 28, 2014 3:09:31 PM",
        "commentid": "a_106344",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -1.0,
            "sent": "     if i try to execute it  i am getting compiler error as : variable x might not have been initialized based on java default values i should get the below output right??        \\\"here x is 0\\\".      no. you are not seeing that output because you are getting a compile-time error in the first place. final variables do get a default value  but the java language specification (jls) requires you to initialize them by the end of the constructor (le: i'm including initialization blocks here)  otherwise you'll get a compile-time error which will prevent your code to be compiled and executed.     your second example respects the requirement  that's why (1) your code compiles and (2) you get the expected behaviour.     in the future try to familiarize yourself with the jls. there's no better source of information about the java language.  "
          }
        ],
        "parent": "q_86815",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": -1.0,
        "sent": " i have a program like this:         if i try to execute it  i am getting compiler error as :   based on java default values i should get the below output right??         will final variables have dafault values?    if i change my code like this          i am getting output as:         can anyone please explain this behavior..  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"What does the -&gt; &lt;- operator do?\"",
    "commentid": "q_88353",
    "date": "Jul 24, 2014 8:46:30 AM",
    "children": [
      {
        "date": "Jul 24, 2014 8:52:08 AM",
        "commentid": "a_108356",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": 0.6680000000000001,
            "sent": " there is no   operator. that first   is just lambda syntax  as introduced in java 8  and that second   is a delusive concatenation of 'smaller than'   and 'unary minus'  .    you can read it as    i.e. it tests whether   is smaller than    which is the case for all (well   most ) negative numbers  hence the name  .            just for completeness: this test is not only (intentionally?) hard to understand  but -- as pointed out in the comments -- it also fails for   (which is  ). instead  you should probably just use the much simpler  .  "
          }
        ],
        "parent": "q_88353",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": 0.6680000000000001,
        "sent": " i recently came upon the following code:         what is this  some sort of reverse double lambda?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Java Primitives range calculation\"",
    "commentid": "q_93450",
    "date": "Jul 15, 2014 10:39:25 PM",
    "children": [
      {
        "date": "Jul 15, 2014 10:41:35 PM",
        "commentid": "a_114588",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.0,
            "sent": " the compiler will  in this case  evaluate the calculation (because it contains only constants) and try to assign the result to the variable. this calculation is done with type   and only converted to   on assignment  if at all possible.    in your case  the first calculation is too large to fit into a   (1073741824). the second one will overflow the   and end up in a range that   supports (0). so the assignment works in that case.    mind you  you probably don't ever want to rely on these things in code.  "
          }
        ],
        "parent": "q_93450",
        "author": "blank"
      },
      {
        "date": "Jul 15, 2014 10:46:56 PM",
        "commentid": "a_114589",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.0,
            "sent": " you are facing the problem as your number is  wrapping around .in the first case it does not wrap around and hence it overflows the range of short. but in the second case it wraps around after the calculationa and hence it comes in the range of short and so you dont have the compile time error.    a loss of precision means that you are losing information of the given value.( the short data type is a 16-bit signed two's complement integer. it has a minimum value of -32 768 and a maximum value of 32 767 (inclusive). ) in your first case the range of short is crossed(1073741824) and hence you are loosing the information.        a narrowing conversion of a signed integer to an integral type t   simply discards all but the n lowest order bits  where n is the number   of bits used to represent type t.       edit:-     from   jls ?3.10.1  (very correctly mentioned in  this  similar question)        it is a compile-time error if a decimal literal of type int is larger   than 2147483648 (2 31 )  or if the decimal literal 2147483648 appears   anywhere other than as the operand of the unary minus operator   ( ?15.15.4 ).    "
          }
        ],
        "parent": "q_93450",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": 0.0,
        "sent": " in java when we declare          it will gives compile time error but           compiles fine.  why this happened?   "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Performance issue: Java vs C++\"",
    "commentid": "q_89091",
    "date": "Jul 23, 2014 8:21:30 AM",
    "children": [
      {
        "date": "Jul 23, 2014 1:40:51 PM",
        "commentid": "a_109247",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " updates:    changes to c++      as written:  compilation failure   replace math.h => cmath  27610 milliseconds   add -o3 flag  4416 milliseconds   replace std::list with std::vector  2294 milliseconds   replace point with std::pair  2384 milliseconds     made verifiernonprise const correct  2351 milliseconds   replaced loop in verifiernonprise with    929 milliseconds   replacing double with int (to make it equiv to java)  549 milliseconds      changes to java      as written  3459 milliseconds   changes   early return  368 milliseconds      java vs c++         final code:       "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 8:24:13 AM",
        "commentid": "a_109248",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": "   in c++ is a linked list  whereas   is an array. try replacing   by  . also  be sure to compile with optimization turned on.  "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 8:34:27 AM",
        "commentid": "a_109249",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " test this version  updated using c++11 features. tested in gcc 4.9.0 with  . tested on celeron 1.6&nbsp;ghz  512&nbsp;mb ram.    times in my pc:  original:  duration (milliseconds): 12658   first version:  duration (milliseconds): 3616   optimized version:  duration (milliseconds): 1745      changes are:      using   instead of    benchmark   and  words from stroustrup .   using const whatever we can  the compiler is able to optimize much more if it known that the value don't change.   using std::pair instead of point.   using new for-loop with constant iterators.      source:         some more deep changes.    changes include:      returning as early as possible. as soon as the queen can not be placed.   returning to a simpler point class.   using find_if algorithm for searching queen placement.      source (some recommendation updated):       "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 9:02:59 AM",
        "commentid": "a_109250",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " comparing a managed  dynamically compiled language like java to a statically compiled language like c++ is very difficult.    you will always be comparing apples to oranges in a sense  because they are conceptually very different. it starts with the use of the standard libraries (arraylist vs std::list/vector) that will have potentially wildly different performance characteristics  even your code looks similar in both languages.    then there is the inherent problem with microbenchmarks in java (short test in java are always slower because the  jit  will observe program flow before it decides what and how it is to be compiled). same goes for compiler options for c++  even the  structure  of the source code (independently compiled and linked classes versus single file source) can make a significant difference (because it changes the amount of \\\"insight\\\" the c++ compiler has into the other classes).    next is the general difference in memory management  garbage collection vs manual memory management (smart pointers etc. are still considered manual memory management).    not to mention the general language differences like you need to explicitly declare a method virtual in c++  while in java  every  member method is virtual by default (working out if it's really virtual at runtime is left to the vm).    with all those differences there will always be cases where one langauge will have a massive advantage over the other. a simple test with very limited scope (like your test here) says very little about each language as a whole.    another point people often tend to ignore is: how productive can you be with a language - speed isn't everything (look a how sucessful script langages are in some domains  despite being hardly competive when looking  only  at excution speed). lack of performance  can  be crippling  but so can be low productivity.  "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Jul 23, 2014 9:58:54 AM",
        "commentid": "a_109251",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " also  there is no reason to use float/doouble types for the coordinates.     you should gain performance if you do not force calling floating point abs library call in your c++    java stores the point coordinates as integer. the get functions return double  however this is probably easier to optimize away in java  then in c++.  "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Aug 5, 2014 10:17:38 AM",
        "commentid": "a_109252",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " java passes objects to methods as references and those references are passed by value  but c++ passes objects by value.    you should change c++ code to make it same as java (pass pointers in c++ intstead of passing objects):       "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Nov 26, 2014 9:23:53 PM",
        "commentid": "a_109253",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " c++ can do it in 21 ms (on a old core i7-860) if you use bit maps. for the timing run i commented out the showsoln() call since a graphic display of the chess board takes twice as long as finding the solution.       "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Dec 10, 2014 5:26:00 PM",
        "commentid": "a_109254",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": " i may be beating a dead horse here  but simply doing a line by line translation of the java to c++  not even using const reference parameters or any such thing  you can see the c++ is almost twice as fast as java.  all the \\\"syntactic optimization\\\" emplacing etc. has little effect if any...          queen.java (translated to english)         queen.cpp       "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 8:16:44 AM",
        "commentid": "a_109255",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -1.156,
            "sent": "  you need to be very careful when using stl. raw pointers may give better performances.     except if i missed something  on my machine (corei5 under windows)  code compiled with -ofast give those performances:    over ten runs:      netvipec's fastest code (with find_if algorithm) best run was 1722ms    loki's code best run was 1756ms   with no stl container  the code below best run was 1568ms      strange thing is that the average speed of the no-stl version is slower  but sometimes  it gets faster than all others.    here it is (removed stl  added inlines  early returns everywhere and avoided variable declaration in placerdame's loop). this is the fastest c++ code proposed on this page!         sorry  i have no java environment to compare...i never used java and don't want to start today ;-) but i would be really surprised if this optimized code is slower than java....    if c++ is slower  you need to first make sure it is fully optimized. fully optimized c++ code will (most likely) be faster than java.  "
          }
        ],
        "parent": "q_89091",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -1.156,
        "sent": " i have always heard that c++ was way more efficient than java (and that is why most games are developped in c++).    i wrote a small algorithm to solve the \\\"eight queens puzzle\\\" in both java and c++  using the exact same algorithm  and then started to raise the number or squares. when reaching checkboards of 20*20 or even 22*22  it appears java is much more effective (3 seconds vs 66 seconds for c++).    i have no idea why  but i am pretty beginning with c++  so it is possible i made some huge performance mistakes  so i will gladly accept any information that would help me understand what is happening.    below is the code i use in java:         and below is the code in c++:       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why we should not use protected static in java\"",
    "commentid": "q_108264",
    "date": "Jun 18, 2014 8:09:05 AM",
    "children": [
      {
        "date": "Jun 18, 2014 8:15:23 AM",
        "commentid": "a_132856",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " it's more a stylistic thing than a direct problem. it suggests that you haven't properly thought through what is going on with the class.    think about what   means:        this variable exists at class level  it does not exist separately for each instance and  it does not have an independent existence in classes which extend me .      think about what   means:        this variable can be seen by this class  classes in the same package  and classes which extend me .      the two meanings are not exactly mutually exclusive but it is pretty close.    the only case i can see where you might use the two together is if you had an abstract class that was designed to be extended and the extending class could then modify the behavior using constants defined in the original. even then it's a very feeble reason though as you would still almost certainly be better having the constants as public. that just makes everything cleaner and allows the people sub classing more flexibility.    to expand and explain the first point - try this example code:         you will see the results:         try it yourself at:  https://ideone.com/km8u8o     the class   is able to access the static member   from   without needing to qualify the name - but it does not inherit or get its own copy. it is looking at the exact same variable.  "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 8:40:48 AM",
        "commentid": "a_132857",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " it's frowned upon because it doesn't make sense to use that combination.    making a variable   implies it will be used  within the package  or it will be  inherited within a subclass . making the variable   makes it a member of the class   eliminating the intentions of inheriting it . this leaves only the intention of being used  within a package   and we have   for that (no modifier).    the only  possible  situation i could find this useful is if you were declaring a class that should be used to launch the application (like javafx's    and only wanted to be able to launch from a subclass. if doing so  ensure the methid is also  .    to see the access levels of each modifier  see this:  the java tutorials - controlling access to members of a class   "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 8:16:18 AM",
        "commentid": "a_132858",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " static members are not inherited  and protected members are only visible to subclasses (and of course the containing class)  so a   has the same visibility as    suggesting a misunderstanding by the coder.   "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 8:27:39 AM",
        "commentid": "a_132859",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " i don't see a particular reason why this should be frowned upon. there may always be alternatives to achieve the same behavior  and it will depend on the actual achitecture whether these alternatives are \\\"better\\\" than a protected static method or not. but one example where a protected static method would be reasonable  at least  could be the following:    (edited to split into separate packages  to make the use of   clearer)         derived from that:         another derived class:         the   modifier can certainly be justified here:      the methods can be    because they do not depend on instance variables. they are not intended to be used directly as a polymorphic method  but rather are \\\"utility\\\" methods that offer default  implementations  that are part of a more complex computation  and serve as \\\"building blocks\\\" of the actual implementation.   the methods should not be    because they are an implementation detail. and they can't be   because they should be called by the extending classes. they also can't have \\\"default\\\" visibility  because then they will not be accessible for the extending classes in other packages.      (edit: one could assume that the original comment only referred to  fields   and not to  methods  - then  however  it was too general)  "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 8:50:38 AM",
        "commentid": "a_132860",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " it is not an error to have a  variable and it will be accepted by java compiler. but the real meaning is that  there will be an unique instance of the variable for this class and all derived classes .    when you declare a protected non static variable  you know that each instance of a derived class will have its own copy of the variable. and unwary programmers could want to use a protected static in same sense : one copy for each subclass - which is  wrong .    other common use cases (wich are not errors) :      a constant that should not be public - but what can be a good reason for a constant not to be public ? if it is for security; it suggests bad security practices ...   a track of all objects of that class including derived classes - but it would be better to have a container object  if you ever want to have more than one group ...      imho it is why   are frowned upon : it is not incorrect  but many uses suggests bad pratices.  "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 3:44:52 PM",
        "commentid": "a_132861",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " actually there is nothing fundamentally wrong with  . if you really want a static variable or method that is visible for the package and all subclasses of the declaring class then go ahead and make it  .    some people generally avoid to use   for various reasons and some people think non-final   variables should be avoided by all means (i personally sympathize with the latter to some degree)  so i guess the combination of   and   must look  bad^2  to those that belong to both groups.  "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      },
      {
        "date": "Jun 18, 2014 8:38:51 AM",
        "commentid": "a_132862",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.3999999999999999,
            "sent": " protected is used so that it can be used in subclasses. there is no logic in defining a protected static when using in the context of concrete classes as you can access the same variable is a static way.however the complier will give a warning to access the super class static variable in a static way.  "
          }
        ],
        "parent": "q_108264",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": -0.3999999999999999,
        "sent": " i was going through this question  is there a way to override class variables in java?  the first comment with 36 upvotes was:        if you ever see a    run.      can anyone explain why is a   frowned upon?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"In Java  which gets executed first  &quot;+&quot; or &quot;++&quot;?\"",
    "commentid": "q_63460",
    "date": "Sep 10, 2014 2:02:00 AM",
    "children": [
      {
        "date": "Sep 10, 2014 2:12:51 AM",
        "commentid": "a_77301",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " you are nearly correct but you are subtly misunderstanding the precedence rules.    compare these two cases:         the result is:         the precedence does indeed say to evaluate the   before the    but that doesn't apply until it reaches that part of the expression.    your expression is of the form   where   is   and   is      the left branch  i.e.    is evaluated first. afterwards the right branch  i.e.    is evaluated. only when it comes to evaluate   the   operation is performed.    the precedence rules only say that the   is \\\"inside\\\" the   expression  they don't say anything about the order of operations.  "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:05:12 AM",
        "commentid": "a_77302",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " your logic is close  but not quite right.  the order of evaluation is left to right for the + operator.  t1 comes before the binary op  lhs and then the increment is on the rhs of that binary op.  the lhs is executed first.         visualised as a tree you have           precedence order     when two operators share an operand the operator with the higher precedence goes first. for example  1 + 2 * 3 is treated as 1 + (2 * 3)  whereas 1 * 2 + 3 is treated as (1 * 2) + 3 since multiplication has a higher precedence than addition.     associativity     when two operators with the same precedence the expression is evaluated according to its associativity. for example x = y = z = 17 is treated as x = (y = (z = 17))  leaving all three variables with the value 17  since the = operator has right-to-left associativity (and an assignment statement evaluates to the value on the right hand side). on the other hand  72 / 2 / 3 is treated as (72 / 2) / 3 since the / operator has left-to-right associativity.   "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 11:31:10 AM",
        "commentid": "a_77303",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " another way of thinking of it is to expand the ++ expression:      is the same as putting  .         if you were to reverse the order to   then the expression would expand to:       "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:07:58 AM",
        "commentid": "a_77304",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " to add a point to chris k        the associativity is from left to right     so        "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:06:20 AM",
        "commentid": "a_77305",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " the   is evaluated from left to right  so         results in  .  "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:05:59 AM",
        "commentid": "a_77306",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " the value of t1 in the second line is 5         the  evaluation order is from left to right.     so first t1 is evaluated to   then   to   and hence the result as    "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:06:37 AM",
        "commentid": "a_77307",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " evaluation happen from left to right. so actually what happen is following       "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:07:50 AM",
        "commentid": "a_77308",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": " ++x is executed before you use the variable x  and x++ increase x after you used it:       "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 10, 2014 2:10:36 AM",
        "commentid": "a_77309",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": "      this is equivalent to        "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 15, 2014 9:55:08 PM",
        "commentid": "a_77310",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": "      as you can see    has high precedence than   ; it will get evaluated first.  "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      },
      {
        "date": "Sep 18, 2014 3:09:11 AM",
        "commentid": "a_77311",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.28400000000000003,
            "sent": "    "
          }
        ],
        "parent": "q_63460",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": -0.28400000000000003,
        "sent": " i tried the following code in java         my view is since ++ has a higher precedence than +  the above becomes         however  i get the answer 11 for t2. can someone explain?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why can&#39;t you add an int and a char in some cases?\"",
    "commentid": "q_98577",
    "date": "Jul 7, 2014 3:16:50 AM",
    "children": [
      {
        "date": "Jul 7, 2014 3:25:06 AM",
        "commentid": "a_121034",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.0,
            "sent": " to understand this  lets consider what the compiler does at each step for both possibilities.  lets start with:         the compiler converts '4' to an int.  so it becomes         which the compiler then turns into         ch is a char  and the compiler is allowed to convert 54 to a char as it can prove that there is no loss in the conversion.     now lets consider the second version:         ch has no known value at compile time.  thus this becomes         now the compiler cannot prove that the result of this (an int) is storable within the range of a char.  so it will  not  automatically narrow it  and reports it as an error.    edit1:    if the compiler can prove that the variable will never change  and is inlineable.  then the second form can be turned into the first.   subir pointed out that adding 'final' makes this possible.  although if a compiler was to perform change analysis then it is technically capable of figuring this out without the final keyword  but final does make it easier for the compiler and readers of the code.    edit2:     narrowing of int to char is covered in the  java language spec   the link was kindly provided by jon skeet.  "
          }
        ],
        "parent": "q_98577",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": 0.0,
        "sent": " why does         work  but         doesn't?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why is i++ not atomic?\"",
    "commentid": "q_81458",
    "date": "Aug 6, 2014 11:55:21 AM",
    "children": [
      {
        "date": "Aug 6, 2014 3:09:18 PM",
        "commentid": "a_99706",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": "   is probably not atomic in java because atomicity is a special requirement which is not present in the majority of the uses of  . that requirement has a significant overhead: there is a large cost in making an increment operation atomic; it involves synchronization at both the software and hardware levels that need not be present in an ordinary increment.    you could make the argument that   should have been designed and documented as specifically performing an atomic increment  so that a non-atomic increment is performed using  .  however  this would break the \\\"cultural compatibility\\\" between java  and c and c++. as well  it would take away a convenient notation which programmers familiar with c-like languages take for granted  giving it a special meaning that applies only in limited circumstances.    basic c or c++ code like   would translate into java as  ; because it would be inappropriate to use the atomic  . what's worse  programmers coming from c or other c-like languages to java would use   anyway  resulting in unnecessary use of atomic instructions.    even at the machine instruction set level  an increment type operation is usually not atomic for performance reasons. in x86  a special instruction \\\"lock prefix\\\" must be used to make the   instruction atomic: for the same reasons as above.  if   were always atomic  it would never be used when a non-atomic inc is required; programmers and compilers would generate code that loads  adds 1 and stores  because it would be way faster.    in some instruction set architectures  there is no atomic   or perhaps no   at all; to do an atomic inc on mips  you have to write a software loop which uses the   and  : load-linked  and store-conditional. load-linked reads the word  and store-conditional stores the new value if the word has not changed  or else it fails (which is detected and causes a re-try).  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 11:58:38 AM",
        "commentid": "a_99707",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": "   involves two operations :      read the current value of     increment the value and assign it to        when two threads perform   on the same variable at the same time  they may both get the same current value of    and then increment and set it to    so you'll get a single incrementation instead of two.    example :       "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 12:44:00 PM",
        "commentid": "a_99708",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": " the important thing is the jls (java language specification) rather than how various implementations of the jvm may or may not have implemented a certain feature of the language. the jls defines the ++ postfix operator in clause 15.14.2 which says i.a. \\\"the value 1 is added to the value of the variable and the sum is stored back into the variable\\\". nowhere does it mention or hint at multithreading or atomicity. for these the jls provides  volatile  and  synchronized . additionally  there is the package  java.util.concurrent.atomic  (see  http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html )  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 12:00:28 PM",
        "commentid": "a_99709",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": "     why is i++ not atomic in java?      let's break the increment operation into multiple statements:    thread 1 &amp; 2 :      fetch value of total from memory   add 1 to the value   write back to the memory      if there is no synchronization then let's say thread one has read the value 3 and incremented it to 4  but has not written it back. at this point  the context switch happens. thread two reads the value 3  increments it and the context switch happens. though both threads have incremented the total value  it will still be 4 - race condition.  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 7, 2014 4:47:49 AM",
        "commentid": "a_99710",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": "   is a statement which simply involves 3 operations:      read current value   write new value   store new value      these three operations are not meant to be executed in one step  in other words   is not a   compound  operation. as a result all sorts of things can go wrong when more than one threads are involved in a single but non-compound operation.    as an example imagine this scenario:     time 1 :          time 2 :          time 3 :         and there you have it. a race condition.       that's why   is not atomic. if it was  none of this would have happened and each   would happen atomically. that's exactly what   is for and in your case it would probably fit right in.    p.s.    an excellent book covering all of those issues and then some is this:  java concurrency in practice   "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 7, 2014 2:04:25 AM",
        "commentid": "a_99711",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": " if the operation   would be atomic you wouldn't have the chance to read the value from it. this is exactly what you want to do using   (instead of using  ).    for example look at the following code:         in this case we expect the output to be:   (because we post increment  e.g. first read  then update)    this is one of the reasons the operation can't be atomic  because you need to read the value (and do something with it) and  then  update the value.    the other important reason is that doing something atomically  usually  takes more time because of locking. it would be silly to have all the operations on primitives take a little bit longer for the rare cases when people want to have atomic operations. that is why they've added     and  other  atomic classes to the language.  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 11:58:35 AM",
        "commentid": "a_99712",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": " in the jvm  an increment involves a read and a write  so it's not atomic.   "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 12, 2014 7:01:53 PM",
        "commentid": "a_99713",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": " there are two steps: 1.fetch i from memory 2.set i+1 to memory so there are two steps  so it's not atomic operation. when thread1 executes i++  and thread executes i++  the final value of may be i=i+1.  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      },
      {
        "date": "Aug 6, 2014 12:01:24 PM",
        "commentid": "a_99714",
        "sent": [
          {
            "topicid": 2,
            "systemtopicid": 2,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Loops",
            "linePolarity": -0.22399999999999998,
            "sent": " concurrency (the   class and such) is an added feature in v1.0 of  java .   was added in the beta before that  and as such is it still more than likely in its (more or less) original implementation.    it is up to the programmer to synchronize variables. check out  oracle's tutorial on this .    edit: to clarify  i++ is a well defined procedure that predates java  and as such the designers of java decided to keep the original functionality of that procedure.    the ++ operator was defined in b (1969) which predates java and threading by just a tad.  "
          }
        ],
        "parent": "q_81458",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 2.0,
        "systemtopicid": 2.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Loops",
        "linePolarity": -0.22399999999999998,
        "sent": " why is   not atomic in java?    to get a bit deeper in java i tried to count how often the loop in threads are executed.    so i used a         in the main class.    i have two threads.      thread 1: prints     thread 2: prints        and i count the lines printed by thread 1 and thread 2. but the lines of thread 1 + lines of thread 2 don't match the total number of lines printed out.    here is my code:       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Confusing output from String.split\"",
    "commentid": "q_84818",
    "date": "Jul 31, 2014 3:28:15 AM",
    "children": [
      {
        "date": "Jul 31, 2014 3:40:30 AM",
        "commentid": "a_103909",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " documentation:    for:          the array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. the substrings in the array are in the order in which they occur in this string.  if the expression does not match any part of the input then the resulting array has just one element  namely this string .      it will simply return the entire string that's why it returns 1.       for the second case    will discard the   so the result will be empty.         see  guava stringsexplained  too  "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 4:44:35 AM",
        "commentid": "a_103910",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " everything happens according to plan  but let's do it step by step (i hope you have some time).     according to  documentation  (and  source code ) of   method):        this method works as if by invoking the two-argument split method with the given expression and a limit argument of zero.      so when you invoke          you are actually getting result from the   method which is invoked in a way:         so here   is set to  .     you need to know a few things about this parameter:      if   is positive you are limiting length of result array to a positive number you specified  so   will return an array     not  .    if   is   then you are not limiting the length of the result array. but it also means that any trailing empty strings will be removed. for example:             will at start generate an array which will look like:         (  split on   generates   and  )  but since   removes all trailing empty string  it will return             behaviour of negative value of   is similar to behaviour where limit is set to   (it will not limit length of result array). the only difference is that it will not remove empty strings from the end of the result array. in other words             will return         i will try to answer for the first case          which as explained earlier is effectively same as          this means that we are using a version of split which will not limit the length of the result array  but will remove all trailing empty strings   . you need to understand that when we split  one  thing we are always getting  two  things.    in other words  if we split   in place of    we will get   and  .  the tricky part is to understand that if we split   in   we will get  \\\"\\\"` (empty string).    using this logic  if we split   on   we will get   and   (two empty strings).    you can check it easily using          which will produce          so our result array contains  .    but we set   to    so we decided that all trailing empty strings will be removed. in this case  the result array contains  only trailing empty strings   so  all of them will be removed   leaving you with empty array   which length is  .       to answer the case with         you need to understand that  removing trailing empty strings makes sense only if such trailing empty strings ware result of splitting (and most probably are unwanted) . so if there were not any places on which we could split there is no point in running this \\\"cleaning\\\" process. that is why in case where the original string was not split (it didn't contain part which matched a regex from  's argument) java creators decided to return this string as it is.    this information is mentioned in  documentation of    method where you can read:        if the expression  does not match any part of the input  then the  resulting array has just one element  namely this string .      you can also see this behaviour in  source code of this method  (from java 8):     2316        public   string [] split( string  regex   int  limit) {  2317           /* fastpath if the regex is a  2318            (1)one-char string and this character is not one of the  2319               regex's meta characters \\\".$|()[{^?*+\\\\\\\\\\\"  or  2320            (2)two-char string and the first char is the backslash and  2321               the second is not the ascii digit or ascii letter.  2322            */  2323            char  ch = 0;  2324            if  (((regex.value.length == 1 &amp;&amp;  2325                \\\".$|()[{^?*+\\\\\\\\\\\". indexof (ch = regex. charat (0)) == -1) ||  2326                (regex. length () == 2 &amp;&amp;  2327                 regex. charat (0) == '\\\\\\\\' &amp;&amp;  2328                 (((ch = regex. charat (1))-'0')|('9'-ch)) &lt; 0 &amp;&amp;  2329                 ((ch-'a')|('z'-ch)) &lt; 0 &amp;&amp;  2330                 ((ch-'a')|('z'-ch)) &lt; 0)) &amp;&amp;  2331               (ch &lt; character.min_high_surrogate ||  2332                ch > character.max_low_surrogate))  2333           {  2334                int  off = 0;  2335                int  next = 0;  2336                boolean  limited = limit > 0;  2337                arraylist &lt; string  list =  new   arraylist &lt;>();  2338                while  ((next =  indexof (ch  off)) != -1) {  2339                    if  (!limited || list. size () &lt; limit - 1) {  2340                       list. add ( substring (off  next));  2341                       off = next + 1;  2342                   }  else  {    // last one  2343                       //assert (list.size() == limit - 1);  2344                       list. add ( substring (off  value.length));  2345                       off = value.length;  2346                        break ;  2347                   }  2348               }  2349               // if no match was found  return this  2350                if  (off == 0)  2351                    return   new   string []{ this };  2353               // add remaining segment  2354                if  (!limited || list. size () &lt; limit)  2355                   list. add ( substring (off  value.length));  2357               // construct result  2358                int  resultsize = list. size ();  2359                if  (limit == 0) {  2360                    while  (resultsize > 0 &amp;&amp; list. get (resultsize - 1). length () == 0) {  2361                       resultsize--;  2362                   }  2363               }  2364                string [] result =  new   string [resultsize];  2365                return  list. sublist (0  resultsize). toarray (result);  2366           }  2367            return  pattern. compile (regex). split ( this   limit);  2368       }      where you can find          fragment which means         - if   (position from which method should start search next possible match for regex passed as   argument) is  still    after iterating over entire string  this means method didn't find any match  so the string was not split     in that case let's just return an array with the origina/current ( ) string.      since   couldn't be found in   even once    must return an array with one element (empty string on which you invoked  ). this means that the length of this array is  .  "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:36:32 AM",
        "commentid": "a_103911",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " from the  java 1.7 documentation         splits the string around matches of the given regular expression.        split() method works as if by invoking the two-argument split method with the given expression and a limit argument of zero.  trailing empty strings are therefore not included in the resulting array.        in the case 1         so  the length will be  .    in the case 2        expecting a regex as argument  return result array to matching with that regex.    so  the length is       for example ( documentation )        the string  \\\"boo:and:foo\\\"   yields the following results with these expressions:                parameters:       regex - the delimiting regular expression         returns:       the array of strings computed by splitting this string around matches of the given regular expression         throws:       patternsyntaxexception - if the regular expression's syntax is invalid    "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:44:56 AM",
        "commentid": "a_103912",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " from string class  javadoc  for the   method:        splits this string around matches of the given regular expression.          this method works as if by invoking the two-argument split method with the given expression and a limit argument of zero. trailing empty strings are therefore not included in the resulting array.      in the first case  the expression does not match any part of the input so we got an array with only one element - the input.    in the second case  the expression matches input and split should return two empty strings; but  according to javadoc  they are discarded (because they are trailing and empty).  "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:43:06 AM",
        "commentid": "a_103913",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " we can take a look into  the source code of    which is behind  . way down the rabbit hole the method         is invoked.    input      for input   this method is called as          the intersting part of this method is :         and that is what happens:    is returned .    input      for input   the intersting part is          here   and   so    is returned .  "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:54:26 AM",
        "commentid": "a_103914",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " from jdk 1.7         so for this case  the regex will be handled by the first  .    for the first case           so  this function will return an array which contains one element if there is no matched.    for the second case           as you notice  the last while loop has removed all empty element in the end of the list  so the resultsize is  .  "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:35:05 AM",
        "commentid": "a_103915",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": "      case 1 - here   will return   since there is no   in   you get the same  so length will be      case 2- here   will return empty array  you have to scape   if you want to count   with length   else length will be      again   split() expecting a   as argument it will return result array to matching with that  .        the array returned by this method contains each substring of this   string that is terminated by another substring that matches the given   expression or is terminated by the end of the string.      else        if the expression does not match any part of the input then the   resulting array has just one element  namely this string.    "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      },
      {
        "date": "Jul 31, 2014 3:52:26 AM",
        "commentid": "a_103916",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": 0.0,
            "sent": " the api for the split method states that \\\"if the expression does not match any part of the input then the resulting array has just one element  namely this string.\\\"    so  as the string blank doesn't contain a \\\" \\\"  a string[] with one element (i.e. blank itself) is returned.    for the string comma  \\\"nothing\\\" is left of the original string thus an empty array is returned.    this seems to be the best solution if you want to process the returned result  e. g.       "
          }
        ],
        "parent": "q_84818",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 10.0,
        "systemtopicid": 10.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Network",
        "linePolarity": 0.0,
        "sent": " i do not understand the output of this code:         and got the following output:       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Fastest way to sum integers in text file\"",
    "commentid": "q_68311",
    "date": "Sep 1, 2014 6:21:20 AM",
    "children": [
      {
        "date": "Sep 1, 2014 7:28:19 AM",
        "commentid": "a_83223",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " your main bottleneck will be file io. parsing and adding up the numbers should not contribute to the algorithm as that can be done in a separate thread while the file i/o is waiting for the disk.    some years ago i researched how to read from files in the fastest possible way and came across some excellent advice - which i implemented as a scan routine as below:         you may wish to adjust this technique before testing it for speed as it is making use of an interfaced object called a   to hunt for the data.    as you can see the advice was derived in 2008 and there have been many enhancements to java since then so this may not provide an improvement.    added    i have not tested this but this should fit into your tests and use the same technique:       "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 1, 2014 6:32:56 AM",
        "commentid": "a_83224",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": "     why is this so much faster?      creating a string is much more expensive than a little maths.        can we do any better than this by using a mappedbytebuffer help?      a little  yes.  its what i use.  it save a memory to memory copy. i.e. no byte[] is needed.        i have a feeling that the overheads of invoking methods to read from the buffer would slow things down        the methods get inlined if they are simple.        especially when reading backwards from the buffer.      it won't be any slower  in fact parsing forwards is simpler/faster because you use one   instead of two.        would it be better to read the file forwards rather than backwards  but still scan the buffer backwards?       i don't understand why you would need to read backward at all.        the idea would be that you read the first chunk of the file  and then scan backwards  but discarding the half-number at the end. then when you read the next chunk  you set the offset so that you read from the beginning of the number you discarded.      sounds unnecessarily complicated. i would read in a single pass  memory mapping in the entire file in one go.  no need to use chunks unless the file is 2+ gb in size. and even then i would read in one pass.        is there anything i haven't thought of that could make a significant difference?      if the data is in disk cache it will make more difference than anything else.  "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 1, 2014 6:54:31 AM",
        "commentid": "a_83225",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " you can go for a larger buffer size  and a faster coding to string (to unicode).         your method of eliminating string usage  by using a binary inputstream/randomaccessfile is worthwile.    then it might also be nice if the source files were  compressed . under unix one would pick the gzip format  where   uncompresses to  . that would be readable with a  . it has the advantage of overall speed up of file transfer to and from the server's directory.  "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 1, 2014 6:41:24 AM",
        "commentid": "a_83226",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " i think there is another way of doing this.    this is classical multiple process programming problem. in c language there is library mpi that solves this kinds of problems.    the idea of it is to chunk the list of integers for example in 4 parts and every part is summed by different process. after finishing  processes are summed together.    in java this could be done  with threads (pseudo parallel) and java concurrency.    e.g 4 different threads summing 4 different parts of the list. at the end they are summed together.    telephone companies uses grid computers that do this kind of parallel programming technic to sum their transactions.    the only problem here (bottleneck) is the io operation. reading the file will take much time. if somehow you can make multiple threads read  different  parts of the file...  this is very complicated approach and i think that this will not do much good because the disk won't spin faster just because it's used by many threads  but there are other technics of doing similar stuff. you can read more about this here:  access file through multiple threads  and here  reading a single file with multiple thread: should speed up?   "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 5, 2014 8:35:40 AM",
        "commentid": "a_83227",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " based on  this comment : \\\"simply summing up all the bytes is faster\\\"  i propose a variation of the accepted answer.    the accepted answer proposes breaking the problem into chunks  calculating a sum for each chuck using multithreading  and adding them together at the end.    this idea can be used to reduce the number of multiplications to o(1) in the backward scan  without any table lookups and without threading (or combine it with threading).  simply  take advantage of the way multiplication distributes over addition and add all the ones digits into one accumulator  the tens into a separate one   hundreds and thousands into their own accumulators.  this requires no multiplication whatsoever.    the reduce step combining results from multiple threads can also be done using the per-place accumulators.  the final step of calculating the totals will require multiplication (or take advantage of the fact that 10 has only two bits set and use bit shifts and add)  but only 9 multiplications are sufficient.  "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 1, 2014 6:49:24 AM",
        "commentid": "a_83228",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " source:  http://nadeausoftware.com/articles/2008/02/java_tip_how_read_files_quickly         for the best java read performance  there are four things to remember:            minimize i/o operations by reading an array at a time  not a byte at a time. an 8kbyte array is a good size.     minimize method calls by getting data an array at a time  not a byte at a time. use array indexing to get at bytes in the array.     minimize thread synchronization locks if you don't need thread safety. either make fewer method calls to a thread-safe class  or use   a non-thread-safe class like filechannel and mappedbytebuffer.     minimize data copying between the jvm/os  internal buffers  and application arrays. use filechannel with memory mapping  or a direct   or wrapped array bytebuffer.        "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Sep 9, 2014 9:57:18 PM",
        "commentid": "a_83229",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " there are several issues here.      any solution based on reading lines is going to process each character twice. compilers for example don't do this  they read one character at a time and despatch on it directly.   any solution based on   is going to create strings.   you are using different buffer sizes.   you are using different i/o technologies.   in some cases you are using character conversion  while in others you aren't.   you're over-analyzing the file. you don't really care where the white space is  or how much of it there is  as long as it separates the numbers from each other.      my solution:       "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      },
      {
        "date": "Nov 26, 2014 9:48:02 AM",
        "commentid": "a_83230",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.3719999999999999,
            "sent": " separating the task on multiple thread can improve performance  this is known as map-reduce ( http://en.wikipedia.org/wiki/mapreduce ). every thread as a pool of number to sum. when every thread are finished summing the numbers  they shared their results and come up with the answer.  "
          }
        ],
        "parent": "q_68311",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -0.3719999999999999,
        "sent": " question    suppose you have a large ascii text file  with a random non-negative integer on each line  each in the range from 0 to 1 000 000 000. there are 100 000 000 lines in the file. what's the fastest way to read through the file and calculate the sum of all the integers?    constraint: we've got 10mb of ram to work with. the file is 1gb in size  so we don't want to read the whole thing in and then process it.    here are various solutions i've tried. i found the results rather surprising.    is there anything faster that i've missed?     please note:  all timings given below are for running the algorithm  10 times  in total (run once and discard; start timer; run 10 times; stop timer). the machine is a fairly slow core 2 duo.    method 1: the natural approach    the first thing to try is the obvious approach:         note that the maximum possible return value is 10^17  which still easily fits in a    so we don't have to worry about overflows.    on my machine  running this 11 times and discounting the first run takes around  92.9 seconds .    method 2: a minor tweak    inspired by a comment on  this question   i tried not creating a new   to store the result of parsing the line  and instead just to add the parsed value directly to  . so this:         becomes this:         i was certain that this wouldn't make any difference  and thought it highly likely that the compiler would generate the same bytecode for the two versions. but  to my surprise  it did shave a little time off: we're down to  92.1 seconds .    method 3: manually parsing the integer    one thing that bothers me about the code so far is that we turn the   into an    and then add it on at the end. might it not be quicker to add on as we go? what happens if we parse the   ourselves? something like this...         this  i thought  might save a little time  especially with some bitshift optimisations for doing the multiplication. but the overheads of converting to a character array must swamp any gains: this now takes  148.2 seconds .    method 4: processing in binary    one last thing we can try is to process the file as binary data.    parsing an integer from the front is awkward if you don't know the length of it. parsing it backwards is much easier: the first digit you encounter is units  the next one is tens  and so on. so the easiest way to approach the whole thing is to read the file backwards.    if we allocate a   buffer of (say) 8mb  we can fill it up with the last 8mb of the file  process it  then read the preceding 8mb  and so on. we need to be a little careful that we don't screw up a number that we're in the middle of parsing when we move to the next block  but that's the only problem.    when we encounter a digit  we add it (suitably multiplied according to its position in the numeral) to the total  and then multiply the coefficient by 10 so we're ready for the next digit. if we encounter anything that isn't a digit (a cr or lf)  we just reset the coefficient.         this runs in  30.8 seconds ! that's a  speed increase by a factor of 3  over the previous best.    follow-up questions       why is this so much faster?  i was expecting it to win  but not quite so impressively. is it mainly the overheads of converting to a  ? and all the worrying behind the scenes about character sets and the like?   can we do any better than this by using a   to help? i have a feeling that the overheads of invoking methods to read from the buffer would slow things down  especially when reading backwards from the buffer.   would it be better to read the file forwards rather than backwards  but still scan the buffer backwards? the idea would be that you read the first chunk of the file  and then scan backwards  but discarding the half-number at the end. then when you read the next chunk  you set the offset so that you read from the beginning of the number you discarded.   is there anything i haven't thought of that could make a significant difference?      update: more surprising results    first  an observation. it should have occurred to me before  but i think the reason for the inefficiency of the  -based reading is not so much the time taken to create all the   objects but the fact that they are so short-lived: we've got 100 000 000 of them for the garbage collector to deal with. that is bound to upset it.    now some experiments based on answers/comments people have posted.    am i cheating with the size of the buffer?    one suggestion was that since a   uses a default buffer of 16kb  and i've used a buffer of 8mb  i'm not comparing like with like. it's bound to be faster if you use a bigger buffer.    here's the shock. the   method (method 4) ran in 30.8 seconds yesterday with an 8mb buffer. today  code unchanged  the wind direction has changed and we're at 30.4 seconds. if i drop the buffer size down to 16kb to see how much slower it gets   it gets faster!  it now runs in  23.7 seconds . crazy. who saw that one coming?!    a bit of experimentation suggests that 16kb is about optimal. perhaps the java guys did the same experiments  and that's why they went with 16kb!    is the problem i/o-bound?    i wondered about this too. how much time is spent on disk access  and how much on number crunching? if it's almost all disk access  as suggested by a well-supported comment on one of the proposed answers  then we won't be able to make much improvement whatever we do.    this is easy to test by running the code with all the parsing and number crunching commented out  but with the reading still intact:         this now runs in  3.7 seconds ! this doesn't look i/o-bound to me.    of course  some of the i/o speed will come from disk cache hits. but that isn't really the point here: we're still taking 20 seconds of cpu time (also confirmed using linux's   command)  which is plenty big enough to try to reduce it.    scanning forwards instead of backwards    i'd maintained in my original post that there was good reason to scan the file backwards rather than forwards. i didn't explain that very well. the idea was that if you scan a number forwards  you have to accumulate the total value of the scanned number  and then add it on. if you scan backwards  you can add it to the cumulative total as you go. my subconscious was making some sort of sense to itself (on which more later)  but i'd missed one key point  which was pointed out in one of the answers: to scan backwards  i was doing two multiplications per iteration  but with scanning forwards you need only one. so i coded up a forward-scanning version:         this runs in  20.0 seconds   beating the backward-scanning version by a distance. nice.    multiplication cache    what i realised during the night  though  was that although i was performing two multiplications per iteration  there was the possibility of using a cache to store these multiplications  so that i could avoid having to perform them during backwards iteration. i was pleased to see when i woke up that someone had had the same idea!    the point is that there are at most 10 digits in the numbers we're scanning  and only 10 possible digits  so only 100 possibilities for the value of a digit to the cumulative total. we can precompute these  and then use them in the backward-scanning code. that ought to beat the forward-scanning version  because we've now got rid of the multiplications entirely. (note that we can't do this with forward scanning  because the multiplication is of the accumulator  which could take any value up to 10^9. it's only in the backward case that both operands are limited to a few possibilities.)         this runs in  26.1 seconds . disappointing  to say the least. reading backwards is less efficient in terms of i/o  but we've seen that i/o is not the major headache here. i had expected this to make a big positive difference. perhaps the array lookup is just as expensive as the multiplications we've replaced. (i did try making the array 16x16  and using bitshifts to index  but it didn't help.)    looks like forward scanning is where it's at.    using a mappedbytebuffer    next thing to add in is a    to see if that's more efficient than using a raw  . it doesn't need much change to the code.         this does seem to improve things a little: we're now at  19.0 seconds . we've taken another second off our personal best!    what about multi-threading?    one of the proposed answers involves using multiple cores. i'm a little ashamed that that hadn't occurred to me!    the answer came in for some stick  because of the assumption that it's an i/o-bound problem. this seems a little harsh  in light of the results about i/o! certainly worth a try  in any case.    we'll do this using fork/join. here's a class to represent the result of a computation on part of the file  bearing in mind that there might be a partial result to the left (if we started half way through a number)  and a partial result to the right (if the buffer finished half way through a number). the class also has a method for allowing us to glue two such results together  into a combined result for two adjacent sub-tasks.         now the key bit: the   that computes the result. for small problems (less than 64 characters)  it calls   to calculate the result in a single thread; for larger problems  it splits into two  solves the two sub-problems in separate threads  and then combines the results.         note that this is operating on a    rather than the whole  . the reason for that is that we want to keep the disk access sequential. we'll take quite large chunks  fork/join  and then move to the next chunk.    here's the method that does that. note that we've pushed the buffer size up to 1mb (sub-optimal earlier  but more sensible here  it seems).         now here's the soul-destroying disappointment: this nicely multi-threaded code now takes  32.2 seconds . why so slow? i spent quite a while debugging this  assuming i'd done something terribly wrong.    turns out there was just one small tweak needed. i'd thought the threshold of 64 between small problem and big problem was a reasonable one; turns out that was totally ridiculous.    think about it like this. the sub-problems are exactly the same size  so they should complete in pretty much the same time. so there's really no point splitting into more pieces than there are processors available. on the machine i'm using  with only two cores  going down to a threshold of 64 is ridiculous: it just adds more overhead.    now you don't want to limit things so that it only uses two cores even when there are more available. perhaps the right thing to do would be to find out the number of processors at runtime  and split into that many pieces.    in any case  if i change the threshold to 512kb (half the buffer size)  it now completes in  13.3 seconds . going down to 128kb or 64kb would allow more cores to be used (up to 8 or 16 respectively)  and doesn't significantly affect the runtime.    so multi-threading  does  make a big difference.    it's been quite a long journey  but we started out with something that took 92.9 seconds and we're now down to 13.3 seconds... that's  seven times the speed  of the original code. and that's not by improving the asymptotic (big-oh) time complexity  which was linear (optimal) right from the start... this has all been about improving the constant factor.    a good day's work.    postscript: generating the file of random numbers    i generated the random numbers with the following code  which i ran and redirected to a file. obviously i can't guarantee that you'll end up with exactly the same random numbers that i had :)       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Are the bit patterns of NaNs really hardware-dependent?\"",
    "commentid": "q_85007",
    "date": "Jul 30, 2014 7:56:13 PM",
    "children": [
      {
        "date": "Jul 30, 2014 10:57:52 PM",
        "commentid": "a_104172",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.17199999999999993,
            "sent": " this is what  ?2.3.2 of the jvm 7 spec  has to say about it:        the elements of the double value set are exactly the values that can be represented   using the double floating-point format defined in the ieee 754 standard  except   that there is only one nan value (ieee 754 specifies 2 53 -2 distinct nan values).      and  ?2.8.1 :        the java virtual machine has no signaling nan value.      so technically there is only one nan. but  ?4.2.3 of the jls  also says (right after your quote):        for the most part  the java se platform treats nan values of a given type as though collapsed into a single canonical value  and hence this specification normally refers to an arbitrary nan as though to a canonical value.        however  version 1.3 of the java se platform introduced methods enabling the programmer to distinguish between nan values: the float.floattorawintbits and double.doubletorawlongbits methods. the interested reader is referred to the specifications for the float and double classes for more information.      which i take to mean exactly what you and  candiedorange  propose: it is dependent on the underlying processor  but java treats them all the same.    but it gets better: apparently  it is entirely possible that your nan values are silently converted to different nans  as described in    :        note that this method may not be able to return a double nan with exactly same bit pattern as the long argument. ieee 754 distinguishes between two kinds of nans  quiet nans and signaling nans. the differences between the two kinds of nan are generally not visible in java. arithmetic operations on signaling nans turn them into quiet nans with a different  but often similar  bit pattern. however  on some processors merely copying a signaling nan also performs that conversion. in particular  copying a signaling nan to return it to the calling method may perform this conversion. so longbitstodouble may not be able to return a double with a signaling nan bit pattern. consequently  for some long values  doubletorawlongbits(longbitstodouble(start)) may not equal start. moreover  which particular bit patterns represent signaling nans is platform dependent; although all nan bit patterns  quiet or signaling  must be in the nan range identified above.      for reference  there is a table of the hardware-dependant nans  here . in summary:         so  to verify this you would really need one of these processors and go try it out. also any insights on how to interpret the longer values for the power and alpha architectures are welcome.  "
          }
        ],
        "parent": "q_85007",
        "author": "blank"
      },
      {
        "date": "Jul 30, 2014 8:49:38 PM",
        "commentid": "a_104173",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.17199999999999993,
            "sent": " the way i read the jls here the exact bit value of a nan is dependent on who/what made it and since the jvm didn't make it  don't ask them.  you might as well ask them what an \\\"error code 4\\\" string means.       the hardware produces different bit patterns meant to represent different kinds of nan's.  unfortunately the different kinds hardware produce different bit patterns for the same kinds of nan's.  fortunately there is a standard pattern that java can use to at least tell that it is some kind of nan.      it's like java looked at the \\\"error code 4\\\" string and said  \\\"we don't know what 'code 4' means on your hardware  but there was the word 'error' in that string  so we think it's an error.\\\"    the jls tries to give you a chance to figure it out on your own though:    \\\"however  version 1.3 of the java se platform introduced methods enabling the programmer to distinguish between nan values: the float.floattorawintbits and double.doubletorawlongbits methods. the interested reader is referred to the specifications for the float and double classes for more information.\\\"    which looks to me like a c++ reinterpret cast.  it's java giving you a chance to analyze the nan yourself in case you happen to know how its signal was encoded.  if you want to track down the hardware specs so you can predict what different events should produce which nan bit patterns you are free to do so but you are outside the uniformity the jvm was meant to give us.  so expect it might change from hardware to hardware.    when testing if a number is nan we check if it's equal to itself since it's the only number that isn't.  this isn't to say that the bits are different.  before comparing the bits the jvm tests for the many bit patterns that say it's a nan.  if it's any of those patterns then it reports that it's not equal  even if the bits of the two operands really are the same (and even if they're different).      back in 1964  when pressed to give an exact definition for pornography  u.s. supreme court justice stewart famously said  ?i know it when i see it?.  i think of java as doing the same thing with nan's.  java can't tell you anything that a \\\"signaling\\\" nan might be signaling cause it doesn't know how that signal was encoded.  but it can look at the bits and tell it's a nan of some kind since that pattern follows one standard.      if you happen to be on hardware that encodes all nan's with uniform bits you'll never prove that java is doing anything to make nan's have uniform bits.  again  the way i read the jls  they are outright saying you are on your own here.    i can see why this feels flaky.  it is flaky.  it's just not java's fault.  i'll lay odds that some where out there some enterprising hardware manufactures came up with wonderfully expressive signaling nan bit patterns but they failed to get it adopted as a standard widely enough that java can count on it.  that's what's flaky.  we have all these bits reserved for signalling what kind of nan we have and can't use them because we don't agree what they mean.  having java beat nan's into a uniform value after the hardware makes them would only destroy that information  harm performance  and the only payoff is to not seem flaky.  given the situation  i'm glad they realized they could cheat their way out of the problem and define nan as not being equal to anything.  "
          }
        ],
        "parent": "q_85007",
        "author": "blank"
      },
      {
        "date": "Jul 30, 2014 10:43:01 PM",
        "commentid": "a_104174",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.17199999999999993,
            "sent": " here is a program demonstrating different nan bit patterns:         output:         regardless of what the hardware does  the program can itself create nans that may not be the same as e.g.    and may have some meaning in the program.  "
          }
        ],
        "parent": "q_85007",
        "author": "blank"
      },
      {
        "date": "Aug 5, 2014 5:32:37 PM",
        "commentid": "a_104175",
        "sent": [
          {
            "topicid": 5,
            "systemtopicid": 5,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Variables",
            "linePolarity": -0.17199999999999993,
            "sent": " the only other   value that i could generate with normal arithmetic operations so far is the same but with the sign changed:         output:       "
          }
        ],
        "parent": "q_85007",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 5.0,
        "systemtopicid": 5.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Variables",
        "linePolarity": -0.17199999999999993,
        "sent": " i was reading about floating-point nan values in the java language specification (i'm boring). a 32-bit   has this bit format:           is the sign bit    are the exponent bits  and   are the mantissa bits. a nan value is encoded as an exponent of all 1s and the mantissa bits are not all 0 (which would be +/- infinity). this means that there are lots of different possible nan values (having different   and   bit values).    on this   jls ?4.2.3  says:        ieee 754 allows multiple distinct nan values for each of its single and double floating-point formats. while each hardware architecture returns a particular bit pattern for nan when a new nan is generated  a programmer can also create nans with different bit patterns to encode  for example  retrospective diagnostic information.      the text in the jls seems to imply that the result of  for example     has a hardware-dependent bit pattern  and depending on whether that expression was computed as a compile time constant  the hardware it is dependent on might be the hardware the java program was compiled on or the hardware the program was run on. this all seems  very  flaky if true.    i ran the following test:         the output on my machine is:         the output indicates that the exponent bits are 1 as expected. the upper bit of the mantissa is also 1  which for nans apparently indicates a 'quiet nan' as opposed to a 'signalling nan' ( https://en.wikipedia.org/wiki/nan#floating_point ). the sign bit and the rest of the mantissa bits are 0. the output also indicates that there was no difference between the nans generated on my machine and the constant nans from the float and double classes.    my question is  is that output guaranteed in java  regardless of the cpu of the compiler or vm  or is it all genuinely unpredictable? the jls is mysterious about this.    if that output is guaranteed for    are there any arithmetic ways of producing nans that have other (possibly hardware-dependent?) bit patterns? (i know i could use  /  to encode other nans deliberately  but i would like to know if other values can occur from normal arithmetic.)       a followup question: i've noticed that  float.nan  and  double.nan  specify their exact bit pattern  but in the source ( float    double ) they are generated by 0.0/0.0. if that result is really dependent on the hardware of the compiler  the spec is wrong  right  and can't actually make that guarantee?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"JIT not optimizing loop that involves Integer.MAX_VALUE\"",
    "commentid": "q_76669",
    "date": "Aug 15, 2014 5:26:56 AM",
    "children": [
      {
        "date": "Aug 15, 2014 5:32:50 AM",
        "commentid": "a_93580",
        "sent": [
          {
            "topicid": 4,
            "systemtopicid": 4,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "MultiThreading",
            "linePolarity": -0.3600000000000001,
            "sent": " i have not dug up the java language specification  but i'd guess that it has to do with this difference:         never overflows. once   reaches   it is incremented to   and then the loop terminates.       contains an integer overflow. once   reaches    it is incremented by one causing an overflow and  then  the loop terminates.       i assume that the jit compiler is \\\"reluctant\\\" to optimize-out loops with such corner conditions - there was a  whole bunch of bugs  w.r.t. loop optimization in integer overflow conditions  so that reluctance is probably quite warranted.    there may also be some hard requirement that does not allow integer overflows to be optimized-out  although i somehow doubt that since integer overflows are not directly detectable or otherwise handled in java.  "
          }
        ],
        "parent": "q_76669",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 4.0,
        "systemtopicid": 4.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "MultiThreading",
        "linePolarity": -0.3600000000000001,
        "sent": " while writing an answer to  another question   i noticed a strange border case for jit optimization.     the following program is  not  a \\\"microbenchmark\\\" and  not  intended to reliably measure an execution time (as pointed out in the answers to the other question). it is solely intended as an  mcve  to reproduce the issue:         it basically runs the same loop     where the limit   is once set to    and once to  .     when executing this on win7/64 with jdk 1.7.0_21 and          the timing results are as follows:         obviously  for the case of    the jit does what one could expect: it detects that the loop is useless  and completely eliminates it. however  it does  not  remove the loop when it is running up to  .     this observation is confirmed by a look at the jit assembly output when starting with          the log contains the following assembly for the method that runs up to  :         one can clearly see the loop  with the comparison to   and the jump back to  . in contrast to that  the assembly for the case where it is running up to  :         so my question is: what is so special about the   that prevents the jit from optimizing it in the same way as it does for  ? my guess would be that has to do with the   instruction  which is intended for  signed  arithmetic  but that alone is not really a convincing reason. can anybody explain this  and maybe even give a pointer to the openjdk hotspot code where this case is treated?    (an aside: i hope that the answer will also explain the different behavior between   and   that was asked for in the other question  assuming that the reason for the missing optimization is (obviously)  actually  caused by the   loop limit)  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why does =+ not cause a compile error?\"",
    "commentid": "q_10739",
    "date": "Dec 8, 2014 8:43:50 PM",
    "children": [
      {
        "date": "Dec 8, 2014 8:45:16 PM",
        "commentid": "a_13014",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.0,
            "sent": " there's no compilation error because   is a valid (albeit fairly useless)  unary operator  in the same way that   is:         the relevant section in the java language specification is  unary plus operator + (?15.15.3 ) . it specifies that invoking the unary   operation results in  unary numeric promotion (?5.6.1)  of the operand. this means that:             if the operand is of compile-time type          or    it is subjected to unboxing conversion   ( ?5.1.8 ).   the result is then promoted to a value of type   by a widening   primitive conversion   ( ?5.1.2 )   or an identity conversion   ( ?5.1.1 ).       otherwise  if the operand is of compile-time type       or    it is subjected to unboxing conversion   ( ?5.1.8 ).       otherwise  if the operand is of compile-time type       or    it is promoted to a value of type   by a widening   primitive conversion   ( ?5.1.2 ).       otherwise  a unary numeric operand remains as is and is not converted.             in any case  value set conversion   ( ?5.1.13 )   is then applied.      in short: numeric primitive wrapper types are unboxed  and integer types smaller than   are widened to  .  "
          }
        ],
        "parent": "q_10739",
        "author": "blank"
      },
      {
        "date": "Dec 8, 2014 9:10:42 PM",
        "commentid": "a_13015",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": 0.0,
            "sent": " there may be a bug lurking here. the writer may have intended to write      in the original version of c    and   were synonyms. if you meant    you had to be careful to leave a space between the   and the  . same with all the other operators.   multiplied a by p.   de-referenced the pointer p and assigned the result to a.    then they came to their senses  and started giving warnings for   where   was probably intended  and now no longer accept   at all.    but old habits die hard. an old-school c programmer might might still absent-mindedly use old-school syntax  even when writing in a language other than c.    on the other hand  the   in   is an initialization  not an assignment  and it would be bizarre for a programmer to think in terms of incrementing a variable that is only just now being given its initial value.  "
          }
        ],
        "parent": "q_10739",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": 0.0,
        "sent": " came across someone mistakenly using    instead of    in their code and it didn't show up as a compile error.    is this because         is the same as         ?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Math.pow yields different result depending on java version\"",
    "commentid": "q_74342",
    "date": "Aug 20, 2014 4:56:33 AM",
    "children": [
      {
        "date": "Aug 20, 2014 5:12:56 AM",
        "commentid": "a_90735",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.8559999999999999,
            "sent": "     but was there a change in the java spec that causes the difference?      no. *   according to the javadocs for      a difference of up to one ulp (unit in the last place) is permitted.  if we take a look at your two values:         we get:         which indeed differ by one ulp.    what you're seeing is probably due to slight differences in the sequence of floating-point instructions used by the jdk/jvm to implement these operations.       * at least  not so far as i know!   "
          }
        ],
        "parent": "q_74342",
        "author": "blank"
      },
      {
        "date": "Aug 21, 2014 3:14:04 AM",
        "commentid": "a_90736",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.8559999999999999,
            "sent": " there was no change in the spec  but there have been some changes in the hotspot optimizer that  might  (!) be related to this.     i dug up these code parts:      from update 25:  vm/opto/library_call.cpp : inline_pow    from update 40:  vm/opto/library_call.cpp : inline_pow       (these are not exactly the versions where these changes have been  introduced   i just picked them because of the version information that you provided).     the changes (and what the code is doing at all) are far beyond what i can analyze in reasonable time  but maybe someone finds this reference interesting or useful.   "
          }
        ],
        "parent": "q_74342",
        "author": "blank"
      },
      {
        "date": "Aug 20, 2014 5:31:23 AM",
        "commentid": "a_90737",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.8559999999999999,
            "sent": " if you want repeatable floating point values between jvms you can use the strictfp keyword  see following question  when should i use the &quot;strictfp&quot; keyword in java?   "
          }
        ],
        "parent": "q_74342",
        "author": "blank"
      },
      {
        "date": "Sep 1, 2014 1:06:25 AM",
        "commentid": "a_90738",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.8559999999999999,
            "sent": " to produce consistent results between all java versions  the solution was to use   instead of  .    for background information on what might cause the difference  refer to  this answer .  "
          }
        ],
        "parent": "q_74342",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.8559999999999999,
        "sent": " i'm running the following code on a jdk version 1.7.0_60:         the result is: 1.1567055833133086    i'm running exactly the same code on a jdk version 1.7.0.    the result is: 1.1567055833133089    i understand that double is not infinitely precise  but was there a change in the java spec that causes the difference?    ps: because we use a legacy system  big decimal is not an option.    edit: i was able to track down the time of the change: it was introduced in the jdk version 1.7.0_40 (as compared to version 1.7.0_25).  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"NoClassDefFoundError: android.support.v7.internal.view.menu.MenuBuilder\"",
    "commentid": "q_92285",
    "date": "Jul 17, 2014 10:07:53 AM",
    "children": [
      {
        "date": "Oct 29, 2014 2:58:59 PM",
        "commentid": "a_113135",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.26,
            "sent": " edit:    the solution that worked for me was (using proguard) to replace this:         with this:         credit goes to the google group:   https://code.google.com/p/android/issues/detail?id=78377  #138    old answer (temporary workaround): it happens in a project where i use an  spinner in the  actionbar. my solution was to check for those conditions and change the app flow:         then in the activity's oncreate method:         as pointed out this is not a definitive solution  it is just a way to allow users to have access to limited functionality while a more permanent solution is found.   "
          }
        ],
        "parent": "q_92285",
        "author": "blank"
      },
      {
        "date": "Dec 2, 2014 9:25:39 AM",
        "commentid": "a_113136",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.26,
            "sent": " on which device you are facing this problem ? (samsung/htc etc.)    if it is samsung     various samsung phones are included older versions of the android support library in the framework or classpath. if you use the new material support library  you'll see this crash on those samsung devices:         to fix this  you must rename that class. easiest way to do that is by running proguard. if you don't want to obfuscate  here's a 1 liner to rename just the offending classes:         there's an issue tracking this problem  but since it's really a samsung bug  it's never going to get fixed on their end. only way to fix it on the google/aosp side is to rename these internal classes.     https://code.google.com/p/android/issues/detail?id=78377   "
          }
        ],
        "parent": "q_92285",
        "author": "blank"
      },
      {
        "date": "Jul 17, 2014 10:39:41 AM",
        "commentid": "a_113137",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.26,
            "sent": " yes. samsung already knows about  this  problem. i can suggest you try to using same implementation of popup from  github . it is not best way  but will be works.  "
          }
        ],
        "parent": "q_92285",
        "author": "blank"
      },
      {
        "date": "Nov 12, 2014 4:19:19 PM",
        "commentid": "a_113138",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.26,
            "sent": " i enabled proguard with the default proguard properties provided with an eclipse project and the problem was fixed for me. based on some comments here  https://code.google.com/p/android/issues/detail?id=78377    some people might have to repackage using: -repackageclasses \\\"android.support.v7\\\"  "
          }
        ],
        "parent": "q_92285",
        "author": "blank"
      },
      {
        "date": "Dec 24, 2014 10:55:50 PM",
        "commentid": "a_113139",
        "sent": [
          {
            "topicid": 1,
            "systemtopicid": 1,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Android",
            "linePolarity": -0.26,
            "sent": " as #150 from  https://code.google.com/p/android/issues/detail?id=78377  said        because careful with -keep class   !android.support.v7.internal.view.menu.**. there are a number of   classes in there which are referenced from the appcompat's resources.      the better solution is add the following lines instead:       "
          }
        ],
        "parent": "q_92285",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 1.0,
        "systemtopicid": 1.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Android",
        "linePolarity": -0.26,
        "sent": " there is an issue with the android appcompat v7 library on samsung devices running android 4.2. i keep getting crashes with the following stack trace in my developer console:         this is line 215 of customactivity.java:         the crashes come from an array of devices  but always samsung  and always android 4.2.    a quick web search leads me to believe that many people have the same issue  some of the steps i have tried to solve the issue are:      check the android project properties  make sure the appcompat library is added properly.   check the java build path order and export project properties  make sure android dependencies and android private libraries is checked.   confirm the class is included in the library (android.support.v7.internal.view.menu.menubuilder).   confirm r.java is located in gen directory for android.support.v7.appcompat.   confirm the appcompat theme is included in the manifest.xml activity.   clean and rebuild project.      despite these steps  and despite it working on all other devices and android versions the crash reports still come through.  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Assigning List of Integer Into a List of String\"",
    "commentid": "q_74435",
    "date": "Aug 20, 2014 2:01:20 AM",
    "children": [
      {
        "date": "Aug 20, 2014 2:12:35 AM",
        "commentid": "a_90859",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": -1.076,
            "sent": " you are not getting any compile time error because by using   in a raw way :           you are practically telling the compiler to disable generic type checkings because you don't care.     so the :          becomes       for the compiler.    you can try the following :     and you'll notice immediately that the compiler becomes aware of the generics bad use  and it will show you the error :         also  if you try to get the class of the 2nd position object at runtime:            you'll get an error:  .  "
          }
        ],
        "parent": "q_74435",
        "author": "blank"
      },
      {
        "date": "Aug 20, 2014 2:13:10 AM",
        "commentid": "a_90860",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": -1.076,
            "sent": " you have mixed generic with  raw type . it will compile fine but at run-time it might fail because generic information is lost at run-time.     generic should be used to track such bugs at compile-time.    it's better explained at  what is a raw type and why shouldn't we use it?  in detail.        warning:  type safety: the method   belongs to the raw type  . references to generic type   should be   parameterized.    if you have two methods with same name with different generic type of list then it results into compile time error. the compiler is unable to resolve generic type in case of method arguments that can be proved by below sample code.    sample code: (compiler error - not a valid overloaded method)            make some changes and try it again:            create methods in such a way       "
          }
        ],
        "parent": "q_74435",
        "author": "blank"
      },
      {
        "date": "Aug 20, 2014 2:54:51 AM",
        "commentid": "a_90861",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": -1.076,
            "sent": " this happens  because (quite surprisingly for me) you have turned off generic type checking for the  whole    class.    you need to be aware that you are  first of all  constructing a generic class without type argument here:         and appereantly  because of this  your following code:         got refined to:         note that    also  became a raw type  which is rather surprising to me.    you can find the full answer here  referencing the jls:  http://stackoverflow.com/a/662257/2057294  as explained by jon skeet.    i think it is fair that this happens (though not what you would expect)  because if you decide to use raw types  it is assumed that you are using java 4 or lower and have no access at all to generics either way  so it may as well not provide them for methods not involving the generic type from the class that got erased.  "
          }
        ],
        "parent": "q_74435",
        "author": "blank"
      },
      {
        "date": "Aug 20, 2014 2:22:45 AM",
        "commentid": "a_90862",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": -1.076,
            "sent": " to add to the other answers.    indeed you are mixing a raw (unparameterized) type with parameterized types which causes a type loss and an apparently correct argument passing to   when type safety checks should not allow you to.     the question remains on  why  the   type is lost in an unparameterized   object. the reason the compiler \\\"disables\\\" type checking in your case is the  type erasure  mechanism  which says  (in simple terms) your raw object belongs to a class with the following contents:         which as you see does not make any type checks  whatsoever  on the contents of the list being passed (it erases type parameters  everywhere ). even more  type erasure also erases your parameterized type from the   variable  which makes it completely suitable as an argument for your   method.    therefore  as others pointed out  it's always best to help java maintain its safe type-checking mechanisms intact:         but then again if you do  the compiler does its job and goes bazooka on you.    read more on type erasure  here . it's a nice feature that allows generic type checking while still keeping backward compatibility to pre-generics java versions.  "
          }
        ],
        "parent": "q_74435",
        "author": "blank"
      },
      {
        "date": "Aug 26, 2014 8:10:39 PM",
        "commentid": "a_90863",
        "sent": [
          {
            "topicid": 10,
            "systemtopicid": 10,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Network",
            "linePolarity": -1.076,
            "sent": "      when you write  just after the class name.it specifies the type parameters.its a generic functionality.this introduces the type variable  e  that can be used anywhere inside the class.  a type variable can be any non-primitive type you specify: any class type  any interface type  any array type  or even another type variable.  "
          }
        ],
        "parent": "q_74435",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 10.0,
        "systemtopicid": 10.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Network",
        "linePolarity": -1.076,
        "sent": " i was learning generics in java and i came close to a very interesting piece of code. i know in java it is illegal to add list of one type to another.         so in the second line i get a compile time error.  but if i create a generic method inside a class like this          and in the main class call the method with list of integer i am not getting any error.         output             100             foo    why i am not getting any error?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Is it possible to use multiple view resolvers in Spring?\"",
    "commentid": "q_83801",
    "date": "Aug 1, 2014 9:53:06 PM",
    "children": [
      {
        "date": "Aug 1, 2014 10:00:52 PM",
        "commentid": "a_102568",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": 0.18000000000000016,
            "sent": " you absolutely can.   has a single method      which returns        the view object  or  null if not found  (optional  to allow for viewresolver chaining)      your   beans are registered. when a view name is returned by a handler  spring will iterate through each    invoking their   method with the given name. if the method returns non   that   is used. if   is returned  then it continues iterating.    so the implementation has to return   if spring is to skip it.    there are some implementations that never return  . this seems to be the case with your custom   classes. if the   returns a    even if that   will eventually fail to be rendered  spring will use it.    you either need to fix that or order your   beans. for example  you can order them with the   interface. have your classes implement that interface and return an appropriate value.  "
          }
        ],
        "parent": "q_83801",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": 0.18000000000000016,
        "sent": " i have multiple view resolvers in my spring configuration and i wanted to use different view resolvers depending on conditions.     example for urls started with  . i wanted to use birt view resolver and for ajax calls use tiles resolver and so on.    i tried setting order property but all views are resolved by tilesviewresolver       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Android buildscript repositories. jcenter VS mavencentral\"",
    "commentid": "q_90987",
    "date": "Jul 20, 2014 8:51:34 AM",
    "children": [
      {
        "date": "Jul 23, 2014 5:14:08 AM",
        "commentid": "a_111510",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.33199999999999985,
            "sent": " i was wondering the same  and i don't have a definitive answer but figured it might be worth sharing what (little) i'd learned. i found mention of the move from maven central to jcenter  within one issue  on google code   but didn't spot details about exactly when this happened - couldn't find mention in the recent changes list for android studio.     from reading up on jcenter  it is the repository behind bintray  from the company jfrog (who i've come across before  and i guess that's where the 'j' comes from). according to the bintray blog   bintray is a superset of maven central   so if that's true there shouldn't be issues with missing dependencies  but i guess it's going to depend on exactly what you're using in your projects - you could always directly check the repos as both have nice easily-searchable websites. so for who maintains these repos  as best i know  it's up to the producers of the dependencies to add their dependencies to each repo  and up to the repo owner just to maintain the service.     in terms of when to switch it is difficult to work out. aosp is still using maven central i think (from looking in templates for new android application)  but then that template is also still using a very old gradle version (0.4) as well. there's a couple of issues about others having issues with dependencies from jcenter  but not really a lot reported  and it is possible that google will switch again to some other repo before releasing as final. if maven central is still working fine for you for now you could hold off switching until then especially if you're building large commercial solutions.  "
          }
        ],
        "parent": "q_90987",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.33199999999999985,
        "sent": " the last time i used android studio  it generated   files with   buildscript repositories whereas now there's  .     could anyone explain the issues connected with this. are there any other repos? when should we switch them? what impact do they have on projects  modules  libs? any other essentials for android developers?    who's responsible for maintaining those repos?    regards   "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"How to enable index downloads in Eclipse for Maven search?\"",
    "commentid": "q_109418",
    "date": "Jun 16, 2014 2:10:24 PM",
    "children": [
      {
        "date": "Jun 30, 2014 8:46:23 AM",
        "commentid": "a_134274",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.6680000000000001,
            "sent": " in eclipse click on \\\"windows\\\" --> \\\"preferences\\\" and choose maven in the left side.    now you have to check the box \\\"download repository index updates on startup\\\"    click ok and the warning should be gone.    then you should restar eclipse.    i'm not sure  but maybe you have also to enable the download artifact sources to get the results you want to find.       "
          }
        ],
        "parent": "q_109418",
        "author": "blank"
      },
      {
        "date": "Jul 20, 2014 2:45:42 PM",
        "commentid": "a_134275",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.6680000000000001,
            "sent": " tick 'full index enabled' and then 'rebuild index' of the central repository in 'global repositories' under    and it should work.    the rebuilding may take a long time depending on the speed of your internet connection  but eventually it works.  "
          }
        ],
        "parent": "q_109418",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.6680000000000001,
        "sent": " i am using eclipse luna with the m2e plug-in. when i am searching for some dependency  i get the warning (and see screenshot):        index downloads are disabled  search result may be incomplete.      how can i enable index downloads?       "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Why is hashCode slower than a similar method?\"",
    "commentid": "q_110289",
    "date": "Jun 14, 2014 11:32:27 AM",
    "children": [
      {
        "date": "Jun 21, 2014 5:59:35 AM",
        "commentid": "a_135248",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.35599999999999987,
            "sent": "   is defined in    so defining it in your own class doesn't do much at all. (still it's a defined method but it makes no difference)    jit has several ways to optimize call sites (in this case  ):      no overrides - static call (no virtual at all) - best case scenario with full optimizations   2 sites - bytebuffer for instance: exact type check and then static dispatch. the type check is very simple but depending on the usage it may or may not be predicted by the hardware.   inline caches - when few different class instances have been used in the caller body  it's possible to keep them inlined too - that's it some methods might be inlined  some may be called via virtual tables. inline budget is not very high.  this is exactly the case in the question - a different method not named hashcode() would feature the inline caches as there are only four implementations  instead of the v-table    adding more classes going through that caller body results in real virtual call as the compiler gives up.      the virtual calls are not inlined and require an indirection through the table of virtual methods and virtually ensured cache miss. the lack of inlining actually requires full function stubs with parameters passed through the stack. overall when the real performance killer is the inability to inline and apply optimizations.     please note:  calling   of any class extending base is the same as calling   and this is how it compiles in the bytecode  if you add an explicit hashcode in base that would limit the potential call targets invoking  .    way too many classes (in jdk itself) have   overridden so in cases on not inlined hashmap alike structures the invocation is performed via vtable - i.e. slow.    as extra bonus: while loading new classes the jit has to deoptimize existing call sites.         i may try to look up some sources  if anyone is interested in further reading   "
          }
        ],
        "parent": "q_110289",
        "author": "blank"
      },
      {
        "date": "Jun 21, 2014 2:05:19 AM",
        "commentid": "a_135249",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.35599999999999987,
            "sent": " i can confirm the findings. see these results (recompilations omitted):         the results are obtained by calling methods of class   repeatedly. method   is identical to    both of which just return an int field.    now  the interesting part: if the following method is added to class base         execution times for   aren't different from those for   any more.    base.java:         suba.java:       "
          }
        ],
        "parent": "q_110289",
        "author": "blank"
      },
      {
        "date": "Sep 9, 2014 10:08:32 AM",
        "commentid": "a_135250",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.35599999999999987,
            "sent": " this is a known performance issue:  https://bugs.openjdk.java.net/browse/jdk-8014447   it has been fixed in jdk 8.  "
          }
        ],
        "parent": "q_110289",
        "author": "blank"
      },
      {
        "date": "Jun 25, 2014 12:27:02 PM",
        "commentid": "a_135251",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.35599999999999987,
            "sent": " i was looking at your invariants for your test. it has   set to 0. according to  this  slideshow (slide 37) that means   will use a random number generator. that might be why the jit compiler is less interested in optimising calls to   as it considers it likely it may have to resort to an expensive method call  which would offset any performance gains from avoiding a vtable lookup.    this may also be why setting   to have its own hash code method improves performance as it prevents the possibility of falling through to  .     http://www.slideshare.net/dmitriydumanskiy/jvm-performance-options-how-it-works   "
          }
        ],
        "parent": "q_110289",
        "author": "blank"
      },
      {
        "date": "Jun 20, 2014 12:38:04 AM",
        "commentid": "a_135252",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": -0.35599999999999987,
            "sent": " the semantics of hashcode() are more complex than regular methods  so the jvm and the jit compiler must do more work when you call hashcode() than when you call a regular virtual method.     one specificity has an negative impact on performance : calling hashcode() on a null object is valid and returns zero. this requires one more branching than on a regular call which in itself can explain the performance difference you have constated.     note that is is true it seems only from java 7 due to the introduction of object.hashcode(target) which has this semantic. it would be interesting to know on which version you tested this issue and if you would have the same on java6 for instance.     another specificity has a positive impact on performance : if you do not provide your own hascode() implementation  the jit compiler will use an inline hashcode computation code which is faster than a regular compiled object.hashcode call.    e.  "
          }
        ],
        "parent": "q_110289",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": -0.35599999999999987,
        "sent": " normally  java optimizes the virtual calls based on the number of implementations encountered on a given call side. this can be easily seen in the  results  of my  benchmark   when you look at    which is a trivial method returning a stored  . there's a trivial         with a couple of identical implementation like         with increasing number of implementations  the timing of the method call grows from 0.4 ns through 1.2 ns for two implementations to 11.6 ns and then grows slowly. when the jvm has seen multiple implementation  i.e.  with   the timings differ slightly (because of an   test needed).    so far it's all clear  however  the   behaves rather differently. especially  it's 8-10 times slower in three cases. any idea why?    update    i was curious if the poor   could be helped by dispatching manually  and it could a lot.         a couple of branches did the job perfectly:         note that the compiler avoids such optimizations for more than two implementation as most method calls are much more expensive than a simple field load and the gain would be small compared to the code bloat.    the original question \\\" why doesn't jit optimize the   like other methods \\\" remains and   proofs that it indeed could.    update 2    it looks like bestsss is right  at least with this note        calling hashcode() of any class extending base is the same as calling object.hashcode() and this is how it compiles in the bytecode  if you add an explicit hashcode in base that would limit the potential call targets invoking base.hashcode().      i'm not completely sure about what's going on  but declaring   makes a   competitive again.         update 3    ok  providing a  concrete  implementation of   helps  however  the jit must know that it never gets called  as all subclasses defined their own (unless another subclass gets loaded  which can lead to a deoptimization  but this is nothing new for the jit).    so it looks like a missed optimization chance #1.    providing an  abstract  implementation of   works the same. this makes sense  as it provides ensures that no further lookup is needed as each subclass must provide its own (they can't simply inherit from their grandparent).    still for more than two implementations    is so much faster  that the compiler must be doing something subobtimal. maybe a missed optimization chance #2?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Java variable scope in if statement\"",
    "commentid": "q_2728",
    "date": "Dec 23, 2014 9:36:26 AM",
    "children": [
      {
        "date": "Dec 23, 2014 9:49:47 AM",
        "commentid": "a_3295",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.6680000000000001,
            "sent": " the java specification says that an   statement is of the following form:         where   and   can be various things including blocks (code surrounded with braces)  assignments (to already declared variables)  other if statements etc.    of note is that declaration statements (e.g.   or  ) are missing from that list  thus you get a compilation error.    for the full list  you can read the java specification here:  http://docs.oracle.com/javase/specs/   "
          }
        ],
        "parent": "q_2728",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 10:00:51 AM",
        "commentid": "a_3296",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.6680000000000001,
            "sent": " lets analyze what your first code example would mean for the language design         either it means that depending on the condition we have defined   or  . as we don't know which branch was taken  how do we use either   or   after the if-statement? we can't (and if we could that would probably result in strange bugs).    so as language designers we decide that   and   are not visible outside their respective branches to avoid these weird bugs. but as a block-less branch can only have a single statement  we have declared   (or  ) only to be immediately unreachable/unusable again  so doing that makes no sense. therefor we decide that a variable declaration is only allowed with a block. a block can have multiple statements  so variables declared in that block can be used by those other statements.    the designers of java probably applied similar reasoning  so they decided to only allow declaration in a block. this is done through the definition of   ( jls 14.9 ):           ( jls 14.5 )           ( jls 14.2 ):         and   ( jls 14.4 )  which repeats that it can only occur within a immediately enclosing block:        every local variable declaration statement is immediately contained by a block. local variable declaration statements may be intermixed freely with other kinds of statements in the block.     "
          }
        ],
        "parent": "q_2728",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 9:49:07 AM",
        "commentid": "a_3297",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.6680000000000001,
            "sent": "  jls-14.4. local variable declaration statements  reads (in part)         every local variable declaration statement is immediately contained by a block.      and     jls-14.9. if statmenets         otherwise  execution continues by making a choice based on the resulting value:        if the value is true  then the contained statement is executed; the if-then statement completes normally if and only if execution of the statement completes normally.        if the value is false  no further action is taken and the if-then statement completes normally.      however   jls-14.5. statements  doesn't include variable declaration.    defining two different variables within the scope of a single-statement block (containing just the variable definitions) makes them both unreachable. i think you'd have better luck with a ternary expression          or           or          note that the variable   is then initialized to a value based on the   and it is reachable after that statement.  "
          }
        ],
        "parent": "q_2728",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 9:43:03 AM",
        "commentid": "a_3298",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.6680000000000001,
            "sent": "     every local variable declaration statement is immediately contained by a block. local variable declaration statements may be intermixed freely with other kinds of statements in the block.      read this   http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.4   "
          }
        ],
        "parent": "q_2728",
        "author": "blank"
      },
      {
        "date": "Dec 23, 2014 9:47:15 AM",
        "commentid": "a_3299",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.6680000000000001,
            "sent": " my best guess is that you cannot declare variables conditionally.      when you don't have braces  you're trying to declare a variable conditionally in the outer scope  that's not allowed.   when you add the braces  you're creating the variables in that local scope (which are not allowed to be used outside of those braces)    "
          }
        ],
        "parent": "q_2728",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": 0.6680000000000001,
        "sent": " i received a compilation error for the following code:         if i change it to the following code  then there is no compilation error:         why is the first syntax wrong  and from what language standard?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Are there any reasons to have an abstract class with every method in the class defined?\"",
    "commentid": "q_4856",
    "date": "Dec 18, 2014 3:31:01 PM",
    "children": [
      {
        "date": "Dec 18, 2014 3:34:21 PM",
        "commentid": "a_5830",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " it is possible that even though all the methods had a default implementations  these implementations weren't actually  meaningful  in the context of the application. the methods might only do internal bookkeeping while the actually useful implementation must be provided by a derived class which does what it needs to do and then calls the superclass method.    however  this is just speculation. you would have to show an actual example to tell what could be the reason for this design.    as an example  let's take a simple game engine. i have lot's of different  s in my game.        some are visible  so my basic class gets a   method. but there might be invisible objects like trigger areas which don't show up at all  so i implement it as a no-op in the base class.     some do something when they collide with something  so each one gets a   method. but some don't do anything when they collide like a purely visual particle effect  so i also provide a no-op in the base class.     some do something every game tick  so they get a   method. but some objects  like a wall  might not do anything at all on their own. so i also provide a no-op for this.       so what do i do when i have an object which is invisible  doesn't do anything on its own and doesn't interact with anything? there is no reason to have this in the game. so i make this basic class  .  theoretically  you could instance it because all methods have an implementation  but  practically  you have no reason to ever do this  and when you try  you misunderstood how my game engine works.  "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 3:44:16 PM",
        "commentid": "a_5831",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " one typical use case is the creation of an  adapter class . think of a callback interface where you could be notified of 10 different events but are normally only interested in some of them. with an adapter class  you can provide empty implementations such that an actual callback only needs to implement those methods that are of interest after extending the adapter. by making the adapter abstract  you express the fact that it makes no sense to instantiate the adapter itself as it does nothing useful.    since java 8  you would not longer implement such an adapter but use  default methods  for the interface.  "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 3:34:30 PM",
        "commentid": "a_5832",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " yes  there is. sometimes you know you're creating an abstract class - one that will have to be derived from to make any actual sense  but you want to provide a default implementation to all the methods. this doesn't happen a lot  but it does happen.    update: i just had a case like this. i'm recording various user generated events. each event has a timespan and a description  and they all have other things as well. i've created a base event class:         granted  this is c# and not java  but had i written this in java  i would have done exactly the same thing)  "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 3:42:32 PM",
        "commentid": "a_5833",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " you can have an abstract class that implements several interfaces. you need not implement these methods in an abstract class  but you do need to implement them in a subclass of your abstract class.    e.g.       "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 3:34:48 PM",
        "commentid": "a_5834",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " if a java class is declared abstract yet has all of its methods declared  then they are doing it so it cannot be instantiated  though it may be subclassed.    \\\"abstract classes cannot be instantiated  but they can be subclassed.\\\" see here:  https://docs.oracle.com/javase/tutorial/java/iandi/abstract.html   "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 18, 2014 4:02:35 PM",
        "commentid": "a_5835",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " you might have some classes that don't make sense in the context of your application but they do in the design.  a silly example: abstract class animal  implement born and die. you don't want an \\\"animal\\\". you want a dog. this way you don't have to repeat the code each class you add. now you can have dog  cat or whatever you want  this would be a good reason  anyway it's hard to find.  "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      },
      {
        "date": "Dec 19, 2014 6:02:20 AM",
        "commentid": "a_5836",
        "sent": [
          {
            "topicid": 7,
            "systemtopicid": 7,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Inheritance",
            "linePolarity": 0.13199999999999967,
            "sent": " i see this question is already marked answered  but i'd like to provide another alternative explanation.    another reason for this kind of code would be to provide a base implementation for all derived classes of that abstract class.     then when implementing new derived classes you have a runable implementation that you can then choose to override the methods of in order to customize behavior for that derived instance.    take the case of an   which is abstract and provides data access logic based on a common argument  such as itemnumber.     (sorry for the c# code but this question is pretty much just programming theory more than it's about a specific language)         you could then derive a   which uses the base implementation. this accounts for 80% of the items that you are tracking.         then you derive a   that goes to a couple of different data services to acquire information about that particular item type  but still uses some of the base implementation defaults. this covers the next 10%.         then you derive a `specialtype2itembuilder' that goes to yet another set of sporadic dataservices to complete a picture of that item. this one goes overrides another set of methods that are different from type2itembuilder. this covers your last 10%.       "
          }
        ],
        "parent": "q_4856",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 7.0,
        "systemtopicid": 7.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Inheritance",
        "linePolarity": 0.13199999999999967,
        "sent": " it seems that an abstract class means the definition of the class is not complete and hence cannot be instantiated.    and i saw some simple java code which has an abstract class with all of the methods defined. then i was wondering  why do they make it as an abstract class instead of a real class? are they doing this so we cannot instantiate from this abstract class? or they are getting other benefits from making an abstract class with everything defined?  "
      }
    ]
  },
  {
    "author": "blank",
    "parent": "",
    "title": "\"Can there be a (Java 7) FileSystem for which a Path .isAbsolute() but has a null root?\"",
    "commentid": "q_16555",
    "date": "Nov 29, 2014 5:24:20 AM",
    "children": [
      {
        "date": "Dec 15, 2014 8:47:00 AM",
        "commentid": "a_20055",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3640000000000001,
            "sent": " well  there are some obscure things with file systems. i made a few enterprise search crawlers  and somewhere down the road you will notice some strange file system things going on with paths. btw: these are all implementations of custom (overridden) file systems  so no standard ones  and you can definitely argue for hours on what of those things are good ideas and what are not... still  i don't think you'll encounter any of these cases with the standard file systems.    here goes a few examples of strange things:     files in container file systems (ole2  zip  tar  etc): c:\\\\foo\\\\bar\\\\blah.zip\\\\myfile     in this case  you can decide what item is 'the root':      'c:\\\\' ? that's not the root of the zip file containing the file...   'c:\\\\foo\\\\bar\\\\blah.zip' ? it might be the root of the file  but by doing that it might break your application.   'blah.zip' ? might be the root of the zip file - but regardless this might probably break your application as well.   '/' ? as in the '/' folder in the zip file? it might be possible  but that will give you a serious headache in the long run.       'graph' like structures like http:       the fact that you have '/foo/bar' doesn't imply that '/foo' or even '/' exists. (suppose that meets your criterium). the only thing you can do is walk the graph...   note that protocols like webdav are http based and can give you a similar headache. i have some examples here of custom webdav file systems that don't have a 'root' folder  but do have absolute paths.       still  you can argue that the top-most common path (if that exists...) that you can reach is the root or that there is a root - but you simply cannot reach it (even though it's really non-existent).     samba/netbios     if you see a complete samba (windows networking) network as a single file system  then you basically end up with a 'root' containing all workgroups  a workgroup containing all computers  a computer containing all shares  and then the files in the share.    however... the root and the workgroups don't really exist. they are things that are made up from a broadcast protocol (which is also quite unreliable if you have a network of over 1000 computers). from a crawler perspective  it makes all the sense in the world to treat the 'root' and 'workgroup' directories completely different from the (reliable) rest.     however     these scenario's describe only paths where the root is unreachable  unreliable or something else. theoretically  i suppose that in any url you can think of  there is always a root. after all  it's made up as a string of characters defining a hierarchy  which therefore by definition has a start.  "
          }
        ],
        "parent": "q_16555",
        "author": "blank"
      },
      {
        "date": "Dec 15, 2014 8:50:45 AM",
        "commentid": "a_20056",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3640000000000001,
            "sent": " a question of semantics    from my understanding of the subject  an absolute path can only be absolute if it can be traced back to it's root. as such there should  never  be an absolute path without a root. ultimately this just comes down to semantics and although we can find definitions that define the absolute path such (egs below);       \\\"the absolute path contains the root directory and all other subdirectories\\\"     \\\"absolute path is a path that points to the same location on one file system regardless of the present working directory or combined paths. as such it must always contain the root directory.\\\"       the only real question left after this point is whether the definition by the java api follows suit. the only place i can find reference to the definition of an absolute path (with reference to the root element) from an official oracle source is from inside the official java tutorial.  the official java tutorials say         an absolute path always contains the root element       if this statement is to be believed  then no file system (no matter how obscure) can contain a path that the java api will consider absolute  unless it also considers it to contain a root .     you could argue that in some non-heirarchical file systems you might fall into some issues deciding whether a file can be it's own root. however  by this definition in the  path api  (emphasis mine)  a path should not represent a non-hierarchical element;        a path represents a path that is  hierarchical  and composed of a   sequence of directory and file name elements    "
          }
        ],
        "parent": "q_16555",
        "author": "blank"
      },
      {
        "date": "Dec 15, 2014 8:56:56 AM",
        "commentid": "a_20057",
        "sent": [
          {
            "topicid": 9,
            "systemtopicid": 9,
            "sentimentwords": [],
            "sentid": "",
            "systemlabel": "Eclipse",
            "linePolarity": -0.3640000000000001,
            "sent": " the definition    the interface states the following about roots:        a root component  that identifies a file system hierarchy  may also be present.      so as you see  the comment seems to imply that roots are used for  file system hierarchies . ow we have to reason about what an absolute path is. the interface tells us the following:        an absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file.      so  as you see  there is  no word about roots in the definition about absolute paths . the only restriction is that we have to be able to locate the file without further information.    hierarchical file systems    most file system are hierarchical  i.e.  they are trees (or graphs if we consider links) or forests. the root in a tree is a node that is not the child of another node (excluding links). windows file systems are  for example  forests  as they have many roots (    ...). linux has usually only one root which is  . roots are very important as without them it would be hard to start locating a file.  in such file systems  you can usually rely on each absolute path having a root.     non-hierarchical file systems     as long as we have a hierarchical file system  we can anticipate a root in an absolute path  but what if we don't have one? then  an absolute path might not contain a root.     an example that comes to my mind: distributed file systems like  chord . these are often not hierarchical so the meaning of roots is usually undefined. instead  a file hash identifies a file (sha-1 in chord). so a valid chord path might look like this:          this is an absolute path. one can retrieve the associated file without further information  so the path is absolute. however  i see no root. we  could  define the whole hash to be its own root (then each file would be its own root)  but nobody can guarantee that every person that implements a chord file system will agree to this. so there might be reasonable implementations that do not treat these hashes as roots. in such a file system  each path would be absolute  but none would contain a root.    if i would implement a non-hierarchical file system  i would always return   as root  as imho a root is not a defined concept in a non-hierarchical file system. since i think like this  other devs might think so as well. consequently  you may not assume that every absolute path has a root.    note that distributed file systems are quite common in many areas  so this is not merely a corner case that will never be implemented. i think you have to anticipate it.    conclusion      the interface does not mandate that each absolute path must have a root   there are reasonable file systems in which having no root makes sense   an oracle tutorial as mentioned in the comments is no contract for the interface. you should not rely on this      so there will be people implementing file systems without roots; you should anticipate this.  "
          }
        ],
        "parent": "q_16555",
        "author": "blank"
      }
    ],
    "sent": [
      {
        "topicid": 9.0,
        "systemtopicid": 9.0,
        "sentimentwords": [],
        "sentid": "",
        "systemlabel": "Eclipse",
        "linePolarity": -0.3640000000000001,
        "sent": " the javadoc for     says:        tells whether or not this path is absolute.     an absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file.         returns:      if  and only if  this path is absolute      the javadoc for     says:        returns the root component of this path as a path object  or null if this path does not have a root component.         returns:    a path representing the root component of this path  or        ok  so  i am at a loss here; are there any filesystems out there for which a path may be absolute without a root at all?       edit: note that there can be paths which have a root but are not absolute. for instance  these on windows systems:       ;    .      but i am asking for the  reverse  here: no root and absolute.  "
      }
    ]
  }
]
}